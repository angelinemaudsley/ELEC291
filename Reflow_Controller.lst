0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             24   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             25   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             26   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             27   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             28   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             29   
0000             30   ORG 0x0000
0000 020FB6      31            ljmp main
0003             32   ; Timer/Counter 0 overflow interrupt vector
000B             33   org 0x000B
000B 0204CF      34            ljmp Timer0_ISR
0023             35   org 0x0023
0023 32          36            reti
0024             37            ; Timer/Counter 2 overflow interrupt vector
002B             38   org 0x002B
002B 0204DC      39            ljmp Timer2_ISR
002E             40   
002E             41   START_BUTTON  equ P1.7
002E             42   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             43   CONVERT equ P1.6
002E             44   SOUND_OUT equ P1.2
002E             45   MUTE_BUTTON equ P3.0
002E             46   
002E             47   
002E             48   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    49   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    50   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A20    51   heating_to_s:  db   'Ts:   C To:   C', 0
     20204320
     546F3A20
     20204300
005E 54656D70    52   heating_temp:db    'Temp:', 0
     3A00
0064 20202020    53   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0075 4552524F    54   safety_message:db  'ERROR: ', 0
     523A2000
007D 43616E74    55   safety_message1:db  'Cant Read Temp',0
     20526561
     64205465
     6D7000
008C 536F616B    56   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    57   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    58   time:db            'Time:xxs',0
     3A787873
     00
00B0 54723A20    59   heating_to_r:db    'Tr:   C To:   C', 0
     20204320
     546F3A20
     20204300
00C0 436F6F6C    60   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0 446F6E65    61   done:db            'Done',0
     00
00D5 52656164    62   ready:db           'Ready to remove',0
     7920746F
     2072656D
     6F766500
00E5 4300        63   celsius:db         'C',0
00E7 4600        64   fahrenheit:db      'F',0
00E9 4C00        65   low_1:db             'L',0
00EB 4800        66   high_1:db            'H',0
00ED 4700        67   good:db            'G',0
00EF 2000        68   blank_unit:db      ' ',0
00F1             69   
00F1             70   cseg
00F1             71   ; These 'equ' must match the hardware wiring
00F1             72   LCD_RS equ P1.3
00F1             73   LCD_E  equ P1.4
00F1             74   LCD_D4 equ P0.0
00F1             75   LCD_D5 equ P0.1
00F1             76   LCD_D6 equ P0.2
00F1             77   LCD_D7 equ P0.3
00F1             78   ;ADC_pn equ P1.1
00F1             79   
00F1             80   
                 82   	$LIST
01E3             84   
0030             85   DSEG at 30h
0030             86   STATE: ds 1
0031             87   Soak_time: ds 1
0032             88   Soak_temp: ds 1
0033             89   soak_temp_hund: ds 1
0034             90   Reflow_time: ds 1
0035             91   Reflow_temp: ds 1
0036             92   current_temp: ds 1
0037             93   current_temp_hund: ds 1
0038             94   outside_temp: ds 1
0039             95   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             96   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             97   pwm: ds 1 ; pwm percentage
003C             98   reflow_temp_100:ds 1
003D             99   x: ds 4
0041            100   y: ds 4
0045            101   z: ds 4
0049            102   bcd: ds 5
004E            103   
004E            104   
0000            105   BSEG
0000            106   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000            107   PB0: dbit 1
0001            108   PB1: dbit 1
0002            109   PB2: dbit 1
0003            110   PB3: dbit 1
0004            111   PB4: dbit 1
0005            112   decrement1: dbit 1
0006            113   s_flag: dbit 1 ; set to 1 every time a second has passed
0007            114   mf: dbit 1
0008            115   temp_flag: dbit 1
0009            116   fahrenheit_flag: dbit 1
000A            117   mute_flag: dbit 1
000B            118   
                546   $LIST
                120   $LIST
0453            122   
0453            123   CSEG
0453            124   
0453            125   Init_All:
0453            126            ; Configure all the pins for biderectional I/O
0453 75AC00     127            mov     P3M1, #0x00
0456 75AD00     128            mov     P3M2, #0x00
0459 75B300     129            mov     P1M1, #0x00
045C 75B400     130            mov     P1M2, #0x00
045F 75B100     131            mov     P0M1, #0x00
0462 75B200     132            mov     P0M2, #0x00
0465            133            
0465 438E10     134            orl     CKCON, #0x10 ; CLK is the input for timer 1
0468 438780     135            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
046B 759852     136            mov     SCON, #0x52
046E 53C4DF     137            anl     T3CON, #0b11011111
0471 53890F     138            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0474 438920     139            orl     TMOD, #0x20 ; Timer 1 Mode 2
0477 758DF7     140            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
047A D28E       141            setb TR1
047C            142            
047C            143            ; Using timer 0 for delay functions.  Initialize here:
047C C28C       144            clr     TR0 ; Stop timer 0
047E 438E08     145            orl     CKCON,#0x08 ; CLK is the input for timer 0
0481 5389F0     146            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0484 438901     147            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0487            148   
0487            149            ; Initialize timer 2 for periodic interrupts
0487 75C800     150            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
048A 75CDD7     151            mov TH2, #high(TIMER2_RELOAD)
048D 75CC79     152            mov TL2, #low(TIMER2_RELOAD)
0490            153            ; Set the reload value
0490 75C9A0     154            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0493 75CBD7     155            mov RCMP2H, #high(TIMER2_RELOAD)
0496 75CA79     156            mov RCMP2L, #low(TIMER2_RELOAD)
0499            157            ; Init the free running 10 ms counter to zero
0499 753A00     158            mov pwm_counter, #0
049C            159            ; Enable the timer and interrupts
049C 439B80     160            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
049F D2CA       161            setb TR2 ; Enable timer 2
04A1 D2AF       162            setb EA ; Enable global interrupts
04A3            163   
04A3            164            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
04A3 43B302     165            orl     P1M1, #0b00000010
04A6 53B4FD     166            anl     P1M2, #0b11111101
04A9            167            
04A9            168       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
04A9 43B110     169       orl  P0M1, #0b00010000
04AC 53B2EF     170            anl     P0M2, #0b11101111
04AF            171            
04AF            172   
04AF            173            ; Initialize and start the ADC-LM335:
04AF            174            ;do these two when you are going to read from pin 14
04AF            175       ;anl ADCCON0, #0xF0
04AF            176            ;orl ADCCON0, #0x07 ; Select channel 7
04AF            177            
04AF            178       ; AINDIDS select if some pins are analog inputs or digital I/O:
04AF 75F600     179            mov AINDIDS, #0x00 ; Disable all analog inputs
04B2 43F690     180            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
04B5 43E101     181            orl ADCCON1, #0x01 ; Enable ADC
04B8            182   
04B8            183   
04B8 22         184   ret
04B9            185            
04B9            186   Timer0_Init:
04B9 438E08     187            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04BC E589       188            mov a, TMOD
04BE 54F0       189            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04C0 4401       190            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04C2 F589       191            mov TMOD, a
04C4 758CF0     192            mov TH0, #high(TIMER0_RELOAD)
04C7 758A2C     193            mov TL0, #low(TIMER0_RELOAD)
04CA            194            ; Enable the timer and interrupts
04CA D2A9       195       setb ET0  ; Enable timer 0 interrupt
04CC D28C       196       setb TR0  ; Start timer 0
04CE 22         197            ret
04CF            198   
04CF            199   ;---------------------------------;
04CF            200   ; ISR for timer 0.  Set to execute;
04CF            201   ; every 1/4096Hz to generate a    ;
04CF            202   ; 2048 Hz wave at pin SOUND_OUT   ;
04CF            203   ;---------------------------------;
04CF            204   Timer0_ISR:
04CF            205            ;clr TF0  ; According to the data sheet this is done for us already.
04CF            206            ; Timer 0 doesn't have 16-bit auto-reload, so
04CF C28C       207            clr TR0
04D1 758CF0     208            mov TH0, #high(TIMER0_RELOAD)
04D4 758A2C     209            mov TL0, #low(TIMER0_RELOAD)
04D7 D28C       210            setb TR0
04D9 B292       211            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04DB 32         212            reti
04DC            213   
04DC            214   Timer2_ISR:
04DC C2CF       215            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04DE C0D0       216            push psw
04E0 C0E0       217            push acc
04E2            218   
04E2 053A       219            inc pwm_counter
04E4 C3         220            clr c
04E5 E53B       221            mov a, pwm
04E7 953A       222            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04E9 B3         223            cpl c
04EA 9290       224            mov PWM_OUT, c
04EC            225   
04EC E53A       226            mov a, pwm_counter
04EE B46407     227            cjne a, #100, Timer2_ISR_done
04F1 753A00     228            mov pwm_counter, #0
04F4 0539       229            inc seconds ; It is super easy to keep a seconds count here
04F6 D206       230            setb s_flag
04F8            231   
04F8            232   Timer2_ISR_done:
04F8 D0E0       233            pop acc
04FA D0D0       234            pop psw
04FC 32         235            reti
04FD            236   
04FD            237   LCD_PB:
04FD            238            ; Set variables to 1: 'no push button pressed'
04FD D200       239            setb PB0
04FF D201       240            setb PB1
0501 D202       241            setb PB2
0503 D203       242            setb PB3
0505 D204       243            setb PB4
0507            244            ; The input pin used to check set to '1'
0507 D295       245            setb P1.5
0509            246            
0509            247            ; Check if any push button is pressed
0509 C280       248            clr P0.0
050B C281       249            clr P0.1
050D C282       250            clr P0.2
050F C283       251            clr P0.3
0511 C293       252            clr P1.3
0513 209544     253            jb P1.5, LCD_PB_Done
0516            254   
0516            255            ; Debounce
0516 209541     256            jb P1.5, LCD_PB_Done
0519 C002       257            push AR2
051B 7A32       257            mov R2, #50
051D 1200FB     257            lcall ?Wait_Milli_Seconds
0520 D002       257            pop AR2
0522 209535     258            jb P1.5, LCD_PB_Done
0525 2095FD     259            jb P1.5, $
0528            260   
0528            261            ; Set the LCD data pins to logic 1
0528 D280       262            setb P0.0
052A D281       263            setb P0.1
052C D282       264            setb P0.2
052E D283       265            setb P0.3
0530 D293       266            setb P1.3
0532            267            
0532            268            ; Check the push buttons one by one
0532 C293       269            clr P1.3
0534 A295       270            mov c, P1.5
0536 9204       271            mov PB4, c
0538 D293       272            setb P1.3
053A            273   
053A C280       274            clr P0.0
053C A295       275            mov c, P1.5
053E 9203       276            mov PB3, c
0540 D280       277            setb P0.0
0542            278            
0542 C281       279            clr P0.1
0544 A295       280            mov c, P1.5
0546 9202       281            mov PB2, c
0548 D281       282            setb P0.1
054A            283            
054A C282       284            clr P0.2
054C A295       285            mov c, P1.5
054E 9201       286            mov PB1, c
0550 D282       287            setb P0.2
0552            288            
0552 C283       289            clr P0.3
0554 A295       290            mov c, P1.5
0556 9200       291            mov PB0, c
0558 D283       292            setb P0.3
055A            293   
055A            294   LCD_PB_Done:             
055A 22         295            ret
055B            296   
055B            297   check_decrement: 
055B 200005     298            jb PB0, check_stime
055E B205       299            cpl decrement1
0560 020563     300            ljmp check_stime
0563            301   
0563            302   check_stime:
0563 20042B     303            jb PB4, check_stemp_intr
0566 200514     304            jb decrement1, Soak_time_decrement
0569 E531       305            mov a, Soak_time
056B 2401       306            add a, #0x01
056D D4         307            da a
056E F531       308            mov Soak_time, a
0570 9460       309            subb a, #0x60
0572 4020       310            jc display_up_stime ;if soak_time < 60
0574 E531       311            mov a, Soak_time
0576 9490       312            subb a, #0x90
0578 4059       313            jc display_check_stime
057A 020612     314            ljmp display_down_stime 
057D            315   
057D            316   Soak_time_decrement: 
057D E531       317            mov a, Soak_time
057F 2499       318            add a, #0x99
0581 D4         319            da a
0582 F531       320            mov Soak_time, a
0584 9460       321            subb a, #0x60
0586 400C       322            jc display_up_stime ; skip if soak_time < 60
0588 E531       323            mov a, Soak_time
058A 9490       324            subb a, #0x90
058C 4045       325            jc display_check_stime
058E 020612     326            ljmp display_down_stime
0591            327   
0591            328   check_stemp_intr:
0591 020651     329            ljmp check_stemp
0594            330            
0594            331   display_up_stime:
0594 7440       332            mov a, #0x40
0596 120145     332            lcall ?WriteCommand
0599 7400       333            mov a, #00000B
059B 120140     333            lcall ?WriteData
059E 7404       334            mov a, #00100B
05A0 120140     334            lcall ?WriteData
05A3 740E       335            mov a, #01110B
05A5 120140     335            lcall ?WriteData
05A8 741F       336            mov a, #11111B
05AA 120140     336            lcall ?WriteData
05AD 7404       337            mov a, #00100B
05AF 120140     337            lcall ?WriteData
05B2 7404       338            mov a, #00100B
05B4 120140     338            lcall ?WriteData
05B7 7404       339            mov a, #00100B
05B9 120140     339            lcall ?WriteData
05BC 7404       340            mov a, #00100B
05BE 120140     340            lcall ?WriteData
05C1 C0E0       341            push acc
05C3 7406       341            mov a, #6
05C5 14         341            dec a
05C6 12018A     341            lcall ?Set_Cursor_1 ; Select column and row
05C9 D0E0       341            pop acc
05CB 7400       342            mov a, #0
05CD 120140     342            lcall ?WriteData
05D0 020651     343            ljmp check_stemp
05D3            344   
05D3            345   display_check_stime:
05D3 7460       346            mov a, #0x60
05D5 120145     346            lcall ?WriteCommand
05D8 7400       347            mov a, #00000B
05DA 120140     347            lcall ?WriteData
05DD 7400       348            mov a, #00000B
05DF 120140     348            lcall ?WriteData
05E2 7401       349            mov a, #00001B
05E4 120140     349            lcall ?WriteData
05E7 7401       350            mov a, #00001B
05E9 120140     350            lcall ?WriteData
05EC 7412       351            mov a, #10010B
05EE 120140     351            lcall ?WriteData
05F1 740A       352            mov a, #01010B
05F3 120140     352            lcall ?WriteData
05F6 7404       353            mov a, #00100B
05F8 120140     353            lcall ?WriteData
05FB 7400       354            mov a, #00000B
05FD 120140     354            lcall ?WriteData
0600 C0E0       355            push acc
0602 7406       355            mov a, #6
0604 14         355            dec a
0605 12018A     355            lcall ?Set_Cursor_1 ; Select column and row
0608 D0E0       355            pop acc
060A 7404       356            mov a, #4
060C 120140     356            lcall ?WriteData
060F 020651     357            ljmp check_stemp
0612            358   
0612            359   display_down_stime:
0612 7450       360            mov a, #0x50
0614 120145     360            lcall ?WriteCommand
0617 7400       361            mov a, #00000B
0619 120140     361            lcall ?WriteData
061C 7404       362            mov a, #00100B
061E 120140     362            lcall ?WriteData
0621 7404       363            mov a, #00100B
0623 120140     363            lcall ?WriteData
0626 7404       364            mov a, #00100B
0628 120140     364            lcall ?WriteData
062B 7404       365            mov a, #00100B
062D 120140     365            lcall ?WriteData
0630 741F       366            mov a, #11111B
0632 120140     366            lcall ?WriteData
0635 740E       367            mov a, #01110B
0637 120140     367            lcall ?WriteData
063A 7404       368            mov a, #00100B
063C 120140     368            lcall ?WriteData
063F C0E0       369            push acc
0641 7406       369            mov a, #6
0643 14         369            dec a
0644 12018A     369            lcall ?Set_Cursor_1 ; Select column and row
0647 D0E0       369            pop acc
0649 7402       370            mov a, #2
064B 120140     370            lcall ?WriteData
064E 020651     371            ljmp check_stemp
0651            372   
0651            373   check_stemp:
0651 20037E     374            jb PB3, check_rtime_intr
0654 200555     375            jb decrement1, Soak_temp_decrement
0657 E532       376            mov a, Soak_temp
0659 B49903     377            cjne a, #0x99, continue_stemp
065C 02067E     378            ljmp add_hund_s
065F            379   
065F            380   continue_stemp:
065F 2401       381            add a, #0x01
0661 D4         382            da a
0662 F532       383            mov Soak_temp, a
0664 020667     384       ljmp cont_s
0667            385   
0667            386       cont_s:
0667 E533       387       mov a, soak_temp_hund
0669 B42022     388            cjne a, #0x20, check_stemp_range_hund
066C E532       389       mov a, Soak_temp
066E B4501D     390       cjne a, #0x50, check_stemp_range_hund
0671 7400       391            mov a, #0x00
0673 F532       392            mov Soak_temp, a
0675 E533       393       mov a, soak_temp_hund
0677 7400       394       mov a, #0x00
0679 F533       395       mov soak_temp_hund, a
067B 02068E     396            ljmp check_stemp_range_hund
067E            397   
067E            398   add_hund_s:
067E E533       399       mov a, soak_temp_hund
0680 2410       400       add a, #0x10
0682 D4         401       da A
0683 F533       402       mov soak_temp_hund, A
0685 E532       403       mov a, Soak_temp
0687 7400       404            mov a, #0x00
0689 F532       405            mov soak_temp, a
068B 020667     406       ljmp cont_s
068E            407   
068E            408   check_stemp_range_hund:
068E E533       409            mov a, Soak_temp_hund
0690 9409       410            subb a, #0x09
0692 4044       411            jc display_up_stemp
0694 E533       412            mov a, soak_temp_hund
0696 9419       413            subb a, #0x19
0698 4003       414            jc check_stemp_range
069A 0206D5     415            ljmp display_down_stemp_intr
069D            416   
069D            417   check_stemp_range:
069D E532       418            mov a, soak_temp
069F 9430       419            subb a, #0x30 
06A1 4035       420            jc display_up_stemp
06A3 E532       421            mov a, soak_temp
06A5 9471       422            subb a, #0x71
06A7 406E       423            jc display_check_stemp
06A9 0206D5     424            ljmp display_down_stemp_intr
06AC            425   
06AC            426   Soak_temp_decrement: 
06AC E532       427            mov a, Soak_temp
06AE 2499       428            add a, #0x99
06B0 D4         429            da a
06B1 F532       430            mov Soak_temp, a
06B3 B400D8     431       cjne a, #0x00, check_stemp_range_hund
06B6 0206CA     432       ljmp decrement_s_hund   
06B9            433   
06B9            434       continue_dec_s:
06B9 753320     435       mov soak_temp_hund, #0x20
06BC 753250     436       mov soak_temp, #0x50
06BF 02068E     437       ljmp check_stemp_range_hund
06C2            438   
06C2            439       cont_s_dec:
06C2 9410       440       SUBB a, #0x10
06C4 D4         441       da A
06C5 F533       442       mov soak_temp_hund, a 
06C7 02068E     443            ljmp check_stemp_range_hund
06CA            444   
06CA            445   decrement_s_hund:
06CA E533       446       mov a, soak_temp_hund
06CC B400F3     447       cjne a , #0x00, cont_s_dec
06CF 0206B9     448       ljmp continue_dec_s
06D2            449   
06D2            450   check_rtime_intr:
06D2 020795     451            ljmp check_rtime
06D5            452   
06D5            453   display_down_stemp_intr:
06D5 020756     454            ljmp display_down_stemp
06D8            455   
06D8            456   display_up_stemp:
06D8 7440       457            mov a, #0x40
06DA 120145     457            lcall ?WriteCommand
06DD 7400       458            mov a, #00000B
06DF 120140     458            lcall ?WriteData
06E2 7404       459            mov a, #00100B
06E4 120140     459            lcall ?WriteData
06E7 740E       460            mov a, #01110B
06E9 120140     460            lcall ?WriteData
06EC 741F       461            mov a, #11111B
06EE 120140     461            lcall ?WriteData
06F1 7404       462            mov a, #00100B
06F3 120140     462            lcall ?WriteData
06F6 7404       463            mov a, #00100B
06F8 120140     463            lcall ?WriteData
06FB 7404       464            mov a, #00100B
06FD 120140     464            lcall ?WriteData
0700 7404       465            mov a, #00100B
0702 120140     465            lcall ?WriteData
0705 C0E0       466            push acc
0707 740A       466            mov a, #10
0709 14         466            dec a
070A 12018A     466            lcall ?Set_Cursor_1 ; Select column and row
070D D0E0       466            pop acc
070F 7400       467            mov a, #0
0711 120140     467            lcall ?WriteData
0714            467   
0714 020795     468            ljmp check_rtime
0717            469   
0717            470   display_check_stemp:
0717 7460       471            mov a, #0x60
0719 120145     471            lcall ?WriteCommand
071C 7400       472            mov a, #00000B
071E 120140     472            lcall ?WriteData
0721 7400       473            mov a, #00000B
0723 120140     473            lcall ?WriteData
0726 7401       474            mov a, #00001B
0728 120140     474            lcall ?WriteData
072B 7401       475            mov a, #00001B
072D 120140     475            lcall ?WriteData
0730 7412       476            mov a, #10010B
0732 120140     476            lcall ?WriteData
0735 740A       477            mov a, #01010B
0737 120140     477            lcall ?WriteData
073A 7404       478            mov a, #00100B
073C 120140     478            lcall ?WriteData
073F 7400       479            mov a, #00000B
0741 120140     479            lcall ?WriteData
0744 C0E0       480            push acc
0746 740A       480            mov a, #10
0748 14         480            dec a
0749 12018A     480            lcall ?Set_Cursor_1 ; Select column and row
074C D0E0       480            pop acc
074E 7404       481            mov a, #4
0750 120140     481            lcall ?WriteData
0753            481   
0753 020795     482            ljmp check_rtime
0756            483   
0756            484   display_down_stemp:
0756 7450       485            mov a, #0x50
0758 120145     485            lcall ?WriteCommand
075B 7400       486            mov a, #00000B
075D 120140     486            lcall ?WriteData
0760 7404       487            mov a, #00100B
0762 120140     487            lcall ?WriteData
0765 7404       488            mov a, #00100B
0767 120140     488            lcall ?WriteData
076A 7404       489            mov a, #00100B
076C 120140     489            lcall ?WriteData
076F 7404       490            mov a, #00100B
0771 120140     490            lcall ?WriteData
0774 741F       491            mov a, #11111B
0776 120140     491            lcall ?WriteData
0779 740E       492            mov a, #01110B
077B 120140     492            lcall ?WriteData
077E 7404       493            mov a, #00100B
0780 120140     493            lcall ?WriteData
0783 C0E0       494            push acc
0785 740A       494            mov a, #10
0787 14         494            dec a
0788 12018A     494            lcall ?Set_Cursor_1 ; Select column and row
078B D0E0       494            pop acc
078D 7402       495            mov a, #2
078F 120140     495            lcall ?WriteData
0792            495   
0792 020795     496            ljmp check_rtime
0795            497   
0795            498   check_rtime:
0795 20026A     499            jb PB2, check_rtemp_intr
0798 200514     500            jb decrement1, Reflow_time_decrement
079B E534       501            mov a, Reflow_time
079D 2401       502            add a, #0x01
079F D4         503            da a
07A0 F534       504            mov Reflow_time, a
07A2 9430       505            subb a, #0x30
07A4 401D       506            jc display_up_rtime ; skip if soak_time < 60
07A6 E534       507            mov a, Reflow_time
07A8 9490       508            subb a, #0x90
07AA 4059       509            jc display_check_rtime
07AC 020844     510            ljmp display_down_rtime 
07AF            511   
07AF            512   Reflow_time_decrement: 
07AF E534       513            mov a, Reflow_time
07B1 2499       514            add a, #0x99
07B3 D4         515            da a
07B4 F534       516            mov Reflow_time, a
07B6 9430       517            subb a, #0x30
07B8 4009       518            jc display_up_rtime ; skip if soak_time < 60
07BA E534       519            mov a, Reflow_time
07BC 9490       520            subb a, #0x90
07BE 4045       521            jc display_check_rtime
07C0 020844     522            ljmp display_down_rtime 
07C3            523   
07C3            524   display_up_rtime:
07C3 7440       525            mov a, #0x40
07C5 120145     525            lcall ?WriteCommand
07C8 7400       526            mov a, #00000B
07CA 120140     526            lcall ?WriteData
07CD 7404       527            mov a, #00100B
07CF 120140     527            lcall ?WriteData
07D2 740E       528            mov a, #01110B
07D4 120140     528            lcall ?WriteData
07D7 741F       529            mov a, #11111B
07D9 120140     529            lcall ?WriteData
07DC 7404       530            mov a, #00100B
07DE 120140     530            lcall ?WriteData
07E1 7404       531            mov a, #00100B
07E3 120140     531            lcall ?WriteData
07E6 7404       532            mov a, #00100B
07E8 120140     532            lcall ?WriteData
07EB 7404       533            mov a, #00100B
07ED 120140     533            lcall ?WriteData
07F0 C0E0       534            push acc
07F2 7408       534            mov a, #8
07F4 14         534            dec a
07F5 120188     534            lcall ?Set_Cursor_2 ; Select column and row
07F8 D0E0       534            pop acc
07FA 7400       535            mov a, #0
07FC 120140     535            lcall ?WriteData
07FF 020883     536            ljmp check_rtemp
0802            537   
0802            538   check_rtemp_intr:
0802 020883     539            ljmp check_rtemp
0805            540   
0805            541   display_check_rtime:
0805 7460       542            mov a, #0x60
0807 120145     542            lcall ?WriteCommand
080A 7400       543            mov a, #00000B
080C 120140     543            lcall ?WriteData
080F 7400       544            mov a, #00000B
0811 120140     544            lcall ?WriteData
0814 7401       545            mov a, #00001B
0816 120140     545            lcall ?WriteData
0819 7401       546            mov a, #00001B
081B 120140     546            lcall ?WriteData
081E 7412       547            mov a, #10010B
0820 120140     547            lcall ?WriteData
0823 740A       548            mov a, #01010B
0825 120140     548            lcall ?WriteData
0828 7404       549            mov a, #00100B
082A 120140     549            lcall ?WriteData
082D 7400       550            mov a, #00000B
082F 120140     550            lcall ?WriteData
0832 C0E0       551            push acc
0834 7408       551            mov a, #8
0836 14         551            dec a
0837 120188     551            lcall ?Set_Cursor_2 ; Select column and row
083A D0E0       551            pop acc
083C 7404       552            mov a, #4
083E 120140     552            lcall ?WriteData
0841 020883     553            ljmp check_rtemp
0844            554   
0844            555   display_down_rtime:
0844 7450       556            mov a, #0x50
0846 120145     556            lcall ?WriteCommand
0849 7400       557            mov a, #00000B
084B 120140     557            lcall ?WriteData
084E 7404       558            mov a, #00100B
0850 120140     558            lcall ?WriteData
0853 7404       559            mov a, #00100B
0855 120140     559            lcall ?WriteData
0858 7404       560            mov a, #00100B
085A 120140     560            lcall ?WriteData
085D 7404       561            mov a, #00100B
085F 120140     561            lcall ?WriteData
0862 741F       562            mov a, #11111B
0864 120140     562            lcall ?WriteData
0867 740E       563            mov a, #01110B
0869 120140     563            lcall ?WriteData
086C 7404       564            mov a, #00100B
086E 120140     564            lcall ?WriteData
0871 C0E0       565            push acc
0873 7408       565            mov a, #8
0875 14         565            dec a
0876 120188     565            lcall ?Set_Cursor_2 ; Select column and row
0879 D0E0       565            pop acc
087B 7402       566            mov a, #2
087D 120140     566            lcall ?WriteData
0880 020883     567            ljmp check_rtemp
0883            568   
0883            569   check_rtemp:
0883 200178     570            jb PB1, skipp_intr
0886 20054C     571            jb decrement1, Reflow_temp_decrement
0889 E535       572            mov a, Reflow_temp
088B B49903     573            cjne a, #0x99, continue_rtemp
088E 0208C5     574            ljmp add_hundreds_r
0891            575   
0891            576   continue_rtemp:
0891 2401       577            add a, #0x01
0893 D4         578       da a
0894 F535       579       mov Reflow_temp, a
0896 020899     580       ljmp cont_r
0899            581   
0899            582       cont_r:
0899            583       ;check hundreds
0899 E53C       584       mov a, reflow_temp_100
089B B4200F     585       cjne a, #0x20, check_rtemp_range_hund ;make sure to check with 20 since the hundreds place value is multiplied by 10
089E E535       586            mov a, reflow_temp
08A0 B4500A     587       cjne a, #0x50, check_rtemp_range_hund
08A3 7400       588       mov a, #0x00
08A5 F535       589       mov reflow_temp, a
08A7 E53C       590       mov a, reflow_temp_100
08A9 7400       591       mov a, #0x00
08AB F53C       592            mov Reflow_temp_100, a
08AD            593   
08AD            594            check_rtemp_range_hund:
08AD E53C       595            mov a, reflow_temp_100
08AF 9419       596            subb a, #0x19
08B1 404E       597            jc display_up_rtemp
08B3 0208B6     598            ljmp check_rtemp_range
08B6            599   
08B6            600            check_rtemp_range:
08B6 E535       601            mov a, reflow_temp
08B8 9420       602            subb a, #0x20
08BA 4045       603            jc display_up_rtemp
08BC E535       604            mov a, reflow_temp
08BE 9441       605            subb a, #0x41
08C0 407E       606            jc display_check_rtemp
08C2 02097F     607            ljmp display_down_rtemp
08C5            608   
08C5            609   add_hundreds_r:
08C5 E53C       610       mov a, reflow_temp_100
08C7 2410       611       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
08C9 D4         612       da A
08CA F53C       613       mov reflow_temp_100, A
08CC E535       614       mov a, Reflow_temp
08CE 7400       615            mov a, #0x00
08D0 F535       616            mov reflow_temp, a
08D2 020899     617       ljmp cont_r
08D5            618   
08D5            619   
08D5            620   Reflow_temp_decrement: 
08D5 E535       621            mov a, Reflow_temp
08D7 2499       622            add a, #0x99
08D9 D4         623            da a
08DA F535       624            mov Reflow_temp, a
08DC B400CE     625       cjne a, #0x00, check_rtemp_range_hund
08DF 0208F3     626       ljmp decrement_r_hund
08E2            627   
08E2            628       continue_dec_r:
08E2            629            ;mov a, reflow_temp
08E2            630       ;cjne a, #0x00, skipp
08E2 753550     631       mov reflow_temp, #0x50
08E5 753C20     632       mov reflow_temp_100, #0x20
08E8 0208AD     633       ljmp check_rtemp_range_hund
08EB            634   
08EB            635       cont_dec:
08EB 9410       636       SUBB a, #0x10
08ED D4         637       da a
08EE F53C       638       mov reflow_temp_100, a
08F0 0208AD     639            ljmp check_rtemp_range_hund
08F3            640   
08F3            641       decrement_r_hund:
08F3 E53C       642       mov a, reflow_temp_100
08F5 B400F3     643       cjne a, #0x00, cont_dec
08F8 0208E2     644       ljmp continue_dec_r
08FB            645   
08FB            646   display_down_rtemp_intr:
08FB 02097F     647            ljmp display_down_rtemp
08FE            648   
08FE            649   skipp_intr:
08FE 0209BE     650            ljmp skipp
0901            651   
0901            652   display_up_rtemp:
0901 7440       653            mov a, #0x40
0903 120145     653            lcall ?WriteCommand
0906 7400       654            mov a, #00000B
0908 120140     654            lcall ?WriteData
090B 7404       655            mov a, #00100B
090D 120140     655            lcall ?WriteData
0910 740E       656            mov a, #01110B
0912 120140     656            lcall ?WriteData
0915 741F       657            mov a, #11111B
0917 120140     657            lcall ?WriteData
091A 7404       658            mov a, #00100B
091C 120140     658            lcall ?WriteData
091F 7404       659            mov a, #00100B
0921 120140     659            lcall ?WriteData
0924 7404       660            mov a, #00100B
0926 120140     660            lcall ?WriteData
0929 7404       661            mov a, #00100B
092B 120140     661            lcall ?WriteData
092E C0E0       662            push acc
0930 740C       662            mov a, #12
0932 14         662            dec a
0933 120188     662            lcall ?Set_Cursor_2 ; Select column and row
0936 D0E0       662            pop acc
0938 7400       663            mov a, #0
093A 120140     663            lcall ?WriteData
093D            663   
093D 0209BE     664            ljmp skipp
0940            665   
0940            666   display_check_rtemp:
0940 7460       667            mov a, #0x60
0942 120145     667            lcall ?WriteCommand
0945 7400       668            mov a, #00000B
0947 120140     668            lcall ?WriteData
094A 7400       669            mov a, #00000B
094C 120140     669            lcall ?WriteData
094F 7401       670            mov a, #00001B
0951 120140     670            lcall ?WriteData
0954 7401       671            mov a, #00001B
0956 120140     671            lcall ?WriteData
0959 7412       672            mov a, #10010B
095B 120140     672            lcall ?WriteData
095E 740A       673            mov a, #01010B
0960 120140     673            lcall ?WriteData
0963 7404       674            mov a, #00100B
0965 120140     674            lcall ?WriteData
0968 7400       675            mov a, #00000B
096A 120140     675            lcall ?WriteData
096D C0E0       676            push acc
096F 740C       676            mov a, #12
0971 14         676            dec a
0972 120188     676            lcall ?Set_Cursor_2 ; Select column and row
0975 D0E0       676            pop acc
0977 7404       677            mov a, #4
0979 120140     677            lcall ?WriteData
097C            677   
097C 0209BE     678            ljmp skipp
097F            679   
097F            680   display_down_rtemp:
097F 7450       681            mov a, #0x50
0981 120145     681            lcall ?WriteCommand
0984 7400       682            mov a, #00000B
0986 120140     682            lcall ?WriteData
0989 7404       683            mov a, #00100B
098B 120140     683            lcall ?WriteData
098E 7404       684            mov a, #00100B
0990 120140     684            lcall ?WriteData
0993 7404       685            mov a, #00100B
0995 120140     685            lcall ?WriteData
0998 7404       686            mov a, #00100B
099A 120140     686            lcall ?WriteData
099D 741F       687            mov a, #11111B
099F 120140     687            lcall ?WriteData
09A2 740E       688            mov a, #01110B
09A4 120140     688            lcall ?WriteData
09A7 7404       689            mov a, #00100B
09A9 120140     689            lcall ?WriteData
09AC C0E0       690            push acc
09AE 740C       690            mov a, #12
09B0 14         690            dec a
09B1 120188     690            lcall ?Set_Cursor_2 ; Select column and row
09B4 D0E0       690            pop acc
09B6 7402       691            mov a, #2
09B8 120140     691            lcall ?WriteData
09BB            691   
09BB 0209BE     692            ljmp skipp
09BE            693   
09BE            694   skipp:
09BE 22         695            ret
09BF            696   
09BF            697   Check_start:
09BF 20976C     698            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09C2 C002       699            push AR2
09C4 7A32       699            mov R2, #50
09C6 1200FB     699            lcall ?Wait_Milli_Seconds
09C9 D002       699            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09CB 209760     700            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09CE 3097FD     701            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
09D1 753001     702            mov STATE, #0x01
09D4 22         703            ret
09D5            704   
09D5            705   check_convert: 
09D5 209656     706            jb CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09D8 C002       707            push AR2
09DA 7A32       707            mov R2, #50
09DC 1200FB     707            lcall ?Wait_Milli_Seconds
09DF D002       707            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09E1 20964A     708            jb  CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09E4 B209       709            cpl fahrenheit_flag 
09E6 22         710            ret 
09E7            711   
09E7            712   Check_mute:
09E7 20B044     713            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09EA C002       714            push AR2
09EC 7A32       714            mov R2, #50
09EE 1200FB     714            lcall ?Wait_Milli_Seconds
09F1 D002       714            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09F3 20B038     715            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09F6 200A0F     716            jb mute_flag, muteset
09F9 D20A       717            setb mute_flag
09FB C0E0       718            push acc
09FD 744D       718            mov a, #'M'
09FF 120140     718            lcall ?WriteData
0A02 D0E0       718            pop acc
0A04 30B0FD     719            jnb MUTE_BUTTON, $
0A07 22         720            ret
0A08            721   muteset:
0A08 C20A       722            clr mute_flag
0A0A C0E0       723            push acc
0A0C 7420       723            mov a, #' '
0A0E 120140     723            lcall ?WriteData
0A11 D0E0       723            pop acc
0A13 30B0FD     724            jnb MUTE_BUTTON, $
0A16 22         725            ret
0A17            726   
0A17            727   display_mute:
0A17 200A0A     728            jb mute_flag, muted
0A1A C0E0       729            push acc
0A1C 7420       729            mov a, #' '
0A1E 120140     729            lcall ?WriteData
0A21 D0E0       729            pop acc
0A23 22         730            ret
0A24            731   muted:
0A24 C0E0       732            push acc
0A26 744D       732            mov a, #'M'
0A28 120140     732            lcall ?WriteData
0A2B D0E0       732            pop acc
0A2D 22         733            ret
0A2E            734   
0A2E            735   smjmp:
0A2E 0209BE     736   ljmp skipp
0A31            737   
0A31            738   wait_for_ti:
0A31 3099FD     739       jnb TI, wait_for_ti
0A34 C299       740       clr TI
0A36 22         741       ret
0A37            742   
0A37            743   display_menu:
0A37 C0E0       744            push acc
0A39 7407       744            mov a, #7
0A3B 14         744            dec a
0A3C 12018A     744            lcall ?Set_Cursor_1 ; Select column and row
0A3F D0E0       744            pop acc 
0A41 C000       745            push ar0
0A43 A831       745            mov r0, Soak_time
0A45 12018F     745            lcall ?Display_BCD
0A48 D000       745            pop ar0
0A4A C0E0       746            push acc
0A4C 740B       746            mov a, #11
0A4E 14         746            dec a
0A4F 12018A     746            lcall ?Set_Cursor_1 ; Select column and row
0A52 D0E0       746            pop acc
0A54 C000       747            push ar0
0A56 A833       747            mov r0, Soak_temp_hund
0A58 12018F     747            lcall ?Display_BCD
0A5B D000       747            pop ar0
0A5D C0E0       748            push acc
0A5F 740C       748            mov a, #12
0A61 14         748            dec a
0A62 12018A     748            lcall ?Set_Cursor_1 ; Select column and row
0A65 D0E0       748            pop acc
0A67 C000       749            push ar0
0A69 A832       749            mov r0, soak_temp
0A6B 12018F     749            lcall ?Display_BCD
0A6E D000       749            pop ar0
0A70 C0E0       750            push acc
0A72 7409       750            mov a, #9
0A74 14         750            dec a
0A75 120188     750            lcall ?Set_Cursor_2 ; Select column and row
0A78 D0E0       750            pop acc
0A7A C000       751            push ar0
0A7C A834       751            mov r0, Reflow_time
0A7E 12018F     751            lcall ?Display_BCD
0A81 D000       751            pop ar0
0A83 C0E0       752            push acc
0A85 740D       752            mov a, #13
0A87 14         752            dec a
0A88 120188     752            lcall ?Set_Cursor_2 ; Select column and row
0A8B D0E0       752            pop acc
0A8D C000       753            push ar0
0A8F A83C       753            mov r0, reflow_temp_100
0A91 12018F     753            lcall ?Display_BCD
0A94 D000       753            pop ar0
0A96 C0E0       754            push acc
0A98 740E       754            mov a, #14
0A9A 14         754            dec a
0A9B 120188     754            lcall ?Set_Cursor_2 ; Select column and row
0A9E D0E0       754            pop acc
0AA0 C000       755            push ar0
0AA2 A835       755            mov r0, reflow_temp
0AA4 12018F     755            lcall ?Display_BCD
0AA7 D000       755            pop ar0
0AA9 22         756       ret
0AAA            757   
0AAA            758   display_heating_s:
0AAA            759            ;Set_Cursor(1,4)
0AAA            760            ;Display_BCD(Soak_temp_hund)
0AAA            761            ;set_cursor(1,5)
0AAA            762            ;display_bcd(soak_temp)
0AAA C0E0       763            push acc
0AAC 740C       763            mov a, #12
0AAE 14         763            dec a
0AAF 12018A     763            lcall ?Set_Cursor_1 ; Select column and row
0AB2 D0E0       763            pop acc
0AB4 C000       764            push ar0
0AB6 A838       764            mov r0, outside_temp
0AB8 12018F     764            lcall ?Display_BCD
0ABB D000       764            pop ar0
0ABD C0E0       765            push acc
0ABF 7407       765            mov a, #7
0AC1 14         765            dec a
0AC2 120188     765            lcall ?Set_Cursor_2 ; Select column and row
0AC5 D0E0       765            pop acc
0AC7 C000       766            push ar0
0AC9 A836       766            mov r0, current_temp
0ACB 12018F     766            lcall ?Display_BCD
0ACE D000       766            pop ar0
0AD0 22         767            ret
0AD1            768   
0AD1            769   display_heating_r:
0AD1            770            ;Set_Cursor(1,4)
0AD1            771            ;Display_BCD(reflow_temp_100)
0AD1            772            ;set_cursor(1,5)
0AD1            773            ;display_bcd(reflow_temp)
0AD1 C0E0       774            push acc
0AD3 740C       774            mov a, #12
0AD5 14         774            dec a
0AD6 12018A     774            lcall ?Set_Cursor_1 ; Select column and row
0AD9 D0E0       774            pop acc
0ADB C000       775            push ar0
0ADD A838       775            mov r0, outside_temp
0ADF 12018F     775            lcall ?Display_BCD
0AE2 D000       775            pop ar0
0AE4 C0E0       776            push acc
0AE6 7407       776            mov a, #7
0AE8 14         776            dec a
0AE9 120188     776            lcall ?Set_Cursor_2 ; Select column and row
0AEC D0E0       776            pop acc
0AEE C000       777            push ar0
0AF0 A836       777            mov r0, current_temp
0AF2 12018F     777            lcall ?Display_BCD
0AF5 D000       777            pop ar0
0AF7 22         778            ret
0AF8            779   
0AF8            780   display_blank:
0AF8 C0E0       781            push acc
0AFA 7401       781            mov a, #1
0AFC 14         781            dec a
0AFD 12018A     781            lcall ?Set_Cursor_1 ; Select column and row
0B00 D0E0       781            pop acc
0B02 C083       782            push dph
0B04 C082       782            push dpl
0B06 C0E0       782            push acc
0B08 900064     782            mov dptr, #blank
0B0B 12017D     782            lcall ?Send_Constant_String
0B0E D0E0       782            pop acc
0B10 D082       782            pop dpl
0B12 D083       782            pop dph
0B14 C0E0       783            push acc
0B16 7401       783            mov a, #1
0B18 14         783            dec a
0B19 120188     783            lcall ?Set_Cursor_2 ; Select column and row
0B1C D0E0       783            pop acc
0B1E C083       784            push dph
0B20 C082       784            push dpl
0B22 C0E0       784            push acc
0B24 900064     784            mov dptr, #blank
0B27 12017D     784            lcall ?Send_Constant_String
0B2A D0E0       784            pop acc
0B2C D082       784            pop dpl
0B2E D083       784            pop dph
0B30 22         785            ret
0B31            786   
0B31            787   Display_formated_BCD:
0B31 C0E0       788            push acc
0B33 740C       788            mov a, #12
0B35 14         788            dec a
0B36 12018A     788            lcall ?Set_Cursor_1 ; Select column and row
0B39 D0E0       788            pop acc
0B3B C000       789            push ar0
0B3D A84B       789            mov r0, bcd+2
0B3F 12018F     789            lcall ?Display_BCD
0B42 D000       789            pop ar0
0B44 C0E0       790            push acc
0B46 742E       790            mov a, #'.'
0B48 120140     790            lcall ?WriteData
0B4B D0E0       790            pop acc
0B4D C000       791            push ar0
0B4F A84A       791            mov r0, bcd+1
0B51 12018F     791            lcall ?Display_BCD
0B54 D000       791            pop ar0
0B56 22         792            ret
0B57            793   
0B57            794   conv_to_bcd_high:
0B57 C4         795       swap a
0B58 540F       796       anl a, #0x0f
0B5A F9         797       mov R1, a
0B5B 22         798            ret
0B5C            799   
0B5C            800   conv_to_bcd_low:
0B5C 540F       801       anl a, #0x0f
0B5E F8         802       mov R0, A
0B5F 22         803            ret
0B60            804   
0B60            805   conv_to_bcd:
0B60 883D       806            mov x+0, R0
0B62 893E       807            mov x+1, R1
0B64 753F00     808            mov x+2, #0
0B67 754000     809            mov x+3, #0
0B6A 1201E3     810       lcall hex2bcd
0B6D 22         811            ret
0B6E            812   String: 
0B6E 0D0A00     813            DB '\r', '\n', 0
0B71            814   
0B71            815   Outside_tmp:
0B71 53E8F0     816       anl ADCCON0, #0xF0
0B74 43E807     817       orl ADCCON0, #0x07 ; Select channel 7 
0B77            818   
0B77 C2EF       819       clr ADCF
0B79 D2EE       820       setb ADCS
0B7B 30EFFD     821       jnb ADCF, $
0B7E            822   
0B7E E5C3       823       mov a, ADCRH
0B80 C4         824       swap a
0B81 C0E0       825       push acc
0B83 540F       826       anl a, #0x0f
0B85 F9         827       mov R1, a
0B86 D0E0       828       pop acc
0B88 54F0       829       anl a, #0xf0
0B8A 45C2       830       orl a, ADCRL
0B8C F8         831       mov R0, A
0B8D            832       
0B8D            833       ; Convert to voltage
0B8D 883D       834            mov x+0, R0
0B8F 893E       835            mov x+1, R1
0B91 753F00     836            mov x+2, #0
0B94 754000     837            mov x+3, #0
0B97 75417C     838            mov y+0, #low (50300 % 0x10000) 
0B9A 7542C4     838            mov y+1, #high(50300 % 0x10000) 
0B9D 754300     838            mov y+2, #low (50300 / 0x10000) 
0BA0 754400     838            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0BA3 12035D     839            lcall mul32
0BA6 7541FF     840            mov y+0, #low (4095 % 0x10000) 
0BA9 75420F     840            mov y+1, #high(4095 % 0x10000) 
0BAC 754300     840            mov y+2, #low (4095 / 0x10000) 
0BAF 754400     840            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0BB2 1203EA     841            lcall div32
0BB5 7541A4     842            mov y+0, #low (27300 % 0x10000) 
0BB8 75426A     842            mov y+1, #high(27300 % 0x10000) 
0BBB 754300     842            mov y+2, #low (27300 / 0x10000) 
0BBE 754400     842            mov y+3, #high(27300 / 0x10000) 
0BC1 1202C9     843            lcall sub32
0BC4 754164     844            mov y+0, #low (100 % 0x10000) 
0BC7 754200     844            mov y+1, #high(100 % 0x10000) 
0BCA 754300     844            mov y+2, #low (100 / 0x10000) 
0BCD 754400     844            mov y+3, #high(100 / 0x10000) 
0BD0 12035D     845            lcall mul32
0BD3            846       ;save outside temp to z to later add onto the oven temp
0BD3 853D45     847       mov z+0, x+0
0BD6 853E46     848       mov z+1, x+1
0BD9 853F47     849       mov z+2, x+2
0BDC 854048     850       mov z+3, x+3 
0BDF            851   
0BDF 1201E3     852       lcall hex2bcd
0BE2 E530       853       mov a, STATE
0BE4 B40501     854       cjne a, #5, display
0BE7 22         855       ret
0BE8            856   
0BE8            857   display:
0BE8 120B31     858       lcall Display_formated_BCD
0BEB 22         859       ret
0BEC            860   
0BEC            861   oven_tmp:
0BEC 53E8F0     862       anl  ADCCON0, #0xF0  
0BEF 43E804     863       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0BF2            864   
0BF2 C2EF       865       clr ADCF
0BF4 D2EE       866       setb ADCS
0BF6 30EFFD     867       jnb ADCF, $
0BF9            868   
0BF9 E5C3       869       mov a, ADCRH
0BFB C4         870       swap a
0BFC C0E0       871       push acc
0BFE 540F       872       anl a, #0x0f
0C00 F9         873       mov R1, a
0C01 D0E0       874       pop acc
0C03 54F0       875       anl a, #0xf0
0C05 45C2       876       orl a, ADCRL
0C07 F8         877       mov R0, A
0C08            878       
0C08            879       ; Convert to voltage
0C08 883D       880            mov x+0, R0
0C0A 893E       881            mov x+1, R1
0C0C 753F00     882            mov x+2, #0
0C0F 754000     883            mov x+3, #0
0C12 75417C     884            mov y+0, #low (50300 % 0x10000) 
0C15 7542C4     884            mov y+1, #high(50300 % 0x10000) 
0C18 754300     884            mov y+2, #low (50300 / 0x10000) 
0C1B 754400     884            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0C1E 12035D     885            lcall mul32
0C21 7541FF     886            mov y+0, #low (4095 % 0x10000) 
0C24 75420F     886            mov y+1, #high(4095 % 0x10000) 
0C27 754300     886            mov y+2, #low (4095 / 0x10000) 
0C2A 754400     886            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0C2D 1203EA     887            lcall div32
0C30            888   
0C30            889            ;vout of opamp should now be in x
0C30            890       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0C30            891       ;first calculate vout*R2:
0C30 7541BD     892            mov y+0, #low (1469 % 0x10000) 
0C33 754205     892            mov y+1, #high(1469 % 0x10000) 
0C36 754300     892            mov y+2, #low (1469 / 0x10000) 
0C39 754400     892            mov y+3, #high(1469 / 0x10000) 
0C3C 12035D     893       lcall mul32
0C3F            894       ;now vout*R2 ohm is in x
0C3F            895       ;next we will take 461 650V and divide
0C3F 754152     896            mov y+0, #low (461650 % 0x10000) 
0C42 75420B     896            mov y+1, #high(461650 % 0x10000) 
0C45 754307     896            mov y+2, #low (461650 / 0x10000) 
0C48 754400     896            mov y+3, #high(461650 / 0x10000)  
0C4B 1203EA     897       lcall div32
0C4E            898       ;multiply by 100k and then divide by 41 to cancel units
0C4E 754140     899            mov y+0, #low (1000000 % 0x10000) 
0C51 754242     899            mov y+1, #high(1000000 % 0x10000) 
0C54 75430F     899            mov y+2, #low (1000000 / 0x10000) 
0C57 754400     899            mov y+3, #high(1000000 / 0x10000) 
0C5A 12035D     900       lcall mul32
0C5D 754129     901            mov y+0, #low (41 % 0x10000) 
0C60 754200     901            mov y+1, #high(41 % 0x10000) 
0C63 754300     901            mov y+2, #low (41 / 0x10000) 
0C66 754400     901            mov y+3, #high(41 / 0x10000) 
0C69 1203EA     902       lcall div32
0C6C            903       ;move the outside temp to y and add
0C6C 854541     904       mov y+0, z+0
0C6F 854642     905       mov y+1, z+1
0C72 854743     906       mov y+2, z+2
0C75 854844     907       mov y+3, z+3
0C78 1202A8     908       lcall add32
0C7B 1201E3     909       lcall hex2bcd
0C7E            910   
0C7E 854B36     911            mov current_temp, bcd+2
0C81 854C37     912       mov current_temp_hund, bcd+3
0C84            913   
0C84 C000       914   push ar0
0C86 A84C       914   mov r0, bcd+3
0C88 1201C5     914   lcall ?Send_BCD
0C8B D000       914   pop ar0
0C8D C000       915   push ar0
0C8F A84B       915   mov r0, bcd+2
0C91 1201C5     915   lcall ?Send_BCD
0C94 D000       915   pop ar0
0C96            916       put_decimal:
0C96 3099FD     917       jnb TI, put_decimal ; Wait for transmission to complete
0C99 C299       918       clr TI
0C9B 75992E     919       mov SBUF, #'.'
0C9E C000       920   push ar0
0CA0 A84A       920   mov r0, bcd+1
0CA2 1201C5     920   lcall ?Send_BCD
0CA5 D000       920   pop ar0
0CA7 C000       921   push ar0
0CA9 A849       921   mov r0, bcd+0
0CAB 1201C5     921   lcall ?Send_BCD
0CAE D000       921   pop ar0
0CB0            922       put_r:
0CB0 3099FD     923       jnb TI, put_r ; Wait for transmission to complete
0CB3 C299       924       clr TI
0CB5 75990D     925       mov SBUF, #'\r'
0CB8            926       put_n:
0CB8 3099FD     927       jnb TI, put_n ; Wait for transmission to complete
0CBB C299       928       clr TI
0CBD 75990A     929       mov SBUF, #'\n'
0CC0            930   
0CC0 300936     931       jnb fahrenheit_flag, display_oven_tmp
0CC3 12026C     932            lcall bcd2hex
0CC6 754109     933            mov y+0, #low (9 % 0x10000) 
0CC9 754200     933            mov y+1, #high(9 % 0x10000) 
0CCC 754300     933            mov y+2, #low (9 / 0x10000) 
0CCF 754400     933            mov y+3, #high(9 / 0x10000) 
0CD2 12035D     934            lcall mul32
0CD5 754105     935            mov y+0, #low (5 % 0x10000) 
0CD8 754200     935            mov y+1, #high(5 % 0x10000) 
0CDB 754300     935            mov y+2, #low (5 / 0x10000) 
0CDE 754400     935            mov y+3, #high(5 / 0x10000) 
0CE1 1203EA     936            lcall div32 
0CE4 754100     937            mov y+0, #low (320000 % 0x10000) 
0CE7 7542E2     937            mov y+1, #high(320000 % 0x10000) 
0CEA 754304     937            mov y+2, #low (320000 / 0x10000) 
0CED 754400     937            mov y+3, #high(320000 / 0x10000) 
0CF0 1202A8     938            lcall add32 
0CF3 1201E3     939            lcall hex2bcd 
0CF6 020CF9     940            ljmp display_oven_tmp
0CF9            941   
0CF9            942   display_oven_tmp:
0CF9 C0E0       943            push acc
0CFB 7406       943            mov a, #6
0CFD 14         943            dec a
0CFE 120188     943            lcall ?Set_Cursor_2 ; Select column and row
0D01 D0E0       943            pop acc
0D03 C000       944            push ar0
0D05 A84C       944            mov r0, bcd+3
0D07 12018F     944            lcall ?Display_BCD
0D0A D000       944            pop ar0
0D0C C000       945            push ar0
0D0E A84B       945            mov r0, bcd+2
0D10 12018F     945            lcall ?Display_BCD
0D13 D000       945            pop ar0
0D15 C0E0       946            push acc
0D17 742E       946            mov a, #'.'
0D19 120140     946            lcall ?WriteData
0D1C D0E0       946            pop acc
0D1E C000       947            push ar0
0D20 A84A       947            mov r0, bcd+1
0D22 12018F     947            lcall ?Display_BCD
0D25 D000       947            pop ar0
0D27 22         948            ret
0D28            949   
0D28            950   skipp1:
0D28 22         951            ret
0D29            952   
0D29            953   
0D29            954   stage_temp:
0D29 53E8F0     955       anl ADCCON0, #0xF0
0D2C 43E807     956       orl ADCCON0, #0x07 ; Select channel 7 
0D2F            957   
0D2F C2EF       958       clr ADCF
0D31 D2EE       959       setb ADCS
0D33 30EFFD     960       jnb ADCF, $
0D36            961   
0D36 E5C3       962       mov a, ADCRH
0D38 C4         963       swap a
0D39 C0E0       964       push acc
0D3B 540F       965       anl a, #0x0f
0D3D F9         966       mov R1, a
0D3E D0E0       967       pop acc
0D40 54F0       968       anl a, #0xf0
0D42 45C2       969       orl a, ADCRL
0D44 F8         970       mov R0, A
0D45            971       
0D45            972       ; Convert to voltage
0D45 883D       973            mov x+0, R0
0D47 893E       974            mov x+1, R1
0D49 753F00     975            mov x+2, #0
0D4C 754000     976            mov x+3, #0
0D4F 75417C     977            mov y+0, #low (50300 % 0x10000) 
0D52 7542C4     977            mov y+1, #high(50300 % 0x10000) 
0D55 754300     977            mov y+2, #low (50300 / 0x10000) 
0D58 754400     977            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0D5B 12035D     978            lcall mul32
0D5E 7541FF     979            mov y+0, #low (4095 % 0x10000) 
0D61 75420F     979            mov y+1, #high(4095 % 0x10000) 
0D64 754300     979            mov y+2, #low (4095 / 0x10000) 
0D67 754400     979            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0D6A 1203EA     980            lcall div32
0D6D 7541A4     981            mov y+0, #low (27300 % 0x10000) 
0D70 75426A     981            mov y+1, #high(27300 % 0x10000) 
0D73 754300     981            mov y+2, #low (27300 / 0x10000) 
0D76 754400     981            mov y+3, #high(27300 / 0x10000) 
0D79 1202C9     982            lcall sub32
0D7C 754164     983            mov y+0, #low (100 % 0x10000) 
0D7F 754200     983            mov y+1, #high(100 % 0x10000) 
0D82 754300     983            mov y+2, #low (100 / 0x10000) 
0D85 754400     983            mov y+3, #high(100 / 0x10000) 
0D88 12035D     984            lcall mul32
0D8B            985       ;save outside temp to z to later add onto the oven temp
0D8B 853D45     986       mov z+0, x+0
0D8E 853E46     987       mov z+1, x+1
0D91 853F47     988       mov z+2, x+2
0D94 854048     989       mov z+3, x+3 
0D97            990   
0D97 53E8F0     991            anl  ADCCON0, #0xF0  
0D9A 43E804     992       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0D9D            993   
0D9D C2EF       994       clr ADCF
0D9F D2EE       995       setb ADCS
0DA1 30EFFD     996       jnb ADCF, $
0DA4            997   
0DA4 E5C3       998       mov a, ADCRH
0DA6 C4         999       swap a
0DA7 C0E0      1000       push acc
0DA9 540F      1001       anl a, #0x0f
0DAB F9        1002       mov R1, a
0DAC D0E0      1003       pop acc
0DAE 54F0      1004       anl a, #0xf0
0DB0 45C2      1005       orl a, ADCRL
0DB2 F8        1006       mov R0, A
0DB3           1007       
0DB3           1008       ; Convert to voltage
0DB3 883D      1009            mov x+0, R0
0DB5 893E      1010            mov x+1, R1
0DB7 753F00    1011            mov x+2, #0
0DBA 754000    1012            mov x+3, #0
0DBD 75417C    1013            mov y+0, #low (50300 % 0x10000) 
0DC0 7542C4    1013            mov y+1, #high(50300 % 0x10000) 
0DC3 754300    1013            mov y+2, #low (50300 / 0x10000) 
0DC6 754400    1013            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0DC9 12035D    1014            lcall mul32
0DCC 7541FF    1015            mov y+0, #low (4095 % 0x10000) 
0DCF 75420F    1015            mov y+1, #high(4095 % 0x10000) 
0DD2 754300    1015            mov y+2, #low (4095 / 0x10000) 
0DD5 754400    1015            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0DD8 1203EA    1016            lcall div32
0DDB           1017   
0DDB           1018            ;vout of opamp should now be in x
0DDB           1019       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0DDB           1020       ;first calculate vout*R2:
0DDB 7541BD    1021            mov y+0, #low (1469 % 0x10000) 
0DDE 754205    1021            mov y+1, #high(1469 % 0x10000) 
0DE1 754300    1021            mov y+2, #low (1469 / 0x10000) 
0DE4 754400    1021            mov y+3, #high(1469 / 0x10000) 
0DE7 12035D    1022       lcall mul32
0DEA           1023       ;now vout*R2 ohm is in x
0DEA           1024       ;next we will take 461 650V and divide
0DEA 754152    1025            mov y+0, #low (461650 % 0x10000) 
0DED 75420B    1025            mov y+1, #high(461650 % 0x10000) 
0DF0 754307    1025            mov y+2, #low (461650 / 0x10000) 
0DF3 754400    1025            mov y+3, #high(461650 / 0x10000)  
0DF6 1203EA    1026       lcall div32
0DF9           1027       ;multiply by 100k and then divide by 41 to cancel units
0DF9 754140    1028            mov y+0, #low (1000000 % 0x10000) 
0DFC 754242    1028            mov y+1, #high(1000000 % 0x10000) 
0DFF 75430F    1028            mov y+2, #low (1000000 / 0x10000) 
0E02 754400    1028            mov y+3, #high(1000000 / 0x10000) 
0E05 12035D    1029       lcall mul32
0E08 754129    1030            mov y+0, #low (41 % 0x10000) 
0E0B 754200    1030            mov y+1, #high(41 % 0x10000) 
0E0E 754300    1030            mov y+2, #low (41 / 0x10000) 
0E11 754400    1030            mov y+3, #high(41 / 0x10000) 
0E14 1203EA    1031       lcall div32
0E17           1032       ;move the outside temp to y and add
0E17 854541    1033       mov y+0, z+0
0E1A 854642    1034       mov y+1, z+1
0E1D 854743    1035       mov y+2, z+2
0E20 854844    1036       mov y+3, z+3
0E23 1202A8    1037       lcall add32
0E26 1201E3    1038       lcall hex2bcd
0E29           1039   
0E29 C000      1040   push ar0
0E2B A84C      1040   mov r0, bcd+3
0E2D 1201C5    1040   lcall ?Send_BCD
0E30 D000      1040   pop ar0
0E32 C000      1041   push ar0
0E34 A84B      1041   mov r0, bcd+2
0E36 1201C5    1041   lcall ?Send_BCD
0E39 D000      1041   pop ar0
0E3B           1042       put_decimal_1:
0E3B 3099FD    1043       jnb TI, put_decimal_1 ; Wait for transmission to complete
0E3E C299      1044       clr TI
0E40 75992E    1045       mov SBUF, #'.'
0E43 C000      1046   push ar0
0E45 A84A      1046   mov r0, bcd+1
0E47 1201C5    1046   lcall ?Send_BCD
0E4A D000      1046   pop ar0
0E4C C000      1047   push ar0
0E4E A849      1047   mov r0, bcd+0
0E50 1201C5    1047   lcall ?Send_BCD
0E53 D000      1047   pop ar0
0E55           1048       put_r_1:
0E55 3099FD    1049       jnb TI, put_r_1 ; Wait for transmission to complete
0E58 C299      1050       clr TI
0E5A 75990D    1051       mov SBUF, #'\r'
0E5D           1052       put_n_1:
0E5D 3099FD    1053       jnb TI, put_n_1 ; Wait for transmission to complete
0E60 C299      1054       clr TI
0E62 75990A    1055       mov SBUF, #'\n'
0E65           1056   
0E65 22        1057            ret
0E66           1058   
0E66           1059   clearx:
0E66 753D00    1060            mov x+0, #0x00
0E69 753E00    1061            mov x+1, #0x00
0E6C 753F00    1062            mov x+2, #0x00
0E6F 754000    1063            mov x+3, #0x00
0E72 22        1064            ret 
0E73           1065   
0E73           1066   check_temps:
0E73 E536      1067            mov a, current_temp 
0E75 9532      1068            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0E77           1069            ;soak temp is 10 for 100, current temp is 1 for 100 
0E77 4012      1070            jc skipp2 ; skip if current_temp < soak_temp (carry bit set)
0E79 E537      1071            mov a, current_temp_hund
0E7B B53303    1072            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
0E7E 753002    1073            mov STATE, #0x02
0E81           1074   next2:
0E81 22        1075            ret
0E82           1076   
0E82           1077   check_currenttemp:
0E82 E536      1078            mov a, current_temp
0E84 9450      1079            subb a, #0x50
0E86 4003      1080            jc skipp2
0E88 D208      1081            setb temp_flag ; set safety flag if temp >=60
0E8A 22        1082            ret
0E8B           1083            
0E8B           1084   skipp2:
0E8B 22        1085            ret
0E8C           1086            
0E8C           1087   safety_feature:
0E8C E539      1088            mov a, seconds
0E8E B43CFA    1089            cjne a, #0x3C, skipp2 ; skip if current time is not 60
0E91 2008F7    1090            jb temp_flag, skipp2 ; skip if temperature checks passed
0E94 120AF8    1091            lcall display_blank
0E97 753B00    1092            mov pwm, #0
0E9A C0E0      1093            push acc
0E9C 7401      1093            mov a, #1
0E9E 14        1093            dec a
0E9F 12018A    1093            lcall ?Set_Cursor_1 ; Select column and row
0EA2 D0E0      1093            pop acc
0EA4 C083      1094            push dph
0EA6 C082      1094            push dpl
0EA8 C0E0      1094            push acc
0EAA 900075    1094            mov dptr, #safety_message
0EAD 12017D    1094            lcall ?Send_Constant_String
0EB0 D0E0      1094            pop acc
0EB2 D082      1094            pop dpl
0EB4 D083      1094            pop dph
0EB6 C0E0      1095            push acc
0EB8 7401      1095            mov a, #1
0EBA 14        1095            dec a
0EBB 120188    1095            lcall ?Set_Cursor_2 ; Select column and row
0EBE D0E0      1095            pop acc
0EC0 C083      1096            push dph
0EC2 C082      1096            push dpl
0EC4 C0E0      1096            push acc
0EC6 90007D    1096            mov dptr, #safety_message1
0EC9 12017D    1096            lcall ?Send_Constant_String
0ECC D0E0      1096            pop acc
0ECE D082      1096            pop dpl
0ED0 D083      1096            pop dph
0ED2           1097   
0ED2           1098   safety_feature_loop:
0ED2 C0E0      1099            push acc
0ED4 7408      1099            mov a, #8
0ED6 14        1099            dec a
0ED7 12018A    1099            lcall ?Set_Cursor_1 ; Select column and row
0EDA D0E0      1099            pop acc
0EDC C0E0      1100            push acc
0EDE 7421      1100            mov a, #'!'
0EE0 120140    1100            lcall ?WriteData
0EE3 D0E0      1100            pop acc
0EE5 C002      1101            push AR2
0EE7 7AFA      1101            mov R2, #250
0EE9 1200FB    1101            lcall ?Wait_Milli_Seconds
0EEC D002      1101            pop AR2
0EEE C0E0      1102            push acc
0EF0 7408      1102            mov a, #8
0EF2 14        1102            dec a
0EF3 12018A    1102            lcall ?Set_Cursor_1 ; Select column and row
0EF6 D0E0      1102            pop acc
0EF8 C0E0      1103            push acc
0EFA 7420      1103            mov a, #' '
0EFC 120140    1103            lcall ?WriteData
0EFF D0E0      1103            pop acc
0F01 C002      1104            push AR2
0F03 7AFA      1104            mov R2, #250
0F05 1200FB    1104            lcall ?Wait_Milli_Seconds
0F08 D002      1104            pop AR2
0F0A 020ED2    1105            ljmp safety_feature_loop
0F0D           1106   
0F0D           1107   
0F0D           1108   
0F0D           1109   ; checks secs for state 2 -> 3
0F0D           1110   check_secs_s2:
0F0D 853149    1111            mov bcd, soak_time                      ; soak_time stored as bcd
0F10 12026C    1112            lcall bcd2hex
0F13 E53D      1113       mov a, x
0F15 B53903    1114       cjne a, seconds, skip_check_secs_s2
0F18           1115            ;lcall debug_display
0F18 753003    1116       mov state, #3
0F1B           1117   skip_check_secs_s2:
0F1B 22        1118       ret
0F1C           1119   
0F1C           1120   skipp3:
0F1C 22        1121            ret
0F1D           1122   
0F1D           1123   ; checks temp for state 3 -> 4
0F1D           1124   check_temps_s3:
0F1D E536      1125            mov a, current_temp 
0F1F 9535      1126            subb a, Reflow_temp
0F21 40F9      1127            jc skipp3
0F23 E537      1128            mov a, current_temp_hund
0F25 B53C03    1129            cjne a, reflow_temp_100, nxt2
0F28 753004    1130            mov STATe, #0x04
0F2B           1131   nxt2:
0F2B 22        1132            ret
0F2C           1133   
0F2C           1134   ; checks secs for state 4 -> 5
0F2C           1135   check_secs_s4:
0F2C 853449    1136            mov bcd, reflow_time ; reflow_time stored as bcd
0F2F 12026C    1137            lcall bcd2hex
0F32 E53D      1138       mov a, x
0F34 B53903    1139       cjne a, seconds, skip_check_secs_s4
0F37 753005    1140       mov state, #5
0F3A           1141   skip_check_secs_s4:
0F3A 22        1142       ret
0F3B           1143   
0F3B           1144   ; checks temp for state 5 -> 0
0F3B           1145   check_temp_s5:
0F3B 7460      1146       mov a, #0x60
0F3D 9536      1147            subb a, current_temp
0F3F 40DB      1148            jc skipp3
0F41 E537      1149            mov a, current_temp_hund
0F43 B40003    1150            cjne a, #0, nx2
0F46 753000    1151            mov STATE, #0x00
0F49           1152   nx2:
0F49 22        1153            ret
0F4A 22        1154   ret
0F4B           1155   
0F4B           1156   reset_seconds:
0F4B E539      1157            mov a, seconds
0F4D 7400      1158            mov a, #0x00
0F4F F539      1159            mov seconds, a
0F51           1160            ;lcall clearx
0F51           1161            ;mov x, soak_time
0F51           1162            ;lcall bcd2hex
0F51           1163            ;mov soak_time, x
0F51           1164   
0F51           1165            ;mov a, seconds
0F51           1166            ;SUBB a, soak_time
0F51           1167            ;mov seconds, a
0F51 22        1168   ret
0F52           1169   
0F52           1170   check_fahrenheit:
0F52 200903    1171            jb fahrenheit_flag, fahrenheit_display
0F55 020F87    1172            ljmp celsius_display
0F58           1173   
0F58           1174   fahrenheit_display:
0F58 C0E0      1175            push acc
0F5A 740D      1175            mov a, #13
0F5C 14        1175            dec a
0F5D 120188    1175            lcall ?Set_Cursor_2 ; Select column and row
0F60 D0E0      1175            pop acc
0F62 C083      1176            push dph
0F64 C082      1176            push dpl
0F66 C0E0      1176            push acc
0F68 9000EF    1176            mov dptr, #blank_unit
0F6B 12017D    1176            lcall ?Send_Constant_String
0F6E D0E0      1176            pop acc
0F70 D082      1176            pop dpl
0F72 D083      1176            pop dph
0F74 C083      1177            push dph
0F76 C082      1177            push dpl
0F78 C0E0      1177            push acc
0F7A 9000E7    1177            mov dptr, #fahrenheit
0F7D 12017D    1177            lcall ?Send_Constant_String
0F80 D0E0      1177            pop acc
0F82 D082      1177            pop dpl
0F84 D083      1177            pop dph
0F86 22        1178            ret 
0F87           1179   
0F87           1180   celsius_display:
0F87 C0E0      1181            push acc
0F89 740D      1181            mov a, #13
0F8B 14        1181            dec a
0F8C 120188    1181            lcall ?Set_Cursor_2 ; Select column and row
0F8F D0E0      1181            pop acc
0F91 C083      1182            push dph
0F93 C082      1182            push dpl
0F95 C0E0      1182            push acc
0F97 9000EF    1182            mov dptr, #blank_unit
0F9A 12017D    1182            lcall ?Send_Constant_String
0F9D D0E0      1182            pop acc
0F9F D082      1182            pop dpl
0FA1 D083      1182            pop dph
0FA3 C083      1183            push dph
0FA5 C082      1183            push dpl
0FA7 C0E0      1183            push acc
0FA9 9000E5    1183            mov dptr, #celsius
0FAC 12017D    1183            lcall ?Send_Constant_String
0FAF D0E0      1183            pop acc
0FB1 D082      1183            pop dpl
0FB3 D083      1183            pop dph
0FB5 22        1184            ret 
0FB6           1185   
0FB6           1186   main:
0FB6 75817F    1187            mov sp, #0x7f
0FB9           1188   
0FB9 75B100    1189            mov P0M1, #0x00
0FBC 75B200    1190       mov P0M2, #0x00
0FBF 75B300    1191       mov P1M1, #0x00
0FC2 75B400    1192       mov P1M2, #0x00
0FC5 75AD00    1193       mov P3M2, #0x00
0FC8 75AD00    1194       mov P3M2, #0x00
0FCB           1195   
0FCB 120453    1196            lcall Init_All
0FCE 12014A    1197       lcall LCD_4BIT
0FD1 1204DC    1198            lcall Timer2_ISR
0FD4 1204B9    1199            lcall Timer0_Init
0FD7           1200       
0FD7           1201        ; initial messages in LCD
0FD7 753000    1202       mov STATE, #0x00
0FDA 753100    1203       mov Soak_time, #0x00
0FDD 753200    1204       mov Soak_temp, #0x00
0FE0 753300    1205       mov soak_temp_hund, #0x00
0FE3 753400    1206       mov Reflow_time, #0x00
0FE6 753500    1207       mov Reflow_temp, #0x00
0FE9 753600    1208       mov current_temp, #0x00
0FEC 753700    1209       mov current_temp_hund, #0x00
0FEF 753900    1210       mov seconds, #0x00
0FF2 753A00    1211       mov pwm_counter, #0x00
0FF5 753B00    1212       mov pwm, #0x00
0FF8 753C00    1213       mov reflow_temp_100, #0x00
0FFB C205      1214       clr decrement1
0FFD C206      1215       clr s_flag 
0FFF C209      1216       clr fahrenheit_flag
1001 C28C      1217            clr TR0
1003 C20A      1218            clr mute_flag
1005           1219            
1005           1220   Forever:
1005 120AF8    1221            lcall display_blank
1008           1222   
1008           1223   state_0:
1008 C0E0      1224            push acc
100A 7401      1224            mov a, #1
100C 14        1224            dec a
100D 12018A    1224            lcall ?Set_Cursor_1 ; Select column and row
1010 D0E0      1224            pop acc
1012 C083      1225            push dph
1014 C082      1225            push dpl
1016 C0E0      1225            push acc
1018 90002E    1225            mov dptr, #soak_param
101B 12017D    1225            lcall ?Send_Constant_String
101E D0E0      1225            pop acc
1020 D082      1225            pop dpl
1022 D083      1225            pop dph
1024 C0E0      1226            push acc
1026 7401      1226            mov a, #1
1028 14        1226            dec a
1029 120188    1226            lcall ?Set_Cursor_2 ; Select column and row
102C D0E0      1226            pop acc
102E C083      1227            push dph
1030 C082      1227            push dpl
1032 C0E0      1227            push acc
1034 90003D    1227            mov dptr, #reflow_param
1037 12017D    1227            lcall ?Send_Constant_String
103A D0E0      1227            pop acc
103C D082      1227            pop dpl
103E D083      1227            pop dph
1040           1228   
1040           1229   state_0_loop:
1040 E530      1230            mov a, STATE
1042 753B64    1231       mov pwm, #100
1045 B4001C    1232            cjne a, #0, state_1
1048 1204FD    1233            lcall LCD_PB
104B 12055B    1234            lcall check_decrement
104E 120A37    1235            lcall display_menu
1051 1209BF    1236            lcall Check_start
1054 C0E0      1237            push acc
1056 7410      1237            mov a, #16
1058 14        1237            dec a
1059 12018A    1237            lcall ?Set_Cursor_1 ; Select column and row
105C D0E0      1237            pop acc
105E           1237   
105E 1209E7    1238            lcall check_mute
1061 021040    1239            ljmp state_0_loop
1064           1240   
1064           1241   state_1: 
1064 120AF8    1242            lcall display_blank
1067 C0E0      1243            push acc
1069 7410      1243            mov a, #16
106B 14        1243            dec a
106C 120188    1243            lcall ?Set_Cursor_2 ; Select column and row
106F D0E0      1243            pop acc
1071 120A17    1244            lcall display_mute
1074 1209E7    1245            lcall check_mute
1077 753900    1246            mov seconds, #0x00
107A C0E0      1247            push acc
107C 7401      1247            mov a, #1
107E 14        1247            dec a
107F 12018A    1247            lcall ?Set_Cursor_1 ; Select column and row
1082 D0E0      1247            pop acc
1084 C083      1248            push dph
1086 C082      1248            push dpl
1088 C0E0      1248            push acc
108A 90004E    1248            mov dptr, #heating_to_s
108D 12017D    1248            lcall ?Send_Constant_String
1090 D0E0      1248            pop acc
1092 D082      1248            pop dpl
1094 D083      1248            pop dph
1096 C0E0      1249            push acc
1098 7401      1249            mov a, #1
109A 14        1249            dec a
109B 120188    1249            lcall ?Set_Cursor_2 ; Select column and row
109E D0E0      1249            pop acc
10A0 C083      1250            push dph
10A2 C082      1250            push dpl
10A4 C0E0      1250            push acc
10A6 90005E    1250            mov dptr, #heating_temp
10A9 12017D    1250            lcall ?Send_Constant_String
10AC D0E0      1250            pop acc
10AE D082      1250            pop dpl
10B0 D083      1250            pop dph
10B2           1251   
10B2 C0E0      1252            push acc
10B4 7404      1252            mov a, #4
10B6 14        1252            dec a
10B7 12018A    1252            lcall ?Set_Cursor_1 ; Select column and row
10BA D0E0      1252            pop acc
10BC C000      1253            push ar0
10BE A833      1253            mov r0, Soak_temp_hund
10C0 12018F    1253            lcall ?Display_BCD
10C3 D000      1253            pop ar0
10C5 C0E0      1254            push acc
10C7 7405      1254            mov a, #5
10C9 14        1254            dec a
10CA 12018A    1254            lcall ?Set_Cursor_1 ; Select column and row
10CD D0E0      1254            pop acc
10CF C000      1255            push ar0
10D1 A832      1255            mov r0, soak_temp
10D3 12018F    1255            lcall ?Display_BCD
10D6 D000      1255            pop ar0
10D8           1256   
10D8 120E66    1257            lcall clearx
10DB 754900    1258            mov bcd+0, #0x00
10DE 754A00    1259            mov bcd+1, #0x00
10E1 754B00    1260            mov bcd+2, #0x00
10E4 754C00    1261            mov bcd+3, #0x00
10E7 853349    1262            mov bcd, soak_temp_hund
10EA 12026C    1263            lcall bcd2hex
10ED 75410A    1264            mov y+0, #low (10 % 0x10000) 
10F0 754200    1264            mov y+1, #high(10 % 0x10000) 
10F3 754300    1264            mov y+2, #low (10 / 0x10000) 
10F6 754400    1264            mov y+3, #high(10 / 0x10000) 
10F9 1203EA    1265            lcall div32
10FC 1201E3    1266            lcall hex2bcd
10FF 854933    1267            mov soak_temp_hund, bcd
1102 200A16    1268            jb mute_flag, state_1_loop
1105 D28C      1269            setb TR0
1107 C002      1270            push AR2
1109 7AFA      1270            mov R2, #250
110B 1200FB    1270            lcall ?Wait_Milli_Seconds
110E D002      1270            pop AR2
1110 C002      1271            push AR2
1112 7AFA      1271            mov R2, #250
1114 1200FB    1271            lcall ?Wait_Milli_Seconds
1117 D002      1271            pop AR2
1119 C28C      1272       clr TR0
111B           1273            
111B           1274   state_1_loop:
111B E530      1275            mov a, STATE
111D B40134    1276            cjne a, #1, state_2
1120 120AAA    1277            lcall display_heating_s
1123 753B00    1278            mov pwm, #0
1126 1209D5    1279            lcall check_convert
1129 120B71    1280            lcall outside_tmp
112C 120BEC    1281            lcall oven_tmp
112F 120E82    1282            lcall check_currenttemp
1132 120E8C    1283            lcall safety_feature
1135 120E73    1284            lcall check_temps
1138 120F52    1285            lcall check_fahrenheit
113B C0E0      1286            push acc
113D 7410      1286            mov a, #16
113F 14        1286            dec a
1140 120188    1286            lcall ?Set_Cursor_2 ; Select column and row
1143 D0E0      1286            pop acc
1145 1209E7    1287            lcall check_mute
1148 C002      1288            push AR2
114A 7AFA      1288            mov R2, #250
114C 1200FB    1288            lcall ?Wait_Milli_Seconds
114F D002      1288            pop AR2
1151 02111B    1289            ljmp state_1_loop
1154           1290   
1154           1291   state_2:
1154 120AF8    1292            lcall display_blank
1157 C0E0      1293            push acc
1159 7410      1293            mov a, #16
115B 14        1293            dec a
115C 120188    1293            lcall ?Set_Cursor_2 ; Select column and row
115F D0E0      1293            pop acc
1161 120A17    1294            lcall display_mute
1164 1209E7    1295            lcall check_mute
1167 753900    1296            mov seconds, #0
116A C0E0      1297            push acc
116C 7401      1297            mov a, #1
116E 14        1297            dec a
116F 12018A    1297            lcall ?Set_Cursor_1 ; Select column and row
1172 D0E0      1297            pop acc
1174 C083      1298            push dph
1176 C082      1298            push dpl
1178 C0E0      1298            push acc
117A 90008C    1298            mov dptr, #soaking
117D 12017D    1298            lcall ?Send_Constant_String
1180 D0E0      1298            pop acc
1182 D082      1298            pop dpl
1184 D083      1298            pop dph
1186 C0E0      1299            push acc
1188 7401      1299            mov a, #1
118A 14        1299            dec a
118B 120188    1299            lcall ?Set_Cursor_2 ; Select column and row
118E D0E0      1299            pop acc
1190 C083      1300            push dph
1192 C082      1300            push dpl
1194 C0E0      1300            push acc
1196 9000A7    1300            mov dptr, #time
1199 12017D    1300            lcall ?Send_Constant_String
119C D0E0      1300            pop acc
119E D082      1300            pop dpl
11A0 D083      1300            pop dph
11A2 C0E0      1301            push acc
11A4 740E      1301            mov a, #14
11A6 14        1301            dec a
11A7 12018A    1301            lcall ?Set_Cursor_1 ; Select column and row
11AA D0E0      1301            pop acc
11AC C000      1302            push ar0
11AE A831      1302            mov r0, soak_time
11B0 12018F    1302            lcall ?Display_BCD
11B3 D000      1302            pop ar0
11B5 200A16    1303            jb mute_flag, state_2_loop
11B8 D28C      1304            setb TR0
11BA C002      1305            push AR2
11BC 7AFA      1305            mov R2, #250
11BE 1200FB    1305            lcall ?Wait_Milli_Seconds
11C1 D002      1305            pop AR2
11C3 C002      1306            push AR2
11C5 7AFA      1306            mov R2, #250
11C7 1200FB    1306            lcall ?Wait_Milli_Seconds
11CA D002      1306            pop AR2
11CC C28C      1307       clr TR0
11CE           1308   
11CE           1309   
11CE           1310   state_2_loop: 
11CE E530      1311            mov a, STATE
11D0 B40241    1312       cjne a, #2, state_3
11D3 C0E0      1313            push acc
11D5 7406      1313            mov a, #6
11D7 14        1313            dec a
11D8 120188    1313            lcall ?Set_Cursor_2 ; Select column and row
11DB D0E0      1313            pop acc
11DD 120E66    1314            lcall clearx
11E0 85393D    1315            mov x, seconds 
11E3 1201E3    1316            lcall hex2bcd 
11E6 C000      1317            push ar0
11E8 A849      1317            mov r0, bcd
11EA 12018F    1317            lcall ?Display_BCD
11ED D000      1317            pop ar0
11EF 120E66    1318            lcall clearx
11F2 753B50    1319            mov pwm, #80
11F5 120F0D    1320            lcall check_secs_s2
11F8 120D29    1321            lcall stage_temp
11FB C0E0      1322            push acc
11FD 7410      1322            mov a, #16
11FF 14        1322            dec a
1200 120188    1322            lcall ?Set_Cursor_2 ; Select column and row
1203 D0E0      1322            pop acc
1205 1209E7    1323            lcall check_mute
1208 C002      1324            push AR2
120A 7AFA      1324            mov R2, #250
120C 1200FB    1324            lcall ?Wait_Milli_Seconds
120F D002      1324            pop AR2
1211 0211CE    1325            ljmp state_2_loop
1214           1326   
1214           1327   state_3:
1214 753900    1328            mov seconds, #0
1217 120F4B    1329            lcall reset_seconds
121A 120AF8    1330            lcall display_blank
121D C0E0      1331            push acc
121F 7401      1331            mov a, #1
1221 14        1331            dec a
1222 12018A    1331            lcall ?Set_Cursor_1 ; Select column and row
1225 D0E0      1331            pop acc
1227 C083      1332            push dph
1229 C082      1332            push dpl
122B C0E0      1332            push acc
122D 9000B0    1332            mov dptr, #heating_to_r
1230 12017D    1332            lcall ?Send_Constant_String
1233 D0E0      1332            pop acc
1235 D082      1332            pop dpl
1237 D083      1332            pop dph
1239 C0E0      1333            push acc
123B 7401      1333            mov a, #1
123D 14        1333            dec a
123E 120188    1333            lcall ?Set_Cursor_2 ; Select column and row
1241 D0E0      1333            pop acc
1243 C083      1334            push dph
1245 C082      1334            push dpl
1247 C0E0      1334            push acc
1249 90005E    1334            mov dptr, #heating_temp
124C 12017D    1334            lcall ?Send_Constant_String
124F D0E0      1334            pop acc
1251 D082      1334            pop dpl
1253 D083      1334            pop dph
1255 C0E0      1335            push acc
1257 7410      1335            mov a, #16
1259 14        1335            dec a
125A 120188    1335            lcall ?Set_Cursor_2 ; Select column and row
125D D0E0      1335            pop acc
125F           1335   
125F 120A17    1336            lcall display_mute
1262 1209E7    1337            lcall check_mute
1265           1338            
1265 C0E0      1339            push acc
1267 7404      1339            mov a, #4
1269 14        1339            dec a
126A 12018A    1339            lcall ?Set_Cursor_1 ; Select column and row
126D D0E0      1339            pop acc
126F           1339   
126F C000      1340            push ar0
1271 A83C      1340            mov r0, reflow_temp_100
1273 12018F    1340            lcall ?Display_BCD
1276 D000      1340            pop ar0
1278 C0E0      1341            push acc
127A 7405      1341            mov a, #5
127C 14        1341            dec a
127D 12018A    1341            lcall ?Set_Cursor_1 ; Select column and row
1280 D0E0      1341            pop acc
1282 C000      1342            push ar0
1284 A835      1342            mov r0, reflow_temp
1286 12018F    1342            lcall ?Display_BCD
1289 D000      1342            pop ar0
128B           1343   
128B 120E66    1344            lcall clearx
128E 754900    1345            mov bcd+0, #0x00
1291 754A00    1346            mov bcd+1, #0x00
1294 754B00    1347            mov bcd+2, #0x00
1297 754C00    1348            mov bcd+3, #0x00
129A 853C49    1349            mov bcd, reflow_temp_100
129D 12026C    1350            lcall bcd2hex
12A0 75410A    1351            mov y+0, #low (10 % 0x10000) 
12A3 754200    1351            mov y+1, #high(10 % 0x10000) 
12A6 754300    1351            mov y+2, #low (10 / 0x10000) 
12A9 754400    1351            mov y+3, #high(10 / 0x10000) 
12AC 1203EA    1352            lcall div32
12AF 1201E3    1353            lcall hex2bcd
12B2 85493C    1354            mov reflow_temp_100, bcd
12B5 200A16    1355            jb mute_flag, state_3_loop
12B8 D28C      1356            setb TR0
12BA C002      1357            push AR2
12BC 7AFA      1357            mov R2, #250
12BE 1200FB    1357            lcall ?Wait_Milli_Seconds
12C1 D002      1357            pop AR2
12C3 C002      1358            push AR2
12C5 7AFA      1358            mov R2, #250
12C7 1200FB    1358            lcall ?Wait_Milli_Seconds
12CA D002      1358            pop AR2
12CC C28C      1359       clr TR0
12CE           1360   
12CE           1361   state_3_loop:
12CE E530      1362            mov a, STATE
12D0 B4032E    1363            cjne a, #3, state_4
12D3 120AD1    1364            lcall display_heating_r
12D6 753B00    1365            mov pwm, #0
12D9 1209D5    1366            lcall check_convert
12DC 120B71    1367            lcall outside_tmp
12DF 120BEC    1368            lcall oven_tmp
12E2 120F1D    1369            lcall check_temps_s3
12E5 120F52    1370            lcall check_fahrenheit
12E8 C0E0      1371            push acc
12EA 7410      1371            mov a, #16
12EC 14        1371            dec a
12ED 120188    1371            lcall ?Set_Cursor_2 ; Select column and row
12F0 D0E0      1371            pop acc
12F2 1209E7    1372            lcall check_mute
12F5 C002      1373            push AR2
12F7 7AFA      1373            mov R2, #250
12F9 1200FB    1373            lcall ?Wait_Milli_Seconds
12FC D002      1373            pop AR2
12FE 0212CE    1374            ljmp state_3_loop
1301           1375   
1301           1376   state_4:
1301 120AF8    1377            lcall display_blank
1304 753900    1378            mov seconds, #0
1307 C0E0      1379            push acc
1309 7401      1379            mov a, #1
130B 14        1379            dec a
130C 12018A    1379            lcall ?Set_Cursor_1 ; Select column and row
130F D0E0      1379            pop acc
1311 C083      1380            push dph
1313 C082      1380            push dpl
1315 C0E0      1380            push acc
1317 90009A    1380            mov dptr, #reflow
131A 12017D    1380            lcall ?Send_Constant_String
131D D0E0      1380            pop acc
131F D082      1380            pop dpl
1321 D083      1380            pop dph
1323 C0E0      1381            push acc
1325 7401      1381            mov a, #1
1327 14        1381            dec a
1328 120188    1381            lcall ?Set_Cursor_2 ; Select column and row
132B D0E0      1381            pop acc
132D C083      1382            push dph
132F C082      1382            push dpl
1331 C0E0      1382            push acc
1333 9000A7    1382            mov dptr, #time
1336 12017D    1382            lcall ?Send_Constant_String
1339 D0E0      1382            pop acc
133B D082      1382            pop dpl
133D D083      1382            pop dph
133F C0E0      1383            push acc
1341 740E      1383            mov a, #14
1343 14        1383            dec a
1344 12018A    1383            lcall ?Set_Cursor_1 ; Select column and row
1347 D0E0      1383            pop acc
1349 C000      1384            push ar0
134B A834      1384            mov r0, reflow_time
134D 12018F    1384            lcall ?Display_BCD
1350 D000      1384            pop ar0
1352 C0E0      1385            push acc
1354 7410      1385            mov a, #16
1356 14        1385            dec a
1357 120188    1385            lcall ?Set_Cursor_2 ; Select column and row
135A D0E0      1385            pop acc
135C 120A17    1386            lcall display_mute
135F 1209E7    1387            lcall check_mute
1362 200A16    1388            jb mute_flag, state_4_loop
1365 D28C      1389            setb TR0
1367 C002      1390            push AR2
1369 7AFA      1390            mov R2, #250
136B 1200FB    1390            lcall ?Wait_Milli_Seconds
136E D002      1390            pop AR2
1370 C002      1391            push AR2
1372 7AFA      1391            mov R2, #250
1374 1200FB    1391            lcall ?Wait_Milli_Seconds
1377 D002      1391            pop AR2
1379 C28C      1392       clr TR0
137B           1393   
137B           1394   state_4_loop:
137B E530      1395       mov a, STATE
137D B40441    1396       cjne a, #4, state_5
1380 C0E0      1397            push acc
1382 7406      1397            mov a, #6
1384 14        1397            dec a
1385 120188    1397            lcall ?Set_Cursor_2 ; Select column and row
1388 D0E0      1397            pop acc
138A 120E66    1398       lcall clearx
138D 85393D    1399       mov x, seconds
1390 1201E3    1400       lcall hex2bcd
1393 C000      1401            push ar0
1395 A849      1401            mov r0, bcd
1397 12018F    1401            lcall ?Display_BCD
139A D000      1401            pop ar0
139C 120E66    1402       lcall clearx
139F 753B50    1403       mov pwm, #80
13A2 120F2C    1404       lcall check_secs_s4
13A5 120D29    1405            lcall stage_temp
13A8 C0E0      1406            push acc
13AA 7410      1406            mov a, #16
13AC 14        1406            dec a
13AD 120188    1406            lcall ?Set_Cursor_2 ; Select column and row
13B0 D0E0      1406            pop acc
13B2 1209E7    1407            lcall check_mute
13B5 C002      1408            push AR2
13B7 7AFA      1408            mov R2, #250
13B9 1200FB    1408            lcall ?Wait_Milli_Seconds
13BC D002      1408            pop AR2
13BE 02137B    1409       ljmp state_4_loop
13C1           1410   
13C1           1411   state_5:
13C1 120AF8    1412       lcall display_blank
13C4 C0E0      1413            push acc
13C6 7401      1413            mov a, #1
13C8 14        1413            dec a
13C9 12018A    1413            lcall ?Set_Cursor_1 ; Select column and row
13CC D0E0      1413            pop acc
13CE C083      1414            push dph
13D0 C082      1414            push dpl
13D2 C0E0      1414            push acc
13D4 9000C0    1414            mov dptr, #cooling
13D7 12017D    1414            lcall ?Send_Constant_String
13DA D0E0      1414            pop acc
13DC D082      1414            pop dpl
13DE D083      1414            pop dph
13E0 C0E0      1415            push acc
13E2 7401      1415            mov a, #1
13E4 14        1415            dec a
13E5 120188    1415            lcall ?Set_Cursor_2 ; Select column and row
13E8 D0E0      1415            pop acc
13EA C083      1416            push dph
13EC C082      1416            push dpl
13EE C0E0      1416            push acc
13F0 90005E    1416            mov dptr, #heating_temp
13F3 12017D    1416            lcall ?Send_Constant_String
13F6 D0E0      1416            pop acc
13F8 D082      1416            pop dpl
13FA D083      1416            pop dph
13FC C0E0      1417            push acc
13FE 7410      1417            mov a, #16
1400 14        1417            dec a
1401 120188    1417            lcall ?Set_Cursor_2 ; Select column and row
1404 D0E0      1417            pop acc
1406           1417   
1406 120A17    1418            lcall display_mute
1409 1209E7    1419            lcall check_mute
140C 200A16    1420            jb mute_flag, state_5_loop
140F D28C      1421            setb TR0
1411 C002      1422            push AR2
1413 7AFA      1422            mov R2, #250
1415 1200FB    1422            lcall ?Wait_Milli_Seconds
1418 D002      1422            pop AR2
141A C002      1423            push AR2
141C 7AFA      1423            mov R2, #250
141E 1200FB    1423            lcall ?Wait_Milli_Seconds
1421 D002      1423            pop AR2
1423 C28C      1424       clr TR0
1425           1425       
1425           1426   state_5_loop:
1425 E530      1427            mov a, STATE
1427 B4053E    1428            cjne a, #5, state_6
142A 753B64    1429            mov pwm, #100
142D C0E0      1430            push acc
142F 7407      1430            mov a, #7
1431 14        1430            dec a
1432 120188    1430            lcall ?Set_Cursor_2 ; Select column and row
1435 D0E0      1430            pop acc
1437           1430   
1437 C000      1431            push ar0
1439 A836      1431            mov r0, current_temp
143B 12018F    1431            lcall ?Display_BCD
143E D000      1431            pop ar0
1440 1209D5    1432            lcall check_convert
1443 120B71    1433            lcall outside_tmp
1446 120BEC    1434            lcall oven_tmp
1449 120F3B    1435            lcall check_temp_s5
144C 120F52    1436            lcall check_fahrenheit
144F C0E0      1437            push acc
1451 7410      1437            mov a, #16
1453 14        1437            dec a
1454 120188    1437            lcall ?Set_Cursor_2 ; Select column and row
1457 D0E0      1437            pop acc
1459 1209E7    1438            lcall check_mute
145C C002      1439            push AR2
145E 7AFA      1439            mov R2, #250
1460 1200FB    1439            lcall ?Wait_Milli_Seconds
1463 D002      1439            pop AR2
1465 021425    1440            ljmp state_5_loop
1468           1441   
1468           1442   state_6:
1468 120AF8    1443            lcall display_blank
146B C0E0      1444            push acc
146D 7401      1444            mov a, #1
146F 14        1444            dec a
1470 12018A    1444            lcall ?Set_Cursor_1 ; Select column and row
1473 D0E0      1444            pop acc
1475 C083      1445            push dph
1477 C082      1445            push dpl
1479 C0E0      1445            push acc
147B 9000D0    1445            mov dptr, #done
147E 12017D    1445            lcall ?Send_Constant_String
1481 D0E0      1445            pop acc
1483 D082      1445            pop dpl
1485 D083      1445            pop dph
1487 C0E0      1446            push acc
1489 7401      1446            mov a, #1
148B 14        1446            dec a
148C 120188    1446            lcall ?Set_Cursor_2 ; Select column and row
148F D0E0      1446            pop acc
1491 C083      1447            push dph
1493 C082      1447            push dpl
1495 C0E0      1447            push acc
1497 9000D5    1447            mov dptr, #ready
149A 12017D    1447            lcall ?Send_Constant_String
149D D0E0      1447            pop acc
149F D082      1447            pop dpl
14A1 D083      1447            pop dph
14A3 C0E0      1448            push acc
14A5 7410      1448            mov a, #16
14A7 14        1448            dec a
14A8 120188    1448            lcall ?Set_Cursor_2 ; Select column and row
14AB D0E0      1448            pop acc
14AD 120A17    1449            lcall display_mute
14B0 1209E7    1450            lcall check_mute
14B3 200A66    1451            jb mute_flag, state_6_loop
14B6 B28C      1452            cpl TR0
14B8 C002      1453            push AR2
14BA 7AFA      1453            mov R2, #250
14BC 1200FB    1453            lcall ?Wait_Milli_Seconds
14BF D002      1453            pop AR2
14C1 C002      1454            push AR2
14C3 7AFA      1454            mov R2, #250
14C5 1200FB    1454            lcall ?Wait_Milli_Seconds
14C8 D002      1454            pop AR2
14CA B28C      1455       cpl TR0
14CC C002      1456            push AR2
14CE 7AFA      1456            mov R2, #250
14D0 1200FB    1456            lcall ?Wait_Milli_Seconds
14D3 D002      1456            pop AR2
14D5 C002      1457            push AR2
14D7 7AFA      1457            mov R2, #250
14D9 1200FB    1457            lcall ?Wait_Milli_Seconds
14DC D002      1457            pop AR2
14DE B28C      1458       cpl TR0
14E0 C002      1459            push AR2
14E2 7AFA      1459            mov R2, #250
14E4 1200FB    1459            lcall ?Wait_Milli_Seconds
14E7 D002      1459            pop AR2
14E9 C002      1460            push AR2
14EB 7AFA      1460            mov R2, #250
14ED 1200FB    1460            lcall ?Wait_Milli_Seconds
14F0 D002      1460            pop AR2
14F2 B28C      1461       cpl TR0
14F4 C002      1462            push AR2
14F6 7AFA      1462            mov R2, #250
14F8 1200FB    1462            lcall ?Wait_Milli_Seconds
14FB D002      1462            pop AR2
14FD C002      1463            push AR2
14FF 7AFA      1463            mov R2, #250
1501 1200FB    1463            lcall ?Wait_Milli_Seconds
1504 D002      1463            pop AR2
1506 B28C      1464       cpl TR0
1508 C002      1465            push AR2
150A 7AFA      1465            mov R2, #250
150C 1200FB    1465            lcall ?Wait_Milli_Seconds
150F D002      1465            pop AR2
1511 C002      1466            push AR2
1513 7AFA      1466            mov R2, #250
1515 1200FB    1466            lcall ?Wait_Milli_Seconds
1518 D002      1466            pop AR2
151A B28C      1467       cpl TR0
151C           1468   state_6_loop:
151C 02151C    1469            ljmp state_6_loop
151F           1470   
151F           1471   
151F           1472   END
