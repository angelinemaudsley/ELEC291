0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             24   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             25   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             26   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             27   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             28   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             29   
0000             30   ORG 0x0000
0000 020F96      31            ljmp main
0003             32   ; Timer/Counter 0 overflow interrupt vector
000B             33   org 0x000B
000B 0204CE      34            ljmp Timer0_ISR
0023             35   org 0x0023
0023 32          36            reti
0024             37            ; Timer/Counter 2 overflow interrupt vector
002B             38   org 0x002B
002B 0204DB      39            ljmp Timer2_ISR
002E             40   
002E             41   START_BUTTON  equ P1.7
002E             42   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             43   CONVERT equ P1.6
002E             44   SOUND_OUT equ P1.2
002E             45   MUTE_BUTTON equ P3.0
002E             46   
002E             47   
002E             48   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    49   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    50   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A20    51   heating_to_s:  db   'Ts:   C To:   C', 0
     20204320
     546F3A20
     20204300
005E 54656D70    52   heating_temp:db    'Temp:', 0
     3A00
0064 20202020    53   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0075 4552524F    54   safety_message:db  'ERROR: ', 0
     523A2000
007D 43616E74    55   safety_message1:db  'Cant Read Temp',0
     20526561
     64205465
     6D7000
008C 536F616B    56   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    57   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    58   time:db            'Time:xxs',0
     3A787873
     00
00B0 54723A20    59   heating_to_r:db    'Tr:   C To:   C', 0
     20204320
     546F3A20
     20204300
00C0 436F6F6C    60   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0 446F6E65    61   done:db            'Done',0
     00
00D5 52656164    62   ready:db           'Ready to touch',0
     7920746F
     20746F75
     636800
00E4 4300        63   celsius:db         'C',0
00E6 4600        64   fahrenheit:db      'F',0
00E8 4C00        65   low_1:db             'L',0
00EA 4800        66   high_1:db            'H',0
00EC 4700        67   good:db            'G',0
00EE 2000        68   blank_unit:db      ' ',0
00F0             69   
00F0             70   cseg
00F0             71   ; These 'equ' must match the hardware wiring
00F0             72   LCD_RS equ P1.3
00F0             73   LCD_E  equ P1.4
00F0             74   LCD_D4 equ P0.0
00F0             75   LCD_D5 equ P0.1
00F0             76   LCD_D6 equ P0.2
00F0             77   LCD_D7 equ P0.3
00F0             78   ;ADC_pn equ P1.1
00F0             79   
00F0             80   
                 82   	$LIST
01E2             84   
0030             85   DSEG at 30h
0030             86   STATE: ds 1
0031             87   Soak_time: ds 1
0032             88   Soak_temp: ds 1
0033             89   soak_temp_hund: ds 1
0034             90   Reflow_time: ds 1
0035             91   Reflow_temp: ds 1
0036             92   current_temp: ds 1
0037             93   current_temp_hund: ds 1
0038             94   outside_temp: ds 1
0039             95   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             96   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             97   pwm: ds 1 ; pwm percentage
003C             98   reflow_temp_100:ds 1
003D             99   x: ds 4
0041            100   y: ds 4
0045            101   z: ds 4
0049            102   bcd: ds 5
004E            103   
004E            104   
0000            105   BSEG
0000            106   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000            107   PB0: dbit 1
0001            108   PB1: dbit 1
0002            109   PB2: dbit 1
0003            110   PB3: dbit 1
0004            111   PB4: dbit 1
0005            112   decrement1: dbit 1
0006            113   s_flag: dbit 1 ; set to 1 every time a second has passed
0007            114   mf: dbit 1
0008            115   temp_flag: dbit 1
0009            116   fahrenheit_flag: dbit 1
000A            117   mute_flag: dbit 1
000B            118   
                546   $LIST
                120   $LIST
0452            122   
0452            123   CSEG
0452            124   
0452            125   Init_All:
0452            126            ; Configure all the pins for biderectional I/O
0452 75AC00     127            mov     P3M1, #0x00
0455 75AD00     128            mov     P3M2, #0x00
0458 75B300     129            mov     P1M1, #0x00
045B 75B400     130            mov     P1M2, #0x00
045E 75B100     131            mov     P0M1, #0x00
0461 75B200     132            mov     P0M2, #0x00
0464            133            
0464 438E10     134            orl     CKCON, #0x10 ; CLK is the input for timer 1
0467 438780     135            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
046A 759852     136            mov     SCON, #0x52
046D 53C4DF     137            anl     T3CON, #0b11011111
0470 53890F     138            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0473 438920     139            orl     TMOD, #0x20 ; Timer 1 Mode 2
0476 758DF7     140            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0479 D28E       141            setb TR1
047B            142            
047B            143            ; Using timer 0 for delay functions.  Initialize here:
047B C28C       144            clr     TR0 ; Stop timer 0
047D 438E08     145            orl     CKCON,#0x08 ; CLK is the input for timer 0
0480 5389F0     146            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0483 438901     147            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0486            148   
0486            149            ; Initialize timer 2 for periodic interrupts
0486 75C800     150            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
0489 75CDD7     151            mov TH2, #high(TIMER2_RELOAD)
048C 75CC79     152            mov TL2, #low(TIMER2_RELOAD)
048F            153            ; Set the reload value
048F 75C9A0     154            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0492 75CBD7     155            mov RCMP2H, #high(TIMER2_RELOAD)
0495 75CA79     156            mov RCMP2L, #low(TIMER2_RELOAD)
0498            157            ; Init the free running 10 ms counter to zero
0498 753A00     158            mov pwm_counter, #0
049B            159            ; Enable the timer and interrupts
049B 439B80     160            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
049E D2CA       161            setb TR2 ; Enable timer 2
04A0 D2AF       162            setb EA ; Enable global interrupts
04A2            163   
04A2            164            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
04A2 43B302     165            orl     P1M1, #0b00000010
04A5 53B4FD     166            anl     P1M2, #0b11111101
04A8            167            
04A8            168       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
04A8 43B110     169       orl  P0M1, #0b00010000
04AB 53B2EF     170            anl     P0M2, #0b11101111
04AE            171            
04AE            172   
04AE            173            ; Initialize and start the ADC-LM335:
04AE            174            ;do these two when you are going to read from pin 14
04AE            175       ;anl ADCCON0, #0xF0
04AE            176            ;orl ADCCON0, #0x07 ; Select channel 7
04AE            177            
04AE            178       ; AINDIDS select if some pins are analog inputs or digital I/O:
04AE 75F600     179            mov AINDIDS, #0x00 ; Disable all analog inputs
04B1 43F690     180            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
04B4 43E101     181            orl ADCCON1, #0x01 ; Enable ADC
04B7            182   
04B7            183   
04B7 22         184   ret
04B8            185            
04B8            186   Timer0_Init:
04B8 438E08     187            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04BB E589       188            mov a, TMOD
04BD 54F0       189            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04BF 4401       190            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04C1 F589       191            mov TMOD, a
04C3 758CF0     192            mov TH0, #high(TIMER0_RELOAD)
04C6 758A2C     193            mov TL0, #low(TIMER0_RELOAD)
04C9            194            ; Enable the timer and interrupts
04C9 D2A9       195       setb ET0  ; Enable timer 0 interrupt
04CB D28C       196       setb TR0  ; Start timer 0
04CD 22         197            ret
04CE            198   
04CE            199   ;---------------------------------;
04CE            200   ; ISR for timer 0.  Set to execute;
04CE            201   ; every 1/4096Hz to generate a    ;
04CE            202   ; 2048 Hz wave at pin SOUND_OUT   ;
04CE            203   ;---------------------------------;
04CE            204   Timer0_ISR:
04CE            205            ;clr TF0  ; According to the data sheet this is done for us already.
04CE            206            ; Timer 0 doesn't have 16-bit auto-reload, so
04CE C28C       207            clr TR0
04D0 758CF0     208            mov TH0, #high(TIMER0_RELOAD)
04D3 758A2C     209            mov TL0, #low(TIMER0_RELOAD)
04D6 D28C       210            setb TR0
04D8 B292       211            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04DA 32         212            reti
04DB            213   
04DB            214   Timer2_ISR:
04DB C2CF       215            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04DD C0D0       216            push psw
04DF C0E0       217            push acc
04E1            218   
04E1 053A       219            inc pwm_counter
04E3 C3         220            clr c
04E4 E53B       221            mov a, pwm
04E6 953A       222            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04E8 B3         223            cpl c
04E9 9290       224            mov PWM_OUT, c
04EB            225   
04EB E53A       226            mov a, pwm_counter
04ED B46407     227            cjne a, #100, Timer2_ISR_done
04F0 753A00     228            mov pwm_counter, #0
04F3 0539       229            inc seconds ; It is super easy to keep a seconds count here
04F5 D206       230            setb s_flag
04F7            231   
04F7            232   Timer2_ISR_done:
04F7 D0E0       233            pop acc
04F9 D0D0       234            pop psw
04FB 32         235            reti
04FC            236   
04FC            237   LCD_PB:
04FC            238            ; Set variables to 1: 'no push button pressed'
04FC D200       239            setb PB0
04FE D201       240            setb PB1
0500 D202       241            setb PB2
0502 D203       242            setb PB3
0504 D204       243            setb PB4
0506            244            ; The input pin used to check set to '1'
0506 D295       245            setb P1.5
0508            246            
0508            247            ; Check if any push button is pressed
0508 C280       248            clr P0.0
050A C281       249            clr P0.1
050C C282       250            clr P0.2
050E C283       251            clr P0.3
0510 C293       252            clr P1.3
0512 209544     253            jb P1.5, LCD_PB_Done
0515            254   
0515            255            ; Debounce
0515 209541     256            jb P1.5, LCD_PB_Done
0518 C002       257            push AR2
051A 7A32       257            mov R2, #50
051C 1200FA     257            lcall ?Wait_Milli_Seconds
051F D002       257            pop AR2
0521 209535     258            jb P1.5, LCD_PB_Done
0524 2095FD     259            jb P1.5, $
0527            260   
0527            261            ; Set the LCD data pins to logic 1
0527 D280       262            setb P0.0
0529 D281       263            setb P0.1
052B D282       264            setb P0.2
052D D283       265            setb P0.3
052F D293       266            setb P1.3
0531            267            
0531            268            ; Check the push buttons one by one
0531 C293       269            clr P1.3
0533 A295       270            mov c, P1.5
0535 9204       271            mov PB4, c
0537 D293       272            setb P1.3
0539            273   
0539 C280       274            clr P0.0
053B A295       275            mov c, P1.5
053D 9203       276            mov PB3, c
053F D280       277            setb P0.0
0541            278            
0541 C281       279            clr P0.1
0543 A295       280            mov c, P1.5
0545 9202       281            mov PB2, c
0547 D281       282            setb P0.1
0549            283            
0549 C282       284            clr P0.2
054B A295       285            mov c, P1.5
054D 9201       286            mov PB1, c
054F D282       287            setb P0.2
0551            288            
0551 C283       289            clr P0.3
0553 A295       290            mov c, P1.5
0555 9200       291            mov PB0, c
0557 D283       292            setb P0.3
0559            293   
0559            294   LCD_PB_Done:             
0559 22         295            ret
055A            296   
055A            297   check_decrement: 
055A 200030     298            jb PB0, check_stime
055D            299   
055D 200518     300            jb decrement1, decrement_set
0560 D205       301            setb decrement1
0562 C0E0       302            push acc
0564 740F       302            mov a, #15
0566 14         302            dec a
0567 120189     302            lcall ?Set_Cursor_1 ; Select column and row
056A D0E0       302            pop acc
056C C0E0       303            push acc
056E 7464       303            mov a, #'d'
0570 12013F     303            lcall ?WriteData
0573 D0E0       303            pop acc
0575            304            ;jb PB0, $
0575            305   
0575 02058D     306            jmp check_stime
0578            307   decrement_set:
0578 C205       308            clr decrement1
057A C0E0       309            push acc
057C 740F       309            mov a, #15
057E 14         309            dec a
057F 120189     309            lcall ?Set_Cursor_1 ; Select column and row
0582 D0E0       309            pop acc
0584 C0E0       310            push acc
0586 7420       310            mov a, #' '
0588 12013F     310            lcall ?WriteData
058B D0E0       310            pop acc
058D            311            ;jb PB0, $
058D            312   
058D            313   check_stime:
058D 20042B     314            jb PB4, check_stemp_intr
0590 200514     315            jb decrement1, Soak_time_decrement
0593 E531       316            mov a, Soak_time
0595 2401       317            add a, #0x01
0597 D4         318            da a
0598 F531       319            mov Soak_time, a
059A 9460       320            subb a, #0x60
059C 4020       321            jc display_up_stime ;if soak_time < 60
059E E531       322            mov a, Soak_time
05A0 9490       323            subb a, #0x90
05A2 4059       324            jc display_check_stime
05A4 02063C     325            ljmp display_down_stime 
05A7            326   
05A7            327   Soak_time_decrement: 
05A7 E531       328            mov a, Soak_time
05A9 2499       329            add a, #0x99
05AB D4         330            da a
05AC F531       331            mov Soak_time, a
05AE 9460       332            subb a, #0x60
05B0 400C       333            jc display_up_stime ; skip if soak_time < 60
05B2 E531       334            mov a, Soak_time
05B4 9490       335            subb a, #0x90
05B6 4045       336            jc display_check_stime
05B8 02063C     337            ljmp display_down_stime
05BB            338   
05BB            339   check_stemp_intr:
05BB 02067B     340            ljmp check_stemp
05BE            341            
05BE            342   display_up_stime:
05BE 7440       343            mov a, #0x40
05C0 120144     343            lcall ?WriteCommand
05C3 7400       344            mov a, #00000B
05C5 12013F     344            lcall ?WriteData
05C8 7404       345            mov a, #00100B
05CA 12013F     345            lcall ?WriteData
05CD 740E       346            mov a, #01110B
05CF 12013F     346            lcall ?WriteData
05D2 741F       347            mov a, #11111B
05D4 12013F     347            lcall ?WriteData
05D7 7404       348            mov a, #00100B
05D9 12013F     348            lcall ?WriteData
05DC 7404       349            mov a, #00100B
05DE 12013F     349            lcall ?WriteData
05E1 7404       350            mov a, #00100B
05E3 12013F     350            lcall ?WriteData
05E6 7404       351            mov a, #00100B
05E8 12013F     351            lcall ?WriteData
05EB C0E0       352            push acc
05ED 7406       352            mov a, #6
05EF 14         352            dec a
05F0 120189     352            lcall ?Set_Cursor_1 ; Select column and row
05F3 D0E0       352            pop acc
05F5 7400       353            mov a, #0
05F7 12013F     353            lcall ?WriteData
05FA 02067B     354            ljmp check_stemp
05FD            355   
05FD            356   display_check_stime:
05FD 7460       357            mov a, #0x60
05FF 120144     357            lcall ?WriteCommand
0602 7400       358            mov a, #00000B
0604 12013F     358            lcall ?WriteData
0607 7400       359            mov a, #00000B
0609 12013F     359            lcall ?WriteData
060C 7401       360            mov a, #00001B
060E 12013F     360            lcall ?WriteData
0611 7401       361            mov a, #00001B
0613 12013F     361            lcall ?WriteData
0616 7412       362            mov a, #10010B
0618 12013F     362            lcall ?WriteData
061B 740A       363            mov a, #01010B
061D 12013F     363            lcall ?WriteData
0620 7404       364            mov a, #00100B
0622 12013F     364            lcall ?WriteData
0625 7400       365            mov a, #00000B
0627 12013F     365            lcall ?WriteData
062A C0E0       366            push acc
062C 7406       366            mov a, #6
062E 14         366            dec a
062F 120189     366            lcall ?Set_Cursor_1 ; Select column and row
0632 D0E0       366            pop acc
0634 7404       367            mov a, #4
0636 12013F     367            lcall ?WriteData
0639 02067B     368            ljmp check_stemp
063C            369   
063C            370   display_down_stime:
063C 7450       371            mov a, #0x50
063E 120144     371            lcall ?WriteCommand
0641 7400       372            mov a, #00000B
0643 12013F     372            lcall ?WriteData
0646 7404       373            mov a, #00100B
0648 12013F     373            lcall ?WriteData
064B 7404       374            mov a, #00100B
064D 12013F     374            lcall ?WriteData
0650 7404       375            mov a, #00100B
0652 12013F     375            lcall ?WriteData
0655 7404       376            mov a, #00100B
0657 12013F     376            lcall ?WriteData
065A 741F       377            mov a, #11111B
065C 12013F     377            lcall ?WriteData
065F 740E       378            mov a, #01110B
0661 12013F     378            lcall ?WriteData
0664 7404       379            mov a, #00100B
0666 12013F     379            lcall ?WriteData
0669 C0E0       380            push acc
066B 7406       380            mov a, #6
066D 14         380            dec a
066E 120189     380            lcall ?Set_Cursor_1 ; Select column and row
0671 D0E0       380            pop acc
0673 7402       381            mov a, #2
0675 12013F     381            lcall ?WriteData
0678 02067B     382            ljmp check_stemp
067B            383   
067B            384   check_stemp:
067B 200375     385            jb PB3, check_rtime_intr
067E 20054C     386            jb decrement1, Soak_temp_decrement
0681 E532       387            mov a, Soak_temp
0683 2401       388            add a, #0x01
0685 D4         389            da a
0686 F532       390            mov Soak_temp, a
0688 B49903     391       cjne a, #0x99, cont_s
068B 0206C1     392       ljmp add_hund_s
068E            393   
068E            394       cont_s:
068E E533       395       mov a, soak_temp_hund
0690 B42012     396            cjne a, #0x20, check_stemp_range_hund
0693 E532       397       mov a, Soak_temp
0695 B4500D     398       cjne a, #0x50, check_stemp_range_hund
0698 7400       399            mov a, #0x00
069A F532       400            mov Soak_temp, a
069C E533       401       mov a, soak_temp_hund
069E 7400       402       mov a, #0x00
06A0 F533       403       mov soak_temp_hund, a
06A2 0206A5     404            ljmp check_stemp_range_hund
06A5            405   
06A5            406            check_stemp_range_hund:
06A5 E533       407            mov a, Soak_temp_hund
06A7 9410       408            subb a, #0x10
06A9 404E       409            jc display_up_stemp
06AB E533       410            mov a, soak_temp_hund
06AD 9420       411            subb a, #0x20
06AF 4003       412            jc check_stemp_range
06B1 0206F6     413            ljmp display_down_stemp_intr
06B4            414   
06B4            415            check_stemp_range:
06B4 E532       416            mov a, soak_temp
06B6 9430       417            subb a, #0x30 
06B8 403F       418            jc display_up_stemp
06BA 9470       419            subb a, #0x70
06BC 407A       420            jc display_check_stemp
06BE 0206F6     421            ljmp display_down_stemp_intr
06C1            422   
06C1            423   add_hund_s:
06C1 E533       424       mov a, soak_temp_hund
06C3 2410       425       add a, #0x10
06C5 D4         426       da A
06C6 F533       427       mov soak_temp_hund, A
06C8 E532       428       mov a, Soak_temp
06CA 02068E     429       ljmp cont_s
06CD            430   
06CD            431   Soak_temp_decrement: 
06CD E532       432            mov a, Soak_temp
06CF 2499       433            add a, #0x99
06D1 D4         434            da a
06D2 F532       435            mov Soak_temp, a
06D4 B400CE     436       cjne a, #0x00, check_stemp_range_hund
06D7 0206EB     437       ljmp decrement_s_hund   
06DA            438   
06DA            439       continue_dec_s:
06DA 753320     440       mov soak_temp_hund, #0x20
06DD 753250     441       mov soak_temp, #0x50
06E0 0206A5     442       ljmp check_stemp_range_hund
06E3            443   
06E3            444       cont_s_dec:
06E3 9410       445       SUBB a, #0x10
06E5 D4         446       da A
06E6 F533       447       mov soak_temp_hund, a 
06E8 0206A5     448            ljmp check_stemp_range_hund
06EB            449   
06EB            450   decrement_s_hund:
06EB E533       451       mov a, soak_temp_hund
06ED B400F3     452       cjne a , #0x00, cont_s_dec
06F0 0206DA     453       ljmp continue_dec_s
06F3            454   
06F3            455   check_rtime_intr:
06F3 0207B6     456            ljmp check_rtime
06F6            457   
06F6            458   display_down_stemp_intr:
06F6 020777     459            ljmp display_down_stemp
06F9            460   
06F9            461   display_up_stemp:
06F9 7440       462            mov a, #0x40
06FB 120144     462            lcall ?WriteCommand
06FE 7400       463            mov a, #00000B
0700 12013F     463            lcall ?WriteData
0703 7404       464            mov a, #00100B
0705 12013F     464            lcall ?WriteData
0708 740E       465            mov a, #01110B
070A 12013F     465            lcall ?WriteData
070D 741F       466            mov a, #11111B
070F 12013F     466            lcall ?WriteData
0712 7404       467            mov a, #00100B
0714 12013F     467            lcall ?WriteData
0717 7404       468            mov a, #00100B
0719 12013F     468            lcall ?WriteData
071C 7404       469            mov a, #00100B
071E 12013F     469            lcall ?WriteData
0721 7404       470            mov a, #00100B
0723 12013F     470            lcall ?WriteData
0726 C0E0       471            push acc
0728 740A       471            mov a, #10
072A 14         471            dec a
072B 120189     471            lcall ?Set_Cursor_1 ; Select column and row
072E D0E0       471            pop acc
0730 7400       472            mov a, #0
0732 12013F     472            lcall ?WriteData
0735            472   
0735 0207B6     473            ljmp check_rtime
0738            474   
0738            475   display_check_stemp:
0738 7460       476            mov a, #0x60
073A 120144     476            lcall ?WriteCommand
073D 7400       477            mov a, #00000B
073F 12013F     477            lcall ?WriteData
0742 7400       478            mov a, #00000B
0744 12013F     478            lcall ?WriteData
0747 7401       479            mov a, #00001B
0749 12013F     479            lcall ?WriteData
074C 7401       480            mov a, #00001B
074E 12013F     480            lcall ?WriteData
0751 7412       481            mov a, #10010B
0753 12013F     481            lcall ?WriteData
0756 740A       482            mov a, #01010B
0758 12013F     482            lcall ?WriteData
075B 7404       483            mov a, #00100B
075D 12013F     483            lcall ?WriteData
0760 7400       484            mov a, #00000B
0762 12013F     484            lcall ?WriteData
0765 C0E0       485            push acc
0767 740A       485            mov a, #10
0769 14         485            dec a
076A 120189     485            lcall ?Set_Cursor_1 ; Select column and row
076D D0E0       485            pop acc
076F 7404       486            mov a, #4
0771 12013F     486            lcall ?WriteData
0774            486   
0774 0207B6     487            ljmp check_rtime
0777            488   
0777            489   display_down_stemp:
0777 7450       490            mov a, #0x50
0779 120144     490            lcall ?WriteCommand
077C 7400       491            mov a, #00000B
077E 12013F     491            lcall ?WriteData
0781 7404       492            mov a, #00100B
0783 12013F     492            lcall ?WriteData
0786 7404       493            mov a, #00100B
0788 12013F     493            lcall ?WriteData
078B 7404       494            mov a, #00100B
078D 12013F     494            lcall ?WriteData
0790 7404       495            mov a, #00100B
0792 12013F     495            lcall ?WriteData
0795 741F       496            mov a, #11111B
0797 12013F     496            lcall ?WriteData
079A 740E       497            mov a, #01110B
079C 12013F     497            lcall ?WriteData
079F 7404       498            mov a, #00100B
07A1 12013F     498            lcall ?WriteData
07A4 C0E0       499            push acc
07A6 740A       499            mov a, #10
07A8 14         499            dec a
07A9 120189     499            lcall ?Set_Cursor_1 ; Select column and row
07AC D0E0       499            pop acc
07AE 7402       500            mov a, #2
07B0 12013F     500            lcall ?WriteData
07B3            500   
07B3 0207B6     501            ljmp check_rtime
07B6            502   
07B6            503   check_rtime:
07B6 20026A     504            jb PB2, check_rtemp_intr
07B9 200514     505            jb decrement1, Reflow_time_decrement
07BC E534       506            mov a, Reflow_time
07BE 2401       507            add a, #0x01
07C0 D4         508            da a
07C1 F534       509            mov Reflow_time, a
07C3 9430       510            subb a, #0x30
07C5 401D       511            jc display_up_rtime ; skip if soak_time < 60
07C7 E534       512            mov a, Reflow_time
07C9 9490       513            subb a, #0x90
07CB 4059       514            jc display_check_rtime
07CD 020865     515            ljmp display_down_rtime 
07D0            516   
07D0            517   Reflow_time_decrement: 
07D0 E534       518            mov a, Reflow_time
07D2 2499       519            add a, #0x99
07D4 D4         520            da a
07D5 F534       521            mov Reflow_time, a
07D7 9430       522            subb a, #0x30
07D9 4009       523            jc display_up_rtime ; skip if soak_time < 60
07DB E534       524            mov a, Reflow_time
07DD 9490       525            subb a, #0x90
07DF 4045       526            jc display_check_rtime
07E1 020865     527            ljmp display_down_rtime 
07E4            528   
07E4            529   display_up_rtime:
07E4 7440       530            mov a, #0x40
07E6 120144     530            lcall ?WriteCommand
07E9 7400       531            mov a, #00000B
07EB 12013F     531            lcall ?WriteData
07EE 7404       532            mov a, #00100B
07F0 12013F     532            lcall ?WriteData
07F3 740E       533            mov a, #01110B
07F5 12013F     533            lcall ?WriteData
07F8 741F       534            mov a, #11111B
07FA 12013F     534            lcall ?WriteData
07FD 7404       535            mov a, #00100B
07FF 12013F     535            lcall ?WriteData
0802 7404       536            mov a, #00100B
0804 12013F     536            lcall ?WriteData
0807 7404       537            mov a, #00100B
0809 12013F     537            lcall ?WriteData
080C 7404       538            mov a, #00100B
080E 12013F     538            lcall ?WriteData
0811 C0E0       539            push acc
0813 7408       539            mov a, #8
0815 14         539            dec a
0816 120187     539            lcall ?Set_Cursor_2 ; Select column and row
0819 D0E0       539            pop acc
081B 7400       540            mov a, #0
081D 12013F     540            lcall ?WriteData
0820 0208A4     541            ljmp check_rtemp
0823            542   
0823            543   check_rtemp_intr:
0823 0208A4     544            ljmp check_rtemp
0826            545   
0826            546   display_check_rtime:
0826 7460       547            mov a, #0x60
0828 120144     547            lcall ?WriteCommand
082B 7400       548            mov a, #00000B
082D 12013F     548            lcall ?WriteData
0830 7400       549            mov a, #00000B
0832 12013F     549            lcall ?WriteData
0835 7401       550            mov a, #00001B
0837 12013F     550            lcall ?WriteData
083A 7401       551            mov a, #00001B
083C 12013F     551            lcall ?WriteData
083F 7412       552            mov a, #10010B
0841 12013F     552            lcall ?WriteData
0844 740A       553            mov a, #01010B
0846 12013F     553            lcall ?WriteData
0849 7404       554            mov a, #00100B
084B 12013F     554            lcall ?WriteData
084E 7400       555            mov a, #00000B
0850 12013F     555            lcall ?WriteData
0853 C0E0       556            push acc
0855 7408       556            mov a, #8
0857 14         556            dec a
0858 120187     556            lcall ?Set_Cursor_2 ; Select column and row
085B D0E0       556            pop acc
085D 7404       557            mov a, #4
085F 12013F     557            lcall ?WriteData
0862 0208A4     558            ljmp check_rtemp
0865            559   
0865            560   display_down_rtime:
0865 7450       561            mov a, #0x50
0867 120144     561            lcall ?WriteCommand
086A 7400       562            mov a, #00000B
086C 12013F     562            lcall ?WriteData
086F 7404       563            mov a, #00100B
0871 12013F     563            lcall ?WriteData
0874 7404       564            mov a, #00100B
0876 12013F     564            lcall ?WriteData
0879 7404       565            mov a, #00100B
087B 12013F     565            lcall ?WriteData
087E 7404       566            mov a, #00100B
0880 12013F     566            lcall ?WriteData
0883 741F       567            mov a, #11111B
0885 12013F     567            lcall ?WriteData
0888 740E       568            mov a, #01110B
088A 12013F     568            lcall ?WriteData
088D 7404       569            mov a, #00100B
088F 12013F     569            lcall ?WriteData
0892 C0E0       570            push acc
0894 7408       570            mov a, #8
0896 14         570            dec a
0897 120187     570            lcall ?Set_Cursor_2 ; Select column and row
089A D0E0       570            pop acc
089C 7402       571            mov a, #2
089E 12013F     571            lcall ?WriteData
08A1 0208A4     572            ljmp check_rtemp
08A4            573   
08A4            574   check_rtemp:
08A4 200173     575            jb PB1, skipp_intr
08A7 200547     576            jb decrement1, Reflow_temp_decrement
08AA E535       577            mov a, Reflow_temp
08AC 2401       578            add a, #0x01
08AE D4         579       da a
08AF F535       580       mov Reflow_temp, a
08B1 B49903     581            cjne a, #0x99, cont_r
08B4 0208E5     582       ljmp add_hundreds_r
08B7            583   
08B7            584       cont_r:
08B7            585       ;check hundreds
08B7 E53C       586       mov a, reflow_temp_100
08B9 B4200F     587       cjne a, #0x20, check_rtemp_range_hund ;make sure to check with 20 since the hundreds place value is multiplied by 10
08BC E535       588            mov a, reflow_temp
08BE B4500A     589       cjne a, #0x50, check_rtemp_range_hund
08C1 7400       590       mov a, #0x00
08C3 F535       591       mov reflow_temp, a
08C5 E53C       592       mov a, reflow_temp_100
08C7 7400       593       mov a, #0x00
08C9 F53C       594            mov Reflow_temp_100, a
08CB            595   
08CB            596            check_rtemp_range_hund:
08CB E53C       597            mov a, reflow_temp_100
08CD 9410       598            subb a, #0x10
08CF 404C       599            jc display_up_rtemp
08D1 9420       600            subb a, #0x20
08D3 4003       601            jc check_rtemp_range
08D5 02099B     602            ljmp display_down_rtemp
08D8            603   
08D8            604            check_rtemp_range:
08D8 E535       605            mov a, reflow_temp
08DA 9430       606            subb a, #0x30 
08DC 403F       607            jc display_up_rtemp
08DE 9470       608            subb a, #0x70
08E0 4035       609            jc display_down_rtemp_intr
08E2 02095C     610            ljmp display_check_rtemp
08E5            611   
08E5            612   add_hundreds_r:
08E5 E53C       613       mov a, reflow_temp_100
08E7 2410       614       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
08E9 D4         615       da A
08EA F53C       616       mov reflow_temp_100, A
08EC E535       617       mov a, Reflow_temp
08EE 0208B7     618       ljmp cont_r
08F1            619   
08F1            620   
08F1            621   Reflow_temp_decrement: 
08F1 E535       622            mov a, Reflow_temp
08F3 2499       623            add a, #0x99
08F5 D4         624            da a
08F6 F535       625            mov Reflow_temp, a
08F8 B400D0     626       cjne a, #0x00, check_rtemp_range_hund
08FB 02090F     627       ljmp decrement_r_hund
08FE            628   
08FE            629       continue_dec_r:
08FE            630            ;mov a, reflow_temp
08FE            631       ;cjne a, #0x00, skipp
08FE 753550     632       mov reflow_temp, #0x50
0901 753C20     633       mov reflow_temp_100, #0x20
0904 0208CB     634       ljmp check_rtemp_range_hund
0907            635   
0907            636       cont_dec:
0907 9410       637       SUBB a, #0x10
0909 D4         638       da a
090A F53C       639       mov reflow_temp_100, a
090C 0208CB     640            ljmp check_rtemp_range_hund
090F            641   
090F            642       decrement_r_hund:
090F E53C       643       mov a, reflow_temp_100
0911 B400F3     644       cjne a, #0x00, cont_dec
0914 0208FE     645       ljmp continue_dec_r
0917            646   
0917            647   display_down_rtemp_intr:
0917 02099B     648            ljmp display_down_rtemp
091A            649   
091A            650   skipp_intr:
091A 0209DA     651            ljmp skipp
091D            652   
091D            653   display_up_rtemp:
091D 7440       654            mov a, #0x40
091F 120144     654            lcall ?WriteCommand
0922 7400       655            mov a, #00000B
0924 12013F     655            lcall ?WriteData
0927 7404       656            mov a, #00100B
0929 12013F     656            lcall ?WriteData
092C 740E       657            mov a, #01110B
092E 12013F     657            lcall ?WriteData
0931 741F       658            mov a, #11111B
0933 12013F     658            lcall ?WriteData
0936 7404       659            mov a, #00100B
0938 12013F     659            lcall ?WriteData
093B 7404       660            mov a, #00100B
093D 12013F     660            lcall ?WriteData
0940 7404       661            mov a, #00100B
0942 12013F     661            lcall ?WriteData
0945 7404       662            mov a, #00100B
0947 12013F     662            lcall ?WriteData
094A C0E0       663            push acc
094C 740C       663            mov a, #12
094E 14         663            dec a
094F 120187     663            lcall ?Set_Cursor_2 ; Select column and row
0952 D0E0       663            pop acc
0954 7400       664            mov a, #0
0956 12013F     664            lcall ?WriteData
0959            664   
0959 0209DA     665            ljmp skipp
095C            666   
095C            667   display_check_rtemp:
095C 7460       668            mov a, #0x60
095E 120144     668            lcall ?WriteCommand
0961 7400       669            mov a, #00000B
0963 12013F     669            lcall ?WriteData
0966 7400       670            mov a, #00000B
0968 12013F     670            lcall ?WriteData
096B 7401       671            mov a, #00001B
096D 12013F     671            lcall ?WriteData
0970 7401       672            mov a, #00001B
0972 12013F     672            lcall ?WriteData
0975 7412       673            mov a, #10010B
0977 12013F     673            lcall ?WriteData
097A 740A       674            mov a, #01010B
097C 12013F     674            lcall ?WriteData
097F 7404       675            mov a, #00100B
0981 12013F     675            lcall ?WriteData
0984 7400       676            mov a, #00000B
0986 12013F     676            lcall ?WriteData
0989 C0E0       677            push acc
098B 740C       677            mov a, #12
098D 14         677            dec a
098E 120187     677            lcall ?Set_Cursor_2 ; Select column and row
0991 D0E0       677            pop acc
0993 7404       678            mov a, #4
0995 12013F     678            lcall ?WriteData
0998            678   
0998 0209DA     679            ljmp skipp
099B            680   
099B            681   display_down_rtemp:
099B 7450       682            mov a, #0x50
099D 120144     682            lcall ?WriteCommand
09A0 7400       683            mov a, #00000B
09A2 12013F     683            lcall ?WriteData
09A5 7404       684            mov a, #00100B
09A7 12013F     684            lcall ?WriteData
09AA 7404       685            mov a, #00100B
09AC 12013F     685            lcall ?WriteData
09AF 7404       686            mov a, #00100B
09B1 12013F     686            lcall ?WriteData
09B4 7404       687            mov a, #00100B
09B6 12013F     687            lcall ?WriteData
09B9 741F       688            mov a, #11111B
09BB 12013F     688            lcall ?WriteData
09BE 740E       689            mov a, #01110B
09C0 12013F     689            lcall ?WriteData
09C3 7404       690            mov a, #00100B
09C5 12013F     690            lcall ?WriteData
09C8 C0E0       691            push acc
09CA 740C       691            mov a, #12
09CC 14         691            dec a
09CD 120187     691            lcall ?Set_Cursor_2 ; Select column and row
09D0 D0E0       691            pop acc
09D2 7402       692            mov a, #2
09D4 12013F     692            lcall ?WriteData
09D7            692   
09D7 0209DA     693            ljmp skipp
09DA            694   
09DA            695   skipp:
09DA 22         696            ret
09DB            697   
09DB            698   Check_start:
09DB 209769     699            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09DE C002       700            push AR2
09E0 7A32       700            mov R2, #50
09E2 1200FA     700            lcall ?Wait_Milli_Seconds
09E5 D002       700            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09E7 20975D     701            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09EA 3097FD     702            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
09ED 753001     703            mov STATE, #0x01
09F0 22         704            ret
09F1            705   
09F1            706   check_convert: 
09F1 209653     707            jb CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09F4 C002       708            push AR2
09F6 7A32       708            mov R2, #50
09F8 1200FA     708            lcall ?Wait_Milli_Seconds
09FB D002       708            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09FD 209647     709            jb  CONVERT, smjmp  ; if the 'Start' button is not pressed skip
0A00 B209       710            cpl fahrenheit_flag 
0A02 22         711            ret 
0A03            712   
0A03            713   Check_mute:
0A03 20B041     714            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0A06 C002       715            push AR2
0A08 7A32       715            mov R2, #50
0A0A 1200FA     715            lcall ?Wait_Milli_Seconds
0A0D D002       715            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0A0F 20B035     716            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0A12 200A19     717            jb mute_flag, muteset
0A15 D20A       718            setb mute_flag
0A17 C0E0       719            push acc
0A19 7410       719            mov a, #16
0A1B 14         719            dec a
0A1C 120189     719            lcall ?Set_Cursor_1 ; Select column and row
0A1F D0E0       719            pop acc
0A21 C0E0       720            push acc
0A23 744D       720            mov a, #'M'
0A25 12013F     720            lcall ?WriteData
0A28 D0E0       720            pop acc
0A2A 30B0FD     721            jnb MUTE_BUTTON, $
0A2D 22         722            ret
0A2E            723   muteset:
0A2E C20A       724            clr mute_flag
0A30 C0E0       725            push acc
0A32 7410       725            mov a, #16
0A34 14         725            dec a
0A35 120189     725            lcall ?Set_Cursor_1 ; Select column and row
0A38 D0E0       725            pop acc
0A3A C0E0       726            push acc
0A3C 7420       726            mov a, #' '
0A3E 12013F     726            lcall ?WriteData
0A41 D0E0       726            pop acc
0A43 30B0FD     727            jnb MUTE_BUTTON, $
0A46 22         728            ret
0A47            729   
0A47            730   smjmp:
0A47 0209DA     731   ljmp skipp
0A4A            732   
0A4A            733   wait_for_ti:
0A4A 3099FD     734       jnb TI, wait_for_ti
0A4D C299       735       clr TI
0A4F 22         736       ret
0A50            737   
0A50            738   display_menu:
0A50 C0E0       739            push acc
0A52 7407       739            mov a, #7
0A54 14         739            dec a
0A55 120189     739            lcall ?Set_Cursor_1 ; Select column and row
0A58 D0E0       739            pop acc 
0A5A C000       740            push ar0
0A5C A831       740            mov r0, Soak_time
0A5E 12018E     740            lcall ?Display_BCD
0A61 D000       740            pop ar0
0A63 C0E0       741            push acc
0A65 740B       741            mov a, #11
0A67 14         741            dec a
0A68 120189     741            lcall ?Set_Cursor_1 ; Select column and row
0A6B D0E0       741            pop acc
0A6D C000       742            push ar0
0A6F A833       742            mov r0, Soak_temp_hund
0A71 12018E     742            lcall ?Display_BCD
0A74 D000       742            pop ar0
0A76 C0E0       743            push acc
0A78 740C       743            mov a, #12
0A7A 14         743            dec a
0A7B 120189     743            lcall ?Set_Cursor_1 ; Select column and row
0A7E D0E0       743            pop acc
0A80 C000       744            push ar0
0A82 A832       744            mov r0, soak_temp
0A84 12018E     744            lcall ?Display_BCD
0A87 D000       744            pop ar0
0A89 C0E0       745            push acc
0A8B 7409       745            mov a, #9
0A8D 14         745            dec a
0A8E 120187     745            lcall ?Set_Cursor_2 ; Select column and row
0A91 D0E0       745            pop acc
0A93 C000       746            push ar0
0A95 A834       746            mov r0, Reflow_time
0A97 12018E     746            lcall ?Display_BCD
0A9A D000       746            pop ar0
0A9C C0E0       747            push acc
0A9E 740D       747            mov a, #13
0AA0 14         747            dec a
0AA1 120187     747            lcall ?Set_Cursor_2 ; Select column and row
0AA4 D0E0       747            pop acc
0AA6 C000       748            push ar0
0AA8 A83C       748            mov r0, reflow_temp_100
0AAA 12018E     748            lcall ?Display_BCD
0AAD D000       748            pop ar0
0AAF C0E0       749            push acc
0AB1 740E       749            mov a, #14
0AB3 14         749            dec a
0AB4 120187     749            lcall ?Set_Cursor_2 ; Select column and row
0AB7 D0E0       749            pop acc
0AB9 C000       750            push ar0
0ABB A835       750            mov r0, reflow_temp
0ABD 12018E     750            lcall ?Display_BCD
0AC0 D000       750            pop ar0
0AC2 22         751       ret
0AC3            752   
0AC3            753   display_heating_s:
0AC3            754            ;Set_Cursor(1,4)
0AC3            755            ;Display_BCD(Soak_temp_hund)
0AC3            756            ;set_cursor(1,5)
0AC3            757            ;display_bcd(soak_temp)
0AC3 C0E0       758            push acc
0AC5 740C       758            mov a, #12
0AC7 14         758            dec a
0AC8 120189     758            lcall ?Set_Cursor_1 ; Select column and row
0ACB D0E0       758            pop acc
0ACD C000       759            push ar0
0ACF A838       759            mov r0, outside_temp
0AD1 12018E     759            lcall ?Display_BCD
0AD4 D000       759            pop ar0
0AD6 C0E0       760            push acc
0AD8 7407       760            mov a, #7
0ADA 14         760            dec a
0ADB 120187     760            lcall ?Set_Cursor_2 ; Select column and row
0ADE D0E0       760            pop acc
0AE0 C000       761            push ar0
0AE2 A836       761            mov r0, current_temp
0AE4 12018E     761            lcall ?Display_BCD
0AE7 D000       761            pop ar0
0AE9 22         762            ret
0AEA            763   
0AEA            764   display_heating_r:
0AEA            765            ;Set_Cursor(1,4)
0AEA            766            ;Display_BCD(reflow_temp_100)
0AEA            767            ;set_cursor(1,5)
0AEA            768            ;display_bcd(reflow_temp)
0AEA C0E0       769            push acc
0AEC 740C       769            mov a, #12
0AEE 14         769            dec a
0AEF 120189     769            lcall ?Set_Cursor_1 ; Select column and row
0AF2 D0E0       769            pop acc
0AF4 C000       770            push ar0
0AF6 A838       770            mov r0, outside_temp
0AF8 12018E     770            lcall ?Display_BCD
0AFB D000       770            pop ar0
0AFD C0E0       771            push acc
0AFF 7407       771            mov a, #7
0B01 14         771            dec a
0B02 120187     771            lcall ?Set_Cursor_2 ; Select column and row
0B05 D0E0       771            pop acc
0B07 C000       772            push ar0
0B09 A836       772            mov r0, current_temp
0B0B 12018E     772            lcall ?Display_BCD
0B0E D000       772            pop ar0
0B10 22         773            ret
0B11            774   
0B11            775   display_blank:
0B11 C0E0       776            push acc
0B13 7401       776            mov a, #1
0B15 14         776            dec a
0B16 120189     776            lcall ?Set_Cursor_1 ; Select column and row
0B19 D0E0       776            pop acc
0B1B C083       777            push dph
0B1D C082       777            push dpl
0B1F C0E0       777            push acc
0B21 900064     777            mov dptr, #blank
0B24 12017C     777            lcall ?Send_Constant_String
0B27 D0E0       777            pop acc
0B29 D082       777            pop dpl
0B2B D083       777            pop dph
0B2D C0E0       778            push acc
0B2F 7401       778            mov a, #1
0B31 14         778            dec a
0B32 120187     778            lcall ?Set_Cursor_2 ; Select column and row
0B35 D0E0       778            pop acc
0B37 C083       779            push dph
0B39 C082       779            push dpl
0B3B C0E0       779            push acc
0B3D 900064     779            mov dptr, #blank
0B40 12017C     779            lcall ?Send_Constant_String
0B43 D0E0       779            pop acc
0B45 D082       779            pop dpl
0B47 D083       779            pop dph
0B49 22         780            ret
0B4A            781   
0B4A            782   Display_formated_BCD:
0B4A C0E0       783            push acc
0B4C 740C       783            mov a, #12
0B4E 14         783            dec a
0B4F 120189     783            lcall ?Set_Cursor_1 ; Select column and row
0B52 D0E0       783            pop acc
0B54 C000       784            push ar0
0B56 A84B       784            mov r0, bcd+2
0B58 12018E     784            lcall ?Display_BCD
0B5B D000       784            pop ar0
0B5D C0E0       785            push acc
0B5F 742E       785            mov a, #'.'
0B61 12013F     785            lcall ?WriteData
0B64 D0E0       785            pop acc
0B66 C000       786            push ar0
0B68 A84A       786            mov r0, bcd+1
0B6A 12018E     786            lcall ?Display_BCD
0B6D D000       786            pop ar0
0B6F 22         787            ret
0B70            788   
0B70            789   conv_to_bcd_high:
0B70 C4         790       swap a
0B71 540F       791       anl a, #0x0f
0B73 F9         792       mov R1, a
0B74 22         793            ret
0B75            794   
0B75            795   conv_to_bcd_low:
0B75 540F       796       anl a, #0x0f
0B77 F8         797       mov R0, A
0B78 22         798            ret
0B79            799   
0B79            800   conv_to_bcd:
0B79 883D       801            mov x+0, R0
0B7B 893E       802            mov x+1, R1
0B7D 753F00     803            mov x+2, #0
0B80 754000     804            mov x+3, #0
0B83 1201E2     805       lcall hex2bcd
0B86 22         806            ret
0B87            807   String: 
0B87 0D0A00     808            DB '\r', '\n', 0
0B8A            809   
0B8A            810   Outside_tmp:
0B8A 53E8F0     811       anl ADCCON0, #0xF0
0B8D 43E807     812       orl ADCCON0, #0x07 ; Select channel 7 
0B90            813   
0B90 C2EF       814       clr ADCF
0B92 D2EE       815       setb ADCS
0B94 30EFFD     816       jnb ADCF, $
0B97            817   
0B97 E5C3       818       mov a, ADCRH
0B99 C4         819       swap a
0B9A C0E0       820       push acc
0B9C 540F       821       anl a, #0x0f
0B9E F9         822       mov R1, a
0B9F D0E0       823       pop acc
0BA1 54F0       824       anl a, #0xf0
0BA3 45C2       825       orl a, ADCRL
0BA5 F8         826       mov R0, A
0BA6            827       
0BA6            828       ; Convert to voltage
0BA6 883D       829            mov x+0, R0
0BA8 893E       830            mov x+1, R1
0BAA 753F00     831            mov x+2, #0
0BAD 754000     832            mov x+3, #0
0BB0 75417C     833            mov y+0, #low (50300 % 0x10000) 
0BB3 7542C4     833            mov y+1, #high(50300 % 0x10000) 
0BB6 754300     833            mov y+2, #low (50300 / 0x10000) 
0BB9 754400     833            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0BBC 12035C     834            lcall mul32
0BBF 7541FF     835            mov y+0, #low (4095 % 0x10000) 
0BC2 75420F     835            mov y+1, #high(4095 % 0x10000) 
0BC5 754300     835            mov y+2, #low (4095 / 0x10000) 
0BC8 754400     835            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0BCB 1203E9     836            lcall div32
0BCE 7541A4     837            mov y+0, #low (27300 % 0x10000) 
0BD1 75426A     837            mov y+1, #high(27300 % 0x10000) 
0BD4 754300     837            mov y+2, #low (27300 / 0x10000) 
0BD7 754400     837            mov y+3, #high(27300 / 0x10000) 
0BDA 1202C8     838            lcall sub32
0BDD 754164     839            mov y+0, #low (100 % 0x10000) 
0BE0 754200     839            mov y+1, #high(100 % 0x10000) 
0BE3 754300     839            mov y+2, #low (100 / 0x10000) 
0BE6 754400     839            mov y+3, #high(100 / 0x10000) 
0BE9 12035C     840            lcall mul32
0BEC            841       ;save outside temp to z to later add onto the oven temp
0BEC 853D45     842       mov z+0, x+0
0BEF 853E46     843       mov z+1, x+1
0BF2 853F47     844       mov z+2, x+2
0BF5 854048     845       mov z+3, x+3 
0BF8            846   
0BF8 1201E2     847       lcall hex2bcd
0BFB E530       848       mov a, STATE
0BFD B40501     849       cjne a, #5, display
0C00 22         850       ret
0C01            851   
0C01            852   display:
0C01 120B4A     853       lcall Display_formated_BCD
0C04 22         854       ret
0C05            855   
0C05            856   oven_tmp:
0C05 53E8F0     857       anl  ADCCON0, #0xF0  
0C08 43E804     858       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0C0B            859   
0C0B C2EF       860       clr ADCF
0C0D D2EE       861       setb ADCS
0C0F 30EFFD     862       jnb ADCF, $
0C12            863   
0C12 E5C3       864       mov a, ADCRH
0C14 C4         865       swap a
0C15 C0E0       866       push acc
0C17 540F       867       anl a, #0x0f
0C19 F9         868       mov R1, a
0C1A D0E0       869       pop acc
0C1C 54F0       870       anl a, #0xf0
0C1E 45C2       871       orl a, ADCRL
0C20 F8         872       mov R0, A
0C21            873       
0C21            874       ; Convert to voltage
0C21 883D       875            mov x+0, R0
0C23 893E       876            mov x+1, R1
0C25 753F00     877            mov x+2, #0
0C28 754000     878            mov x+3, #0
0C2B 75417C     879            mov y+0, #low (50300 % 0x10000) 
0C2E 7542C4     879            mov y+1, #high(50300 % 0x10000) 
0C31 754300     879            mov y+2, #low (50300 / 0x10000) 
0C34 754400     879            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0C37 12035C     880            lcall mul32
0C3A 7541FF     881            mov y+0, #low (4095 % 0x10000) 
0C3D 75420F     881            mov y+1, #high(4095 % 0x10000) 
0C40 754300     881            mov y+2, #low (4095 / 0x10000) 
0C43 754400     881            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0C46 1203E9     882            lcall div32
0C49            883   
0C49            884            ;vout of opamp should now be in x
0C49            885       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0C49            886       ;first calculate vout*R2:
0C49 7541BD     887            mov y+0, #low (1469 % 0x10000) 
0C4C 754205     887            mov y+1, #high(1469 % 0x10000) 
0C4F 754300     887            mov y+2, #low (1469 / 0x10000) 
0C52 754400     887            mov y+3, #high(1469 / 0x10000) 
0C55 12035C     888       lcall mul32
0C58            889       ;now vout*R2 ohm is in x
0C58            890       ;next we will take 461 650V and divide
0C58 754152     891            mov y+0, #low (461650 % 0x10000) 
0C5B 75420B     891            mov y+1, #high(461650 % 0x10000) 
0C5E 754307     891            mov y+2, #low (461650 / 0x10000) 
0C61 754400     891            mov y+3, #high(461650 / 0x10000)  
0C64 1203E9     892       lcall div32
0C67            893       ;multiply by 100k and then divide by 41 to cancel units
0C67 754140     894            mov y+0, #low (1000000 % 0x10000) 
0C6A 754242     894            mov y+1, #high(1000000 % 0x10000) 
0C6D 75430F     894            mov y+2, #low (1000000 / 0x10000) 
0C70 754400     894            mov y+3, #high(1000000 / 0x10000) 
0C73 12035C     895       lcall mul32
0C76 754129     896            mov y+0, #low (41 % 0x10000) 
0C79 754200     896            mov y+1, #high(41 % 0x10000) 
0C7C 754300     896            mov y+2, #low (41 / 0x10000) 
0C7F 754400     896            mov y+3, #high(41 / 0x10000) 
0C82 1203E9     897       lcall div32
0C85            898       ;move the outside temp to y and add
0C85 854541     899       mov y+0, z+0
0C88 854642     900       mov y+1, z+1
0C8B 854743     901       mov y+2, z+2
0C8E 854844     902       mov y+3, z+3
0C91 1202A7     903       lcall add32
0C94 1201E2     904       lcall hex2bcd
0C97            905   
0C97 854B36     906            mov current_temp, bcd+2
0C9A 854C37     907       mov current_temp_hund, bcd+3
0C9D            908   
0C9D C000       909   push ar0
0C9F A84C       909   mov r0, bcd+3
0CA1 1201C4     909   lcall ?Send_BCD
0CA4 D000       909   pop ar0
0CA6 C000       910   push ar0
0CA8 A84B       910   mov r0, bcd+2
0CAA 1201C4     910   lcall ?Send_BCD
0CAD D000       910   pop ar0
0CAF            911       put_decimal:
0CAF 3099FD     912       jnb TI, put_decimal ; Wait for transmission to complete
0CB2 C299       913       clr TI
0CB4 75992E     914       mov SBUF, #'.'
0CB7 C000       915   push ar0
0CB9 A84A       915   mov r0, bcd+1
0CBB 1201C4     915   lcall ?Send_BCD
0CBE D000       915   pop ar0
0CC0 C000       916   push ar0
0CC2 A849       916   mov r0, bcd+0
0CC4 1201C4     916   lcall ?Send_BCD
0CC7 D000       916   pop ar0
0CC9            917       put_r:
0CC9 3099FD     918       jnb TI, put_r ; Wait for transmission to complete
0CCC C299       919       clr TI
0CCE 75990D     920       mov SBUF, #'\r'
0CD1            921       put_n:
0CD1 3099FD     922       jnb TI, put_n ; Wait for transmission to complete
0CD4 C299       923       clr TI
0CD6 75990A     924       mov SBUF, #'\n'
0CD9            925   
0CD9 300936     926       jnb fahrenheit_flag, display_oven_tmp
0CDC 12026B     927            lcall bcd2hex
0CDF 754109     928            mov y+0, #low (9 % 0x10000) 
0CE2 754200     928            mov y+1, #high(9 % 0x10000) 
0CE5 754300     928            mov y+2, #low (9 / 0x10000) 
0CE8 754400     928            mov y+3, #high(9 / 0x10000) 
0CEB 12035C     929            lcall mul32
0CEE 754105     930            mov y+0, #low (5 % 0x10000) 
0CF1 754200     930            mov y+1, #high(5 % 0x10000) 
0CF4 754300     930            mov y+2, #low (5 / 0x10000) 
0CF7 754400     930            mov y+3, #high(5 / 0x10000) 
0CFA 1203E9     931            lcall div32 
0CFD 754100     932            mov y+0, #low (320000 % 0x10000) 
0D00 7542E2     932            mov y+1, #high(320000 % 0x10000) 
0D03 754304     932            mov y+2, #low (320000 / 0x10000) 
0D06 754400     932            mov y+3, #high(320000 / 0x10000) 
0D09 1202A7     933            lcall add32 
0D0C 1201E2     934            lcall hex2bcd 
0D0F 020D12     935            ljmp display_oven_tmp
0D12            936   
0D12            937   display_oven_tmp:
0D12 C0E0       938            push acc
0D14 7406       938            mov a, #6
0D16 14         938            dec a
0D17 120187     938            lcall ?Set_Cursor_2 ; Select column and row
0D1A D0E0       938            pop acc
0D1C C000       939            push ar0
0D1E A84C       939            mov r0, bcd+3
0D20 12018E     939            lcall ?Display_BCD
0D23 D000       939            pop ar0
0D25 C000       940            push ar0
0D27 A84B       940            mov r0, bcd+2
0D29 12018E     940            lcall ?Display_BCD
0D2C D000       940            pop ar0
0D2E C0E0       941            push acc
0D30 742E       941            mov a, #'.'
0D32 12013F     941            lcall ?WriteData
0D35 D0E0       941            pop acc
0D37 C000       942            push ar0
0D39 A84A       942            mov r0, bcd+1
0D3B 12018E     942            lcall ?Display_BCD
0D3E D000       942            pop ar0
0D40 22         943            ret
0D41            944   
0D41            945   skipp1:
0D41 22         946            ret
0D42            947   
0D42            948   
0D42            949   stage_temp:
0D42 53E8F0     950       anl ADCCON0, #0xF0
0D45 43E807     951       orl ADCCON0, #0x07 ; Select channel 7 
0D48            952   
0D48 C2EF       953       clr ADCF
0D4A D2EE       954       setb ADCS
0D4C 30EFFD     955       jnb ADCF, $
0D4F            956   
0D4F E5C3       957       mov a, ADCRH
0D51 C4         958       swap a
0D52 C0E0       959       push acc
0D54 540F       960       anl a, #0x0f
0D56 F9         961       mov R1, a
0D57 D0E0       962       pop acc
0D59 54F0       963       anl a, #0xf0
0D5B 45C2       964       orl a, ADCRL
0D5D F8         965       mov R0, A
0D5E            966       
0D5E            967       ; Convert to voltage
0D5E 883D       968            mov x+0, R0
0D60 893E       969            mov x+1, R1
0D62 753F00     970            mov x+2, #0
0D65 754000     971            mov x+3, #0
0D68 75417C     972            mov y+0, #low (50300 % 0x10000) 
0D6B 7542C4     972            mov y+1, #high(50300 % 0x10000) 
0D6E 754300     972            mov y+2, #low (50300 / 0x10000) 
0D71 754400     972            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0D74 12035C     973            lcall mul32
0D77 7541FF     974            mov y+0, #low (4095 % 0x10000) 
0D7A 75420F     974            mov y+1, #high(4095 % 0x10000) 
0D7D 754300     974            mov y+2, #low (4095 / 0x10000) 
0D80 754400     974            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0D83 1203E9     975            lcall div32
0D86 7541A4     976            mov y+0, #low (27300 % 0x10000) 
0D89 75426A     976            mov y+1, #high(27300 % 0x10000) 
0D8C 754300     976            mov y+2, #low (27300 / 0x10000) 
0D8F 754400     976            mov y+3, #high(27300 / 0x10000) 
0D92 1202C8     977            lcall sub32
0D95 754164     978            mov y+0, #low (100 % 0x10000) 
0D98 754200     978            mov y+1, #high(100 % 0x10000) 
0D9B 754300     978            mov y+2, #low (100 / 0x10000) 
0D9E 754400     978            mov y+3, #high(100 / 0x10000) 
0DA1 12035C     979            lcall mul32
0DA4            980       ;save outside temp to z to later add onto the oven temp
0DA4 853D45     981       mov z+0, x+0
0DA7 853E46     982       mov z+1, x+1
0DAA 853F47     983       mov z+2, x+2
0DAD 854048     984       mov z+3, x+3 
0DB0            985   
0DB0 53E8F0     986            anl  ADCCON0, #0xF0  
0DB3 43E804     987       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0DB6            988   
0DB6 C2EF       989       clr ADCF
0DB8 D2EE       990       setb ADCS
0DBA 30EFFD     991       jnb ADCF, $
0DBD            992   
0DBD E5C3       993       mov a, ADCRH
0DBF C4         994       swap a
0DC0 C0E0       995       push acc
0DC2 540F       996       anl a, #0x0f
0DC4 F9         997       mov R1, a
0DC5 D0E0       998       pop acc
0DC7 54F0       999       anl a, #0xf0
0DC9 45C2      1000       orl a, ADCRL
0DCB F8        1001       mov R0, A
0DCC           1002       
0DCC           1003       ; Convert to voltage
0DCC 883D      1004            mov x+0, R0
0DCE 893E      1005            mov x+1, R1
0DD0 753F00    1006            mov x+2, #0
0DD3 754000    1007            mov x+3, #0
0DD6 75417C    1008            mov y+0, #low (50300 % 0x10000) 
0DD9 7542C4    1008            mov y+1, #high(50300 % 0x10000) 
0DDC 754300    1008            mov y+2, #low (50300 / 0x10000) 
0DDF 754400    1008            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0DE2 12035C    1009            lcall mul32
0DE5 7541FF    1010            mov y+0, #low (4095 % 0x10000) 
0DE8 75420F    1010            mov y+1, #high(4095 % 0x10000) 
0DEB 754300    1010            mov y+2, #low (4095 / 0x10000) 
0DEE 754400    1010            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0DF1 1203E9    1011            lcall div32
0DF4           1012   
0DF4           1013            ;vout of opamp should now be in x
0DF4           1014       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0DF4           1015       ;first calculate vout*R2:
0DF4 7541BD    1016            mov y+0, #low (1469 % 0x10000) 
0DF7 754205    1016            mov y+1, #high(1469 % 0x10000) 
0DFA 754300    1016            mov y+2, #low (1469 / 0x10000) 
0DFD 754400    1016            mov y+3, #high(1469 / 0x10000) 
0E00 12035C    1017       lcall mul32
0E03           1018       ;now vout*R2 ohm is in x
0E03           1019       ;next we will take 461 650V and divide
0E03 754152    1020            mov y+0, #low (461650 % 0x10000) 
0E06 75420B    1020            mov y+1, #high(461650 % 0x10000) 
0E09 754307    1020            mov y+2, #low (461650 / 0x10000) 
0E0C 754400    1020            mov y+3, #high(461650 / 0x10000)  
0E0F 1203E9    1021       lcall div32
0E12           1022       ;multiply by 100k and then divide by 41 to cancel units
0E12 754140    1023            mov y+0, #low (1000000 % 0x10000) 
0E15 754242    1023            mov y+1, #high(1000000 % 0x10000) 
0E18 75430F    1023            mov y+2, #low (1000000 / 0x10000) 
0E1B 754400    1023            mov y+3, #high(1000000 / 0x10000) 
0E1E 12035C    1024       lcall mul32
0E21 754129    1025            mov y+0, #low (41 % 0x10000) 
0E24 754200    1025            mov y+1, #high(41 % 0x10000) 
0E27 754300    1025            mov y+2, #low (41 / 0x10000) 
0E2A 754400    1025            mov y+3, #high(41 / 0x10000) 
0E2D 1203E9    1026       lcall div32
0E30           1027       ;move the outside temp to y and add
0E30 854541    1028       mov y+0, z+0
0E33 854642    1029       mov y+1, z+1
0E36 854743    1030       mov y+2, z+2
0E39 854844    1031       mov y+3, z+3
0E3C 1202A7    1032       lcall add32
0E3F 1201E2    1033       lcall hex2bcd
0E42           1034   
0E42 C000      1035   push ar0
0E44 A84C      1035   mov r0, bcd+3
0E46 1201C4    1035   lcall ?Send_BCD
0E49 D000      1035   pop ar0
0E4B C000      1036   push ar0
0E4D A84B      1036   mov r0, bcd+2
0E4F 1201C4    1036   lcall ?Send_BCD
0E52 D000      1036   pop ar0
0E54           1037       put_decimal_1:
0E54 3099FD    1038       jnb TI, put_decimal_1 ; Wait for transmission to complete
0E57 C299      1039       clr TI
0E59 75992E    1040       mov SBUF, #'.'
0E5C C000      1041   push ar0
0E5E A84A      1041   mov r0, bcd+1
0E60 1201C4    1041   lcall ?Send_BCD
0E63 D000      1041   pop ar0
0E65 C000      1042   push ar0
0E67 A849      1042   mov r0, bcd+0
0E69 1201C4    1042   lcall ?Send_BCD
0E6C D000      1042   pop ar0
0E6E           1043       put_r_1:
0E6E 3099FD    1044       jnb TI, put_r_1 ; Wait for transmission to complete
0E71 C299      1045       clr TI
0E73 75990D    1046       mov SBUF, #'\r'
0E76           1047       put_n_1:
0E76 3099FD    1048       jnb TI, put_n_1 ; Wait for transmission to complete
0E79 C299      1049       clr TI
0E7B 75990A    1050       mov SBUF, #'\n'
0E7E           1051   
0E7E 22        1052            ret
0E7F           1053   
0E7F           1054   clearx:
0E7F 753D00    1055            mov x+0, #0x00
0E82 753E00    1056            mov x+1, #0x00
0E85 753F00    1057            mov x+2, #0x00
0E88 754000    1058            mov x+3, #0x00
0E8B 22        1059            ret 
0E8C           1060   
0E8C           1061   check_temps:
0E8C E536      1062            mov a, current_temp 
0E8E 9532      1063            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0E90           1064            ;soak temp is 10 for 100, current temp is 1 for 100 
0E90 405B      1065            jc skipp2 ; skip if current_temp < soak_temp (carry bit set)
0E92 E537      1066            mov a, current_temp_hund
0E94 B53303    1067            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
0E97 753002    1068            mov STATE, #0x02
0E9A           1069   next2:
0E9A 22        1070            ret
0E9B           1071   
0E9B           1072   check_currenttemp:
0E9B E536      1073            mov a, current_temp
0E9D 9450      1074            subb a, #0x50
0E9F 404C      1075            jc skipp2
0EA1 D208      1076            setb temp_flag ; set safety flag if temp >=60
0EA3 22        1077            ret
0EA4           1078   
0EA4           1079   safety_feature:
0EA4 E539      1080            mov a, seconds
0EA6 B43C44    1081            cjne a, #0x3C, skipp2 ; skip if current time is not 60
0EA9 200841    1082            jb temp_flag, skipp2 ; skip if temperature checks passed
0EAC 120B11    1083            lcall display_blank
0EAF 753B00    1084            mov pwm, #0
0EB2 C0E0      1085            push acc
0EB4 7401      1085            mov a, #1
0EB6 14        1085            dec a
0EB7 120189    1085            lcall ?Set_Cursor_1 ; Select column and row
0EBA D0E0      1085            pop acc
0EBC C083      1086            push dph
0EBE C082      1086            push dpl
0EC0 C0E0      1086            push acc
0EC2 900075    1086            mov dptr, #safety_message
0EC5 12017C    1086            lcall ?Send_Constant_String
0EC8 D0E0      1086            pop acc
0ECA D082      1086            pop dpl
0ECC D083      1086            pop dph
0ECE C0E0      1087            push acc
0ED0 7401      1087            mov a, #1
0ED2 14        1087            dec a
0ED3 120187    1087            lcall ?Set_Cursor_2 ; Select column and row
0ED6 D0E0      1087            pop acc
0ED8 C083      1088            push dph
0EDA C082      1088            push dpl
0EDC C0E0      1088            push acc
0EDE 90007D    1088            mov dptr, #safety_message1
0EE1 12017C    1088            lcall ?Send_Constant_String
0EE4 D0E0      1088            pop acc
0EE6 D082      1088            pop dpl
0EE8 D083      1088            pop dph
0EEA           1089   
0EEA           1090   safety_feature_loop:
0EEA 020EEA    1091            ljmp safety_feature_loop
0EED           1092   
0EED           1093   skipp2:
0EED 22        1094            ret
0EEE           1095   
0EEE           1096   ; checks secs for state 2 -> 3
0EEE           1097   check_secs_s2:
0EEE 853149    1098            mov bcd, soak_time                      ; soak_time stored as bcd
0EF1 12026B    1099            lcall bcd2hex
0EF4 E53D      1100       mov a, x
0EF6 B53903    1101       cjne a, seconds, skip_check_secs_s2
0EF9           1102            ;lcall debug_display
0EF9 753003    1103       mov state, #3
0EFC           1104   skip_check_secs_s2:
0EFC 22        1105       ret
0EFD           1106   
0EFD           1107   ; checks temp for state 3 -> 4
0EFD           1108   check_temps_s3:
0EFD E536      1109            mov a, current_temp 
0EFF 9535      1110            subb a, Reflow_temp
0F01 40EA      1111            jc skipp2
0F03 E537      1112            mov a, current_temp_hund
0F05 B53C03    1113            cjne a, reflow_temp_100, nxt2
0F08 753004    1114            mov STATe, #0x04
0F0B           1115   nxt2:
0F0B 22        1116            ret
0F0C           1117   
0F0C           1118   ; checks secs for state 4 -> 5
0F0C           1119   check_secs_s4:
0F0C 853449    1120            mov bcd, reflow_time ; reflow_time stored as bcd
0F0F 12026B    1121            lcall bcd2hex
0F12 E53D      1122       mov a, x
0F14 B53903    1123       cjne a, seconds, skip_check_secs_s4
0F17 753005    1124       mov state, #5
0F1A           1125   skip_check_secs_s4:
0F1A 22        1126       ret
0F1B           1127   
0F1B           1128   ; checks temp for state 5 -> 0
0F1B           1129   check_temp_s5:
0F1B 7460      1130       mov a, #0x60
0F1D 9536      1131            subb a, current_temp
0F1F 40CC      1132            jc skipp2
0F21 E537      1133            mov a, current_temp_hund
0F23 B40003    1134            cjne a, #0, nx2
0F26 753000    1135            mov STATE, #0x00
0F29           1136   nx2:
0F29 22        1137            ret
0F2A 22        1138   ret
0F2B           1139   
0F2B           1140   reset_seconds:
0F2B E539      1141            mov a, seconds
0F2D 7400      1142            mov a, #0x00
0F2F F539      1143            mov seconds, a
0F31           1144            ;lcall clearx
0F31           1145            ;mov x, soak_time
0F31           1146            ;lcall bcd2hex
0F31           1147            ;mov soak_time, x
0F31           1148   
0F31           1149            ;mov a, seconds
0F31           1150            ;SUBB a, soak_time
0F31           1151            ;mov seconds, a
0F31 22        1152   ret
0F32           1153   
0F32           1154   check_fahrenheit:
0F32 200903    1155            jb fahrenheit_flag, fahrenheit_display
0F35 020F67    1156            ljmp celsius_display
0F38           1157   
0F38           1158   fahrenheit_display:
0F38 C0E0      1159            push acc
0F3A 740D      1159            mov a, #13
0F3C 14        1159            dec a
0F3D 120187    1159            lcall ?Set_Cursor_2 ; Select column and row
0F40 D0E0      1159            pop acc
0F42 C083      1160            push dph
0F44 C082      1160            push dpl
0F46 C0E0      1160            push acc
0F48 9000EE    1160            mov dptr, #blank_unit
0F4B 12017C    1160            lcall ?Send_Constant_String
0F4E D0E0      1160            pop acc
0F50 D082      1160            pop dpl
0F52 D083      1160            pop dph
0F54 C083      1161            push dph
0F56 C082      1161            push dpl
0F58 C0E0      1161            push acc
0F5A 9000E6    1161            mov dptr, #fahrenheit
0F5D 12017C    1161            lcall ?Send_Constant_String
0F60 D0E0      1161            pop acc
0F62 D082      1161            pop dpl
0F64 D083      1161            pop dph
0F66 22        1162            ret 
0F67           1163   
0F67           1164   celsius_display:
0F67 C0E0      1165            push acc
0F69 740D      1165            mov a, #13
0F6B 14        1165            dec a
0F6C 120187    1165            lcall ?Set_Cursor_2 ; Select column and row
0F6F D0E0      1165            pop acc
0F71 C083      1166            push dph
0F73 C082      1166            push dpl
0F75 C0E0      1166            push acc
0F77 9000EE    1166            mov dptr, #blank_unit
0F7A 12017C    1166            lcall ?Send_Constant_String
0F7D D0E0      1166            pop acc
0F7F D082      1166            pop dpl
0F81 D083      1166            pop dph
0F83 C083      1167            push dph
0F85 C082      1167            push dpl
0F87 C0E0      1167            push acc
0F89 9000E4    1167            mov dptr, #celsius
0F8C 12017C    1167            lcall ?Send_Constant_String
0F8F D0E0      1167            pop acc
0F91 D082      1167            pop dpl
0F93 D083      1167            pop dph
0F95 22        1168            ret 
0F96           1169   
0F96           1170   main:
0F96 75817F    1171            mov sp, #0x7f
0F99           1172   
0F99 75B100    1173            mov P0M1, #0x00
0F9C 75B200    1174       mov P0M2, #0x00
0F9F 75B300    1175       mov P1M1, #0x00
0FA2 75B400    1176       mov P1M2, #0x00
0FA5 75AD00    1177       mov P3M2, #0x00
0FA8 75AD00    1178       mov P3M2, #0x00
0FAB           1179   
0FAB 120452    1180            lcall Init_All
0FAE 120149    1181       lcall LCD_4BIT
0FB1 1204DB    1182            lcall Timer2_ISR
0FB4 1204B8    1183            lcall Timer0_Init
0FB7           1184       
0FB7           1185        ; initial messages in LCD
0FB7 753000    1186       mov STATE, #0x00
0FBA 753100    1187       mov Soak_time, #0x00
0FBD 753200    1188       mov Soak_temp, #0x00
0FC0 753300    1189       mov soak_temp_hund, #0x00
0FC3 753400    1190       mov Reflow_time, #0x00
0FC6 753500    1191       mov Reflow_temp, #0x00
0FC9 753600    1192       mov current_temp, #0x00
0FCC 753700    1193       mov current_temp_hund, #0x00
0FCF 753900    1194       mov seconds, #0x00
0FD2 753A00    1195       mov pwm_counter, #0x00
0FD5 753B00    1196       mov pwm, #0x00
0FD8 753C00    1197       mov reflow_temp_100, #0x00
0FDB C205      1198       clr decrement1
0FDD C206      1199       clr s_flag 
0FDF C209      1200       clr fahrenheit_flag
0FE1 C28C      1201            clr TR0
0FE3 C20A      1202            clr mute_flag
0FE5           1203            
0FE5           1204   Forever:
0FE5 120B11    1205            lcall display_blank
0FE8           1206   
0FE8           1207   state_0:
0FE8 C0E0      1208            push acc
0FEA 7401      1208            mov a, #1
0FEC 14        1208            dec a
0FED 120189    1208            lcall ?Set_Cursor_1 ; Select column and row
0FF0 D0E0      1208            pop acc
0FF2 C083      1209            push dph
0FF4 C082      1209            push dpl
0FF6 C0E0      1209            push acc
0FF8 90002E    1209            mov dptr, #soak_param
0FFB 12017C    1209            lcall ?Send_Constant_String
0FFE D0E0      1209            pop acc
1000 D082      1209            pop dpl
1002 D083      1209            pop dph
1004 C0E0      1210            push acc
1006 7401      1210            mov a, #1
1008 14        1210            dec a
1009 120187    1210            lcall ?Set_Cursor_2 ; Select column and row
100C D0E0      1210            pop acc
100E C083      1211            push dph
1010 C082      1211            push dpl
1012 C0E0      1211            push acc
1014 90003D    1211            mov dptr, #reflow_param
1017 12017C    1211            lcall ?Send_Constant_String
101A D0E0      1211            pop acc
101C D082      1211            pop dpl
101E D083      1211            pop dph
1020           1212   
1020           1213   state_0_loop:
1020 E530      1214            mov a, STATE
1022 753B64    1215       mov pwm, #100
1025 B40012    1216            cjne a, #0, state_1
1028 1204FC    1217            lcall LCD_PB
102B 12055A    1218            lcall check_decrement
102E 120A50    1219            lcall display_menu
1031 1209DB    1220            lcall Check_start
1034 120A03    1221            lcall check_mute
1037 021020    1222            ljmp state_0_loop
103A           1223   
103A           1224   state_1: 
103A 120B11    1225            lcall display_blank
103D 120A03    1226            lcall check_mute
1040 753900    1227            mov seconds, #0x00
1043 C0E0      1228            push acc
1045 7401      1228            mov a, #1
1047 14        1228            dec a
1048 120189    1228            lcall ?Set_Cursor_1 ; Select column and row
104B D0E0      1228            pop acc
104D C083      1229            push dph
104F C082      1229            push dpl
1051 C0E0      1229            push acc
1053 90004E    1229            mov dptr, #heating_to_s
1056 12017C    1229            lcall ?Send_Constant_String
1059 D0E0      1229            pop acc
105B D082      1229            pop dpl
105D D083      1229            pop dph
105F C0E0      1230            push acc
1061 7401      1230            mov a, #1
1063 14        1230            dec a
1064 120187    1230            lcall ?Set_Cursor_2 ; Select column and row
1067 D0E0      1230            pop acc
1069 C083      1231            push dph
106B C082      1231            push dpl
106D C0E0      1231            push acc
106F 90005E    1231            mov dptr, #heating_temp
1072 12017C    1231            lcall ?Send_Constant_String
1075 D0E0      1231            pop acc
1077 D082      1231            pop dpl
1079 D083      1231            pop dph
107B           1232   
107B C0E0      1233            push acc
107D 7404      1233            mov a, #4
107F 14        1233            dec a
1080 120189    1233            lcall ?Set_Cursor_1 ; Select column and row
1083 D0E0      1233            pop acc
1085 C000      1234            push ar0
1087 A833      1234            mov r0, Soak_temp_hund
1089 12018E    1234            lcall ?Display_BCD
108C D000      1234            pop ar0
108E C0E0      1235            push acc
1090 7405      1235            mov a, #5
1092 14        1235            dec a
1093 120189    1235            lcall ?Set_Cursor_1 ; Select column and row
1096 D0E0      1235            pop acc
1098 C000      1236            push ar0
109A A832      1236            mov r0, soak_temp
109C 12018E    1236            lcall ?Display_BCD
109F D000      1236            pop ar0
10A1           1237   
10A1 120E7F    1238            lcall clearx
10A4 754900    1239            mov bcd+0, #0x00
10A7 754A00    1240            mov bcd+1, #0x00
10AA 754B00    1241            mov bcd+2, #0x00
10AD 754C00    1242            mov bcd+3, #0x00
10B0 853349    1243            mov bcd, soak_temp_hund
10B3 12026B    1244            lcall bcd2hex
10B6 75410A    1245            mov y+0, #low (10 % 0x10000) 
10B9 754200    1245            mov y+1, #high(10 % 0x10000) 
10BC 754300    1245            mov y+2, #low (10 / 0x10000) 
10BF 754400    1245            mov y+3, #high(10 / 0x10000) 
10C2 1203E9    1246            lcall div32
10C5 1201E2    1247            lcall hex2bcd
10C8 854933    1248            mov soak_temp_hund, bcd
10CB 200A16    1249            jb mute_flag, state_1_loop
10CE D28C      1250            setb TR0
10D0 C002      1251            push AR2
10D2 7AFA      1251            mov R2, #250
10D4 1200FA    1251            lcall ?Wait_Milli_Seconds
10D7 D002      1251            pop AR2
10D9 C002      1252            push AR2
10DB 7AFA      1252            mov R2, #250
10DD 1200FA    1252            lcall ?Wait_Milli_Seconds
10E0 D002      1252            pop AR2
10E2 C28C      1253       clr TR0
10E4           1254            
10E4           1255   state_1_loop:
10E4 E530      1256            mov a, STATE
10E6 B4012A    1257            cjne a, #1, state_2
10E9 120AC3    1258            lcall display_heating_s
10EC 753B00    1259            mov pwm, #0
10EF 1209F1    1260            lcall check_convert
10F2 120B8A    1261            lcall outside_tmp
10F5 120C05    1262            lcall oven_tmp
10F8 120E9B    1263            lcall check_currenttemp
10FB 120EA4    1264            lcall safety_feature
10FE 120E8C    1265            lcall check_temps
1101 120F32    1266            lcall check_fahrenheit
1104 120A03    1267            lcall check_mute
1107 C002      1268            push AR2
1109 7AFA      1268            mov R2, #250
110B 1200FA    1268            lcall ?Wait_Milli_Seconds
110E D002      1268            pop AR2
1110 0210E4    1269            ljmp state_1_loop
1113           1270   
1113           1271   state_2:
1113 120B11    1272            lcall display_blank 
1116 120A03    1273            lcall check_mute
1119 753900    1274            mov seconds, #0
111C C0E0      1275            push acc
111E 7401      1275            mov a, #1
1120 14        1275            dec a
1121 120189    1275            lcall ?Set_Cursor_1 ; Select column and row
1124 D0E0      1275            pop acc
1126 C083      1276            push dph
1128 C082      1276            push dpl
112A C0E0      1276            push acc
112C 90008C    1276            mov dptr, #soaking
112F 12017C    1276            lcall ?Send_Constant_String
1132 D0E0      1276            pop acc
1134 D082      1276            pop dpl
1136 D083      1276            pop dph
1138 C0E0      1277            push acc
113A 7401      1277            mov a, #1
113C 14        1277            dec a
113D 120187    1277            lcall ?Set_Cursor_2 ; Select column and row
1140 D0E0      1277            pop acc
1142 C083      1278            push dph
1144 C082      1278            push dpl
1146 C0E0      1278            push acc
1148 9000A7    1278            mov dptr, #time
114B 12017C    1278            lcall ?Send_Constant_String
114E D0E0      1278            pop acc
1150 D082      1278            pop dpl
1152 D083      1278            pop dph
1154 C0E0      1279            push acc
1156 740E      1279            mov a, #14
1158 14        1279            dec a
1159 120189    1279            lcall ?Set_Cursor_1 ; Select column and row
115C D0E0      1279            pop acc
115E C000      1280            push ar0
1160 A831      1280            mov r0, soak_time
1162 12018E    1280            lcall ?Display_BCD
1165 D000      1280            pop ar0
1167 200A16    1281            jb mute_flag, state_2_loop
116A D28C      1282            setb TR0
116C C002      1283            push AR2
116E 7AFA      1283            mov R2, #250
1170 1200FA    1283            lcall ?Wait_Milli_Seconds
1173 D002      1283            pop AR2
1175 C002      1284            push AR2
1177 7AFA      1284            mov R2, #250
1179 1200FA    1284            lcall ?Wait_Milli_Seconds
117C D002      1284            pop AR2
117E C28C      1285       clr TR0
1180           1286   
1180           1287   
1180           1288   state_2_loop: 
1180 E530      1289            mov a, STATE
1182 B40237    1290       cjne a, #2, state_3
1185 C0E0      1291            push acc
1187 7406      1291            mov a, #6
1189 14        1291            dec a
118A 120187    1291            lcall ?Set_Cursor_2 ; Select column and row
118D D0E0      1291            pop acc
118F 120E7F    1292            lcall clearx
1192 85393D    1293            mov x, seconds 
1195 1201E2    1294            lcall hex2bcd 
1198 C000      1295            push ar0
119A A849      1295            mov r0, bcd
119C 12018E    1295            lcall ?Display_BCD
119F D000      1295            pop ar0
11A1 120E7F    1296            lcall clearx
11A4 753B50    1297            mov pwm, #80
11A7 120EEE    1298            lcall check_secs_s2
11AA 120D42    1299            lcall stage_temp
11AD 120A03    1300            lcall check_mute
11B0 C002      1301            push AR2
11B2 7AFA      1301            mov R2, #250
11B4 1200FA    1301            lcall ?Wait_Milli_Seconds
11B7 D002      1301            pop AR2
11B9 021180    1302            ljmp state_2_loop
11BC           1303   
11BC           1304   state_3:
11BC 753900    1305            mov seconds, #0
11BF 120F2B    1306            lcall reset_seconds
11C2 120B11    1307            lcall display_blank
11C5 C0E0      1308            push acc
11C7 7401      1308            mov a, #1
11C9 14        1308            dec a
11CA 120189    1308            lcall ?Set_Cursor_1 ; Select column and row
11CD D0E0      1308            pop acc
11CF C083      1309            push dph
11D1 C082      1309            push dpl
11D3 C0E0      1309            push acc
11D5 9000B0    1309            mov dptr, #heating_to_r
11D8 12017C    1309            lcall ?Send_Constant_String
11DB D0E0      1309            pop acc
11DD D082      1309            pop dpl
11DF D083      1309            pop dph
11E1 C0E0      1310            push acc
11E3 7401      1310            mov a, #1
11E5 14        1310            dec a
11E6 120187    1310            lcall ?Set_Cursor_2 ; Select column and row
11E9 D0E0      1310            pop acc
11EB C083      1311            push dph
11ED C082      1311            push dpl
11EF C0E0      1311            push acc
11F1 90005E    1311            mov dptr, #heating_temp
11F4 12017C    1311            lcall ?Send_Constant_String
11F7 D0E0      1311            pop acc
11F9 D082      1311            pop dpl
11FB D083      1311            pop dph
11FD 120A03    1312            lcall check_mute
1200           1313            
1200 C0E0      1314            push acc
1202 7404      1314            mov a, #4
1204 14        1314            dec a
1205 120189    1314            lcall ?Set_Cursor_1 ; Select column and row
1208 D0E0      1314            pop acc
120A C000      1315            push ar0
120C A83C      1315            mov r0, reflow_temp_100
120E 12018E    1315            lcall ?Display_BCD
1211 D000      1315            pop ar0
1213 C0E0      1316            push acc
1215 7405      1316            mov a, #5
1217 14        1316            dec a
1218 120189    1316            lcall ?Set_Cursor_1 ; Select column and row
121B D0E0      1316            pop acc
121D C000      1317            push ar0
121F A835      1317            mov r0, reflow_temp
1221 12018E    1317            lcall ?Display_BCD
1224 D000      1317            pop ar0
1226           1318   
1226 120E7F    1319            lcall clearx
1229 754900    1320            mov bcd+0, #0x00
122C 754A00    1321            mov bcd+1, #0x00
122F 754B00    1322            mov bcd+2, #0x00
1232 754C00    1323            mov bcd+3, #0x00
1235 853C49    1324            mov bcd, reflow_temp_100
1238 12026B    1325            lcall bcd2hex
123B 75410A    1326            mov y+0, #low (10 % 0x10000) 
123E 754200    1326            mov y+1, #high(10 % 0x10000) 
1241 754300    1326            mov y+2, #low (10 / 0x10000) 
1244 754400    1326            mov y+3, #high(10 / 0x10000) 
1247 1203E9    1327            lcall div32
124A 1201E2    1328            lcall hex2bcd
124D 85493C    1329            mov reflow_temp_100, bcd
1250 200A16    1330            jb mute_flag, state_3_loop
1253 D28C      1331            setb TR0
1255 C002      1332            push AR2
1257 7AFA      1332            mov R2, #250
1259 1200FA    1332            lcall ?Wait_Milli_Seconds
125C D002      1332            pop AR2
125E C002      1333            push AR2
1260 7AFA      1333            mov R2, #250
1262 1200FA    1333            lcall ?Wait_Milli_Seconds
1265 D002      1333            pop AR2
1267 C28C      1334       clr TR0
1269           1335   
1269           1336   state_3_loop:
1269 E530      1337            mov a, STATE
126B B40324    1338            cjne a, #3, state_4
126E 120AEA    1339            lcall display_heating_r
1271 753B00    1340            mov pwm, #0
1274 1209F1    1341            lcall check_convert
1277 120B8A    1342            lcall outside_tmp
127A 120C05    1343            lcall oven_tmp
127D 120EFD    1344            lcall check_temps_s3
1280 120F32    1345            lcall check_fahrenheit
1283 120A03    1346            lcall check_mute
1286 C002      1347            push AR2
1288 7AFA      1347            mov R2, #250
128A 1200FA    1347            lcall ?Wait_Milli_Seconds
128D D002      1347            pop AR2
128F 021269    1348            ljmp state_3_loop
1292           1349   
1292           1350   state_4:
1292 120B11    1351            lcall display_blank
1295 753900    1352            mov seconds, #0
1298 C0E0      1353            push acc
129A 7401      1353            mov a, #1
129C 14        1353            dec a
129D 120189    1353            lcall ?Set_Cursor_1 ; Select column and row
12A0 D0E0      1353            pop acc
12A2 C083      1354            push dph
12A4 C082      1354            push dpl
12A6 C0E0      1354            push acc
12A8 90009A    1354            mov dptr, #reflow
12AB 12017C    1354            lcall ?Send_Constant_String
12AE D0E0      1354            pop acc
12B0 D082      1354            pop dpl
12B2 D083      1354            pop dph
12B4 C0E0      1355            push acc
12B6 7401      1355            mov a, #1
12B8 14        1355            dec a
12B9 120187    1355            lcall ?Set_Cursor_2 ; Select column and row
12BC D0E0      1355            pop acc
12BE C083      1356            push dph
12C0 C082      1356            push dpl
12C2 C0E0      1356            push acc
12C4 9000A7    1356            mov dptr, #time
12C7 12017C    1356            lcall ?Send_Constant_String
12CA D0E0      1356            pop acc
12CC D082      1356            pop dpl
12CE D083      1356            pop dph
12D0 C0E0      1357            push acc
12D2 740E      1357            mov a, #14
12D4 14        1357            dec a
12D5 120189    1357            lcall ?Set_Cursor_1 ; Select column and row
12D8 D0E0      1357            pop acc
12DA C000      1358            push ar0
12DC A834      1358            mov r0, reflow_time
12DE 12018E    1358            lcall ?Display_BCD
12E1 D000      1358            pop ar0
12E3 120A03    1359            lcall check_mute
12E6 200A16    1360            jb mute_flag, state_4_loop
12E9 D28C      1361            setb TR0
12EB C002      1362            push AR2
12ED 7AFA      1362            mov R2, #250
12EF 1200FA    1362            lcall ?Wait_Milli_Seconds
12F2 D002      1362            pop AR2
12F4 C002      1363            push AR2
12F6 7AFA      1363            mov R2, #250
12F8 1200FA    1363            lcall ?Wait_Milli_Seconds
12FB D002      1363            pop AR2
12FD C28C      1364       clr TR0
12FF           1365   
12FF           1366   state_4_loop:
12FF E530      1367       mov a, STATE
1301 B40437    1368       cjne a, #4, state_5
1304 C0E0      1369            push acc
1306 7406      1369            mov a, #6
1308 14        1369            dec a
1309 120187    1369            lcall ?Set_Cursor_2 ; Select column and row
130C D0E0      1369            pop acc
130E 120E7F    1370       lcall clearx
1311 85393D    1371       mov x, seconds
1314 1201E2    1372       lcall hex2bcd
1317 C000      1373            push ar0
1319 A849      1373            mov r0, bcd
131B 12018E    1373            lcall ?Display_BCD
131E D000      1373            pop ar0
1320 120E7F    1374       lcall clearx
1323 753B50    1375       mov pwm, #80
1326 120F0C    1376       lcall check_secs_s4
1329 120D42    1377            lcall stage_temp
132C 120A03    1378            lcall check_mute
132F C002      1379            push AR2
1331 7AFA      1379            mov R2, #250
1333 1200FA    1379            lcall ?Wait_Milli_Seconds
1336 D002      1379            pop AR2
1338 0212FF    1380       ljmp state_4_loop
133B           1381   
133B           1382   state_5:
133B 120B11    1383       lcall display_blank
133E C0E0      1384            push acc
1340 7401      1384            mov a, #1
1342 14        1384            dec a
1343 120189    1384            lcall ?Set_Cursor_1 ; Select column and row
1346 D0E0      1384            pop acc
1348 C083      1385            push dph
134A C082      1385            push dpl
134C C0E0      1385            push acc
134E 9000C0    1385            mov dptr, #cooling
1351 12017C    1385            lcall ?Send_Constant_String
1354 D0E0      1385            pop acc
1356 D082      1385            pop dpl
1358 D083      1385            pop dph
135A C0E0      1386            push acc
135C 7401      1386            mov a, #1
135E 14        1386            dec a
135F 120187    1386            lcall ?Set_Cursor_2 ; Select column and row
1362 D0E0      1386            pop acc
1364 C083      1387            push dph
1366 C082      1387            push dpl
1368 C0E0      1387            push acc
136A 90005E    1387            mov dptr, #heating_temp
136D 12017C    1387            lcall ?Send_Constant_String
1370 D0E0      1387            pop acc
1372 D082      1387            pop dpl
1374 D083      1387            pop dph
1376 120A03    1388            lcall check_mute
1379 200A16    1389            jb mute_flag, state_5_loop
137C D28C      1390            setb TR0
137E C002      1391            push AR2
1380 7AFA      1391            mov R2, #250
1382 1200FA    1391            lcall ?Wait_Milli_Seconds
1385 D002      1391            pop AR2
1387 C002      1392            push AR2
1389 7AFA      1392            mov R2, #250
138B 1200FA    1392            lcall ?Wait_Milli_Seconds
138E D002      1392            pop AR2
1390 C28C      1393       clr TR0
1392           1394       
1392           1395   state_5_loop:
1392 E530      1396            mov a, STATE
1394 B40534    1397            cjne a, #5, state_6
1397 753B64    1398            mov pwm, #100
139A C0E0      1399            push acc
139C 7407      1399            mov a, #7
139E 14        1399            dec a
139F 120187    1399            lcall ?Set_Cursor_2 ; Select column and row
13A2 D0E0      1399            pop acc
13A4 C000      1400            push ar0
13A6 A836      1400            mov r0, current_temp
13A8 12018E    1400            lcall ?Display_BCD
13AB D000      1400            pop ar0
13AD 1209F1    1401            lcall check_convert
13B0 120B8A    1402            lcall outside_tmp
13B3 120C05    1403            lcall oven_tmp
13B6 120F1B    1404            lcall check_temp_s5
13B9 120F32    1405            lcall check_fahrenheit
13BC 120A03    1406            lcall check_mute
13BF C002      1407            push AR2
13C1 7AFA      1407            mov R2, #250
13C3 1200FA    1407            lcall ?Wait_Milli_Seconds
13C6 D002      1407            pop AR2
13C8 021392    1408            ljmp state_5_loop
13CB           1409   
13CB           1410   state_6:
13CB 120B11    1411            lcall display_blank
13CE C0E0      1412            push acc
13D0 7401      1412            mov a, #1
13D2 14        1412            dec a
13D3 120189    1412            lcall ?Set_Cursor_1 ; Select column and row
13D6 D0E0      1412            pop acc
13D8 C083      1413            push dph
13DA C082      1413            push dpl
13DC C0E0      1413            push acc
13DE 9000D0    1413            mov dptr, #done
13E1 12017C    1413            lcall ?Send_Constant_String
13E4 D0E0      1413            pop acc
13E6 D082      1413            pop dpl
13E8 D083      1413            pop dph
13EA C0E0      1414            push acc
13EC 7401      1414            mov a, #1
13EE 14        1414            dec a
13EF 120187    1414            lcall ?Set_Cursor_2 ; Select column and row
13F2 D0E0      1414            pop acc
13F4 C083      1415            push dph
13F6 C082      1415            push dpl
13F8 C0E0      1415            push acc
13FA 9000D5    1415            mov dptr, #ready
13FD 12017C    1415            lcall ?Send_Constant_String
1400 D0E0      1415            pop acc
1402 D082      1415            pop dpl
1404 D083      1415            pop dph
1406 120A03    1416            lcall check_mute
1409 200A66    1417            jb mute_flag, state_6_loop
140C B28C      1418            cpl TR0
140E C002      1419            push AR2
1410 7AFA      1419            mov R2, #250
1412 1200FA    1419            lcall ?Wait_Milli_Seconds
1415 D002      1419            pop AR2
1417 C002      1420            push AR2
1419 7AFA      1420            mov R2, #250
141B 1200FA    1420            lcall ?Wait_Milli_Seconds
141E D002      1420            pop AR2
1420 B28C      1421       cpl TR0
1422 C002      1422            push AR2
1424 7AFA      1422            mov R2, #250
1426 1200FA    1422            lcall ?Wait_Milli_Seconds
1429 D002      1422            pop AR2
142B C002      1423            push AR2
142D 7AFA      1423            mov R2, #250
142F 1200FA    1423            lcall ?Wait_Milli_Seconds
1432 D002      1423            pop AR2
1434 B28C      1424       cpl TR0
1436 C002      1425            push AR2
1438 7AFA      1425            mov R2, #250
143A 1200FA    1425            lcall ?Wait_Milli_Seconds
143D D002      1425            pop AR2
143F C002      1426            push AR2
1441 7AFA      1426            mov R2, #250
1443 1200FA    1426            lcall ?Wait_Milli_Seconds
1446 D002      1426            pop AR2
1448 B28C      1427       cpl TR0
144A C002      1428            push AR2
144C 7AFA      1428            mov R2, #250
144E 1200FA    1428            lcall ?Wait_Milli_Seconds
1451 D002      1428            pop AR2
1453 C002      1429            push AR2
1455 7AFA      1429            mov R2, #250
1457 1200FA    1429            lcall ?Wait_Milli_Seconds
145A D002      1429            pop AR2
145C B28C      1430       cpl TR0
145E C002      1431            push AR2
1460 7AFA      1431            mov R2, #250
1462 1200FA    1431            lcall ?Wait_Milli_Seconds
1465 D002      1431            pop AR2
1467 C002      1432            push AR2
1469 7AFA      1432            mov R2, #250
146B 1200FA    1432            lcall ?Wait_Milli_Seconds
146E D002      1432            pop AR2
1470 B28C      1433       cpl TR0
1472           1434   state_6_loop:
1472 021472    1435            ljmp state_6_loop
1475           1436   
1475           1437   
1475           1438   END
