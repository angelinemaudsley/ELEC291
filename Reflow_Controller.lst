0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             27   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             28   
0000             29   ORG 0x0000
0000 0209F2      30            ljmp main
0023             31   org 0x0023
0023 32          32            reti
0024             33            ; Timer/Counter 2 overflow interrupt vector
002B             34   org 0x002B
002B 0204AE      35            ljmp Timer2_ISR
002E             36   
002E             37   START_BUTTON  equ P1.7
002E             38   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             39   
002E             40   
002E             41   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    42   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    43   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A78    44   heating_to_s:  db   'Ts:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
005E 54656D70    45   heating_temp:db    'Temp: ', 0;heating_temp:db    'Temp: xxxC', 0
     3A2000
0065 20202020    46   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0076 4552524F    47   safety_message:db  'ERROR: ', 0
     523A2000
007E 43616E74    48   safety_message1:db  'Cant Read Temp'
     20526561
     64205465
     6D70
008C 536F616B    49   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    50   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    51   time:db            'Time:xxs',0
     3A787873
     00
00B0 54723A78    52   heating_to_r:db    'Tr:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
00C0 436F6F6C    53   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0             54   
00D0             55   cseg
00D0             56   ; These 'equ' must match the hardware wiring
00D0             57   LCD_RS equ P1.3
00D0             58   LCD_E  equ P1.4
00D0             59   LCD_D4 equ P0.0
00D0             60   LCD_D5 equ P0.1
00D0             61   LCD_D6 equ P0.2
00D0             62   LCD_D7 equ P0.3
00D0             63   ;ADC_pn equ P1.1
00D0             64   
00D0             65   
                 67   	$LIST
01C2             69   
0030             70   DSEG at 30h
0030             71   STATE: ds 1
0031             72   Soak_time: ds 1
0032             73   Soak_temp: ds 1
0033             74   soak_temp_hund: ds 1
0034             75   Reflow_time: ds 1
0035             76   Reflow_temp: ds 1
0036             77   current_temp: ds 1
0037             78   current_temp_hund: ds 1
0038             79   outside_temp: ds 1
0039             80   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             81   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             82   pwm: ds 1 ; pwm percentage
003C             83   reflow_temp_100:ds 1
003D             84   x: ds 4
0041             85   y: ds 4
0045             86   z: ds 4
0049             87   bcd: ds 5
004E             88   
004E             89   
0000             90   BSEG
0000             91   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000             92   PB0: dbit 1
0001             93   PB1: dbit 1
0002             94   PB2: dbit 1
0003             95   PB3: dbit 1
0004             96   PB4: dbit 1
0005             97   decrement1: dbit 1
0006             98   s_flag: dbit 1 ; set to 1 every time a second has passed
0007             99   mf: dbit 1
0008            100   temp_flag: dbit 1
0009            101   
                546   $LIST
                103   $LIST
0432            105   
0432            106   CSEG
0432            107   
0432            108   Init_All:
0432            109            ; Configure all the pins for biderectional I/O
0432 75AC00     110            mov     P3M1, #0x00
0435 75AD00     111            mov     P3M2, #0x00
0438 75B300     112            mov     P1M1, #0x00
043B 75B400     113            mov     P1M2, #0x00
043E 75B100     114            mov     P0M1, #0x00
0441 75B200     115            mov     P0M2, #0x00
0444            116            
0444 438E10     117            orl     CKCON, #0x10 ; CLK is the input for timer 1
0447 438780     118            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
044A 759852     119            mov     SCON, #0x52
044D 53C4DF     120            anl     T3CON, #0b11011111
0450 53890F     121            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0453 438920     122            orl     TMOD, #0x20 ; Timer 1 Mode 2
0456 758DF7     123            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0459 D28E       124            setb TR1
045B            125            
045B            126            ; Using timer 0 for delay functions.  Initialize here:
045B C28C       127            clr     TR0 ; Stop timer 0
045D 438E08     128            orl     CKCON,#0x08 ; CLK is the input for timer 0
0460 5389F0     129            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0463 438901     130            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0466            131   
0466            132            ; Initialize timer 2 for periodic interrupts
0466 75C800     133            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
0469 75CDD7     134            mov TH2, #high(TIMER2_RELOAD)
046C 75CC79     135            mov TL2, #low(TIMER2_RELOAD)
046F            136            ; Set the reload value
046F 75C9A0     137            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0472 75CBD7     138            mov RCMP2H, #high(TIMER2_RELOAD)
0475 75CA79     139            mov RCMP2L, #low(TIMER2_RELOAD)
0478            140            ; Init the free running 10 ms counter to zero
0478 753A00     141            mov pwm_counter, #0
047B            142            ; Enable the timer and interrupts
047B 439B80     143            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
047E D2CA       144            setb TR2 ; Enable timer 2
0480 D2AF       145            setb EA ; Enable global interrupts
0482            146   
0482            147            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
0482 43B302     148            orl     P1M1, #0b00000010
0485 53B4FD     149            anl     P1M2, #0b11111101
0488            150            
0488            151       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
0488 43B110     152       orl  P0M1, #0b00010000
048B 53B2EF     153            anl     P0M2, #0b11101111
048E            154            
048E            155   
048E            156            ; Initialize and start the ADC-LM335:
048E            157            ;do these two when you are going to read from pin 14
048E            158       ;anl ADCCON0, #0xF0
048E            159            ;orl ADCCON0, #0x07 ; Select channel 7
048E            160            
048E            161       ; AINDIDS select if some pins are analog inputs or digital I/O:
048E 75F600     162            mov AINDIDS, #0x00 ; Disable all analog inputs
0491 43F690     163            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
0494 43E101     164            orl ADCCON1, #0x01 ; Enable ADC
0497            165   
0497            166   
0497 22         167   ret
0498            168            
0498            169   wait_1ms:
0498 C28C       170            clr     TR0 ; Stop timer 0
049A C28D       171            clr     TF0 ; Clear overflow flag
049C 758CBF     172            mov     TH0, #high(TIMER0_RELOAD_1MS)
049F 758A28     173            mov     TL0,#low(TIMER0_RELOAD_1MS)
04A2 D28C       174            setb TR0
04A4 308DFD     175            jnb     TF0, $ ; Wait for overflow
04A7 22         176            ret
04A8            177   
04A8            178   ; Wait the number of miliseconds in R2
04A8            179   waitms:
04A8 120498     180            lcall wait_1ms
04AB DAFB       181            djnz R2, waitms
04AD 22         182            ret
04AE            183   
04AE            184   Timer2_ISR:
04AE C2CF       185            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04B0 C0D0       186            push psw
04B2 C0E0       187            push acc
04B4            188   
04B4 053A       189            inc pwm_counter
04B6 C3         190            clr c
04B7 E53B       191            mov a, pwm
04B9 953A       192            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04BB B3         193            cpl c
04BC 9290       194            mov PWM_OUT, c
04BE            195   
04BE E53A       196            mov a, pwm_counter
04C0 B46407     197            cjne a, #100, Timer2_ISR_done
04C3 753A00     198            mov pwm_counter, #0
04C6 0539       199            inc seconds ; It is super easy to keep a seconds count here
04C8 D206       200            setb s_flag
04CA            201   
04CA            202   Timer2_ISR_done:
04CA D0E0       203            pop acc
04CC D0D0       204            pop psw
04CE 32         205            reti
04CF            206   
04CF            207   LCD_PB:
04CF            208            ; Set variables to 1: 'no push button pressed'
04CF D200       209            setb PB0
04D1 D201       210            setb PB1
04D3 D202       211            setb PB2
04D5 D203       212            setb PB3
04D7 D204       213            setb PB4
04D9            214            ; The input pin used to check set to '1'
04D9 D295       215            setb P1.5
04DB            216            
04DB            217            ; Check if any push button is pressed
04DB C280       218            clr P0.0
04DD C281       219            clr P0.1
04DF C282       220            clr P0.2
04E1 C283       221            clr P0.3
04E3 C293       222            clr P1.3
04E5 209544     223            jb P1.5, LCD_PB_Done
04E8            224   
04E8            225            ; Debounce
04E8 209541     226            jb P1.5, LCD_PB_Done
04EB C002       227            push AR2
04ED 7A32       227            mov R2, #50
04EF 1200DA     227            lcall ?Wait_Milli_Seconds
04F2 D002       227            pop AR2
04F4 209535     228            jb P1.5, LCD_PB_Done
04F7 2095FD     229            jb P1.5, $
04FA            230   
04FA            231            ; Set the LCD data pins to logic 1
04FA D280       232            setb P0.0
04FC D281       233            setb P0.1
04FE D282       234            setb P0.2
0500 D283       235            setb P0.3
0502 D293       236            setb P1.3
0504            237            
0504            238            ; Check the push buttons one by one
0504 C293       239            clr P1.3
0506 A295       240            mov c, P1.5
0508 9204       241            mov PB4, c
050A D293       242            setb P1.3
050C            243   
050C C280       244            clr P0.0
050E A295       245            mov c, P1.5
0510 9203       246            mov PB3, c
0512 D280       247            setb P0.0
0514            248            
0514 C281       249            clr P0.1
0516 A295       250            mov c, P1.5
0518 9202       251            mov PB2, c
051A D281       252            setb P0.1
051C            253            
051C C282       254            clr P0.2
051E A295       255            mov c, P1.5
0520 9201       256            mov PB1, c
0522 D282       257            setb P0.2
0524            258            
0524 C283       259            clr P0.3
0526 A295       260            mov c, P1.5
0528 9200       261            mov PB0, c
052A D283       262            setb P0.3
052C            263   
052C            264   LCD_PB_Done:             
052C 22         265            ret
052D            266   
052D            267   check_decrement: 
052D 200005     268            jb PB0, check_stime
0530 B205       269            cpl decrement1
0532 020535     270            ljmp check_stime
0535            271   
0535            272   check_stime:
0535 200117     273            jb PB1, check_stemp
0538 20050A     274            jb decrement1, Soak_time_decrement
053B E531       275            mov a, Soak_time
053D 2401       276            add a, #0x01
053F D4         277            da a
0540 F531       278            mov Soak_time, a
0542 02054F     279            ljmp check_stemp
0545            280   
0545            281   Soak_time_decrement: 
0545 E531       282            mov a, Soak_time
0547 2499       283            add a, #0x99
0549 D4         284            da a
054A F531       285            mov Soak_time, a
054C 02054F     286            ljmp check_stemp
054F            287   
054F            288   check_stemp:
054F 200259     289            jb PB2, check_rtime
0552 200530     290            jb decrement1, Soak_temp_decrement
0555 E532       291            mov a, Soak_temp
0557 2401       292            add a, #0x01
0559 D4         293            da a
055A F532       294            mov Soak_temp, a
055C B49903     295       cjne a, #0x99, cont_s
055F 020579     296       ljmp add_hund_s
0562            297   
0562            298       cont_s:
0562 E533       299       mov a, soak_temp_hund
0564 B4200F     300            cjne a, #0x20, fini
0567 E532       301       mov a, Soak_temp
0569 B4503F     302       cjne a, #0x50, check_rtime
056C 7400       303            mov a, #0x00
056E F532       304            mov Soak_temp, a
0570 E533       305       mov a, soak_temp_hund
0572 7400       306       mov a, #0x00
0574 F533       307       mov soak_temp_hund, a
0576            308   
0576            309       fini:
0576 0205AB     310            ljmp check_rtime
0579            311   
0579            312   add_hund_s:
0579 E533       313       mov a, soak_temp_hund
057B 2410       314       add a, #0x10
057D D4         315       da A
057E F533       316       mov soak_temp_hund, A
0580 E532       317       mov a, Soak_temp
0582 020562     318       ljmp cont_s
0585            319   
0585            320   Soak_temp_decrement: 
0585 E532       321            mov a, Soak_temp
0587 2499       322            add a, #0x99
0589 D4         323            da a
058A F532       324            mov Soak_temp, a
058C B4001C     325       cjne a, #0x00, check_rtime
058F 0205A3     326       ljmp decrement_s_hund   
0592            327   
0592            328       continue_dec_s:
0592 753320     329       mov soak_temp_hund, #0x20
0595 753250     330       mov soak_temp, #0x50
0598 0205AB     331       ljmp check_rtime
059B            332   
059B            333       cont_s_dec:
059B 9410       334       SUBB a, #0x10
059D D4         335       da A
059E F533       336       mov soak_temp_hund, a 
05A0 0205AB     337            ljmp check_rtime
05A3            338   
05A3            339   decrement_s_hund:
05A3 E533       340       mov a, soak_temp_hund
05A5 B40069     341       cjne a , #0x00, cont_dec
05A8 020592     342       ljmp continue_dec_s
05AB            343   
05AB            344   check_rtime:
05AB 200317     345            jb PB3, check_rtemp 
05AE 20050A     346            jb decrement1, Reflow_time_decrement
05B1 E534       347            mov a, Reflow_time
05B3 2401       348            add a, #0x01
05B5 D4         349            da a
05B6 F534       350            mov Reflow_time, a
05B8 0205C5     351            ljmp check_rtemp
05BB            352   
05BB            353   Reflow_time_decrement: 
05BB E534       354            mov a, Reflow_time
05BD 2499       355            add a, #0x99
05BF D4         356            da a
05C0 F534       357            mov Reflow_time, a
05C2 0205C5     358            ljmp check_rtemp
05C5            359   
05C5            360   check_rtemp:
05C5 200459     361            jb PB4, skipp
05C8 200530     362            jb decrement1, Reflow_temp_decrement
05CB E535       363            mov a, Reflow_temp
05CD 2401       364            add a, #0x01
05CF D4         365       da a
05D0 F535       366       mov Reflow_temp, a
05D2 B49903     367            cjne a, #0x99, cont_r
05D5 0205EF     368       ljmp add_hundreds_r
05D8            369   
05D8            370       cont_r:
05D8            371       ;check hundreds
05D8 E53C       372       mov a, reflow_temp_100
05DA B4200F     373       cjne a, #0x20, cont_count ;make sure to check with 20 since the hundreds place value is multiplied by 10
05DD E535       374            mov a, reflow_temp
05DF B4503F     375       cjne a, #0x50, skipp
05E2 7400       376       mov a, #0x00
05E4 F535       377       mov reflow_temp, a
05E6 E53C       378       mov a, reflow_temp_100
05E8 7400       379       mov a, #0x00
05EA F53C       380            mov Reflow_temp_100, a
05EC            381       cont_count:
05EC 020621     382            ljmp skipp
05EF            383   
05EF            384   add_hundreds_r:
05EF E53C       385       mov a, reflow_temp_100
05F1 2410       386       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
05F3 D4         387       da A
05F4 F53C       388       mov reflow_temp_100, A
05F6 E535       389       mov a, Reflow_temp
05F8 0205D8     390       ljmp cont_r
05FB            391   
05FB            392   
05FB            393   Reflow_temp_decrement: 
05FB E535       394            mov a, Reflow_temp
05FD 2499       395            add a, #0x99
05FF D4         396            da a
0600 F535       397            mov Reflow_temp, a
0602 B4001C     398       cjne a, #0x00, skipp
0605 020619     399       ljmp decrement_r_hund
0608            400   
0608            401       continue_dec_r:
0608            402            ;mov a, reflow_temp
0608            403       ;cjne a, #0x00, skipp
0608 753550     404       mov reflow_temp, #0x50
060B 753C20     405       mov reflow_temp_100, #0x20
060E 020621     406       ljmp skipp
0611            407   
0611            408       cont_dec:
0611 9410       409       SUBB a, #0x10
0613 D4         410       da a
0614 F53C       411       mov reflow_temp_100, a
0616 020621     412            ljmp skipp
0619            413   
0619            414       decrement_r_hund:
0619 E53C       415       mov a, reflow_temp_100
061B B400F3     416       cjne a, #0x00, cont_dec
061E 020608     417       ljmp continue_dec_r
0621            418   
0621            419   skipp:
0621 22         420            ret
0622            421   
0622            422   Check_start:
0622 209713     423            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0625 C002       424            push AR2
0627 7A32       424            mov R2, #50
0629 1200DA     424            lcall ?Wait_Milli_Seconds
062C D002       424            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
062E 209707     425            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0631 3097FD     426            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
0634 753001     427            mov STATE, #0x01
0637 22         428            ret
0638            429   
0638            430   smjmp:
0638 020621     431   ljmp skipp
063B            432   
063B            433   wait_for_ti:
063B 3099FD     434       jnb TI, wait_for_ti
063E C299       435       clr TI
0640 22         436       ret
0641            437   
0641            438   display_menu:
0641 C0E0       439            push acc
0643 7407       439            mov a, #7
0645 14         439            dec a
0646 120169     439            lcall ?Set_Cursor_1 ; Select column and row
0649 D0E0       439            pop acc 
064B C000       440            push ar0
064D A831       440            mov r0, Soak_time
064F 12016E     440            lcall ?Display_BCD
0652 D000       440            pop ar0
0654 C0E0       441            push acc
0656 740B       441            mov a, #11
0658 14         441            dec a
0659 120169     441            lcall ?Set_Cursor_1 ; Select column and row
065C D0E0       441            pop acc
065E            441   
065E C000       442            push ar0
0660 A833       442            mov r0, Soak_temp_hund
0662 12016E     442            lcall ?Display_BCD
0665 D000       442            pop ar0
0667 C0E0       443            push acc
0669 740C       443            mov a, #12
066B 14         443            dec a
066C 120169     443            lcall ?Set_Cursor_1 ; Select column and row
066F D0E0       443            pop acc
0671 C000       444            push ar0
0673 A832       444            mov r0, soak_temp
0675 12016E     444            lcall ?Display_BCD
0678 D000       444            pop ar0
067A C0E0       445            push acc
067C 7409       445            mov a, #9
067E 14         445            dec a
067F 120167     445            lcall ?Set_Cursor_2 ; Select column and row
0682 D0E0       445            pop acc
0684 C000       446            push ar0
0686 A834       446            mov r0, Reflow_time
0688 12016E     446            lcall ?Display_BCD
068B D000       446            pop ar0
068D C0E0       447            push acc
068F 740D       447            mov a, #13
0691 14         447            dec a
0692 120167     447            lcall ?Set_Cursor_2 ; Select column and row
0695 D0E0       447            pop acc
0697 C000       448            push ar0
0699 A83C       448            mov r0, reflow_temp_100
069B 12016E     448            lcall ?Display_BCD
069E D000       448            pop ar0
06A0 C0E0       449            push acc
06A2 740E       449            mov a, #14
06A4 14         449            dec a
06A5 120167     449            lcall ?Set_Cursor_2 ; Select column and row
06A8 D0E0       449            pop acc
06AA C000       450            push ar0
06AC A835       450            mov r0, reflow_temp
06AE 12016E     450            lcall ?Display_BCD
06B1 D000       450            pop ar0
06B3 22         451       ret
06B4            452   
06B4            453   display_heating_s:
06B4            454            ;Set_Cursor(1,4)
06B4            455            ;Display_BCD(Soak_temp_hund)
06B4            456            ;set_cursor(1,5)
06B4            457            ;display_bcd(soak_temp)
06B4 C0E0       458            push acc
06B6 740C       458            mov a, #12
06B8 14         458            dec a
06B9 120169     458            lcall ?Set_Cursor_1 ; Select column and row
06BC D0E0       458            pop acc
06BE C000       459            push ar0
06C0 A838       459            mov r0, outside_temp
06C2 12016E     459            lcall ?Display_BCD
06C5 D000       459            pop ar0
06C7 C0E0       460            push acc
06C9 7407       460            mov a, #7
06CB 14         460            dec a
06CC 120167     460            lcall ?Set_Cursor_2 ; Select column and row
06CF D0E0       460            pop acc
06D1 C000       461            push ar0
06D3 A836       461            mov r0, current_temp
06D5 12016E     461            lcall ?Display_BCD
06D8 D000       461            pop ar0
06DA 22         462            ret
06DB            463   
06DB            464   display_heating_r:
06DB C0E0       465            push acc
06DD 7404       465            mov a, #4
06DF 14         465            dec a
06E0 120169     465            lcall ?Set_Cursor_1 ; Select column and row
06E3 D0E0       465            pop acc
06E5 C000       466            push ar0
06E7 A83C       466            mov r0, reflow_temp_100
06E9 12016E     466            lcall ?Display_BCD
06EC D000       466            pop ar0
06EE C0E0       467            push acc
06F0 7405       467            mov a, #5
06F2 14         467            dec a
06F3 120169     467            lcall ?Set_Cursor_1 ; Select column and row
06F6 D0E0       467            pop acc
06F8 C000       468            push ar0
06FA A835       468            mov r0, reflow_temp
06FC 12016E     468            lcall ?Display_BCD
06FF D000       468            pop ar0
0701 C0E0       469            push acc
0703 740C       469            mov a, #12
0705 14         469            dec a
0706 120169     469            lcall ?Set_Cursor_1 ; Select column and row
0709 D0E0       469            pop acc
070B C000       470            push ar0
070D A838       470            mov r0, outside_temp
070F 12016E     470            lcall ?Display_BCD
0712 D000       470            pop ar0
0714 C0E0       471            push acc
0716 7407       471            mov a, #7
0718 14         471            dec a
0719 120167     471            lcall ?Set_Cursor_2 ; Select column and row
071C D0E0       471            pop acc
071E C000       472            push ar0
0720 A836       472            mov r0, current_temp
0722 12016E     472            lcall ?Display_BCD
0725 D000       472            pop ar0
0727 22         473            ret
0728            474   
0728            475   display_blank:
0728 C0E0       476            push acc
072A 7401       476            mov a, #1
072C 14         476            dec a
072D 120169     476            lcall ?Set_Cursor_1 ; Select column and row
0730 D0E0       476            pop acc
0732 C083       477            push dph
0734 C082       477            push dpl
0736 C0E0       477            push acc
0738 900065     477            mov dptr, #blank
073B 12015C     477            lcall ?Send_Constant_String
073E D0E0       477            pop acc
0740 D082       477            pop dpl
0742 D083       477            pop dph
0744 C0E0       478            push acc
0746 7401       478            mov a, #1
0748 14         478            dec a
0749 120167     478            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       478            pop acc
074E C083       479            push dph
0750 C082       479            push dpl
0752 C0E0       479            push acc
0754 900065     479            mov dptr, #blank
0757 12015C     479            lcall ?Send_Constant_String
075A D0E0       479            pop acc
075C D082       479            pop dpl
075E D083       479            pop dph
0760 22         480            ret
0761            481   
0761            482   Display_formated_BCD:
0761 C0E0       483            push acc
0763 740C       483            mov a, #12
0765 14         483            dec a
0766 120169     483            lcall ?Set_Cursor_1 ; Select column and row
0769 D0E0       483            pop acc
076B C000       484            push ar0
076D A84B       484            mov r0, bcd+2
076F 12016E     484            lcall ?Display_BCD
0772 D000       484            pop ar0
0774 C0E0       485            push acc
0776 742E       485            mov a, #'.'
0778 12011F     485            lcall ?WriteData
077B D0E0       485            pop acc
077D C000       486            push ar0
077F A84A       486            mov r0, bcd+1
0781 12016E     486            lcall ?Display_BCD
0784 D000       486            pop ar0
0786 22         487            ret
0787            488   
0787            489   conv_to_bcd_high:
0787 C4         490       swap a
0788 540F       491       anl a, #0x0f
078A F9         492       mov R1, a
078B 22         493            ret
078C            494   
078C            495   conv_to_bcd_low:
078C 540F       496       anl a, #0x0f
078E F8         497       mov R0, A
078F 22         498            ret
0790            499   
0790            500   conv_to_bcd:
0790 883D       501            mov x+0, R0
0792 893E       502            mov x+1, R1
0794 753F00     503            mov x+2, #0
0797 754000     504            mov x+3, #0
079A 1201C2     505       lcall hex2bcd
079D 22         506            ret
079E            507   
079E            508   Outside_tmp:
079E 53E8F0     509       anl ADCCON0, #0xF0
07A1 43E807     510            orl ADCCON0, #0x07 ; Select channel 7 
07A4            511   
07A4 C2EF       512       clr ADCF
07A6 D2EE       513       setb ADCS
07A8 30EFFD     514       jnb ADCF, $
07AB            515   
07AB E5C3       516       mov a, ADCRH
07AD C4         517       swap a
07AE C0E0       518       push acc
07B0 540F       519       anl a, #0x0f
07B2 F9         520       mov R1, a
07B3 D0E0       521       pop acc
07B5 54F0       522       anl a, #0xf0
07B7 45C2       523       orl a, ADCRL
07B9 F8         524       mov R0, A
07BA            525       
07BA            526       ; Convert to voltage
07BA 883D       527            mov x+0, R0
07BC 893E       528            mov x+1, R1
07BE 753F00     529            mov x+2, #0
07C1 754000     530            mov x+3, #0
07C4 75417C     531            mov y+0, #low (50300 % 0x10000) 
07C7 7542C4     531            mov y+1, #high(50300 % 0x10000) 
07CA 754300     531            mov y+2, #low (50300 / 0x10000) 
07CD 754400     531            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07D0 12033C     532            lcall mul32
07D3 7541FF     533            mov y+0, #low (4095 % 0x10000) 
07D6 75420F     533            mov y+1, #high(4095 % 0x10000) 
07D9 754300     533            mov y+2, #low (4095 / 0x10000) 
07DC 754400     533            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07DF 1203C9     534            lcall div32
07E2 7541A4     535            mov y+0, #low (27300 % 0x10000) 
07E5 75426A     535            mov y+1, #high(27300 % 0x10000) 
07E8 754300     535            mov y+2, #low (27300 / 0x10000) 
07EB 754400     535            mov y+3, #high(27300 / 0x10000) 
07EE 1202A8     536            lcall sub32
07F1 754164     537            mov y+0, #low (100 % 0x10000) 
07F4 754200     537            mov y+1, #high(100 % 0x10000) 
07F7 754300     537            mov y+2, #low (100 / 0x10000) 
07FA 754400     537            mov y+3, #high(100 / 0x10000) 
07FD 12033C     538            lcall mul32
0800            539       ;save outside temp to z to later add onto the oven temp
0800 853D45     540       mov z+0, x+0
0803 853E46     541       mov z+1, x+1
0806 853F47     542       mov z+2, x+2
0809 854048     543       mov z+3, x+3 
080C 1201C2     544       lcall hex2bcd
080F 120761     545       lcall Display_formated_BCD
0812            546            
0812 22         547            ret
0813            548   
0813            549   oven_tmp:
0813 53E8F0     550       anl  ADCCON0, #0xF0  
0816 43E804     551       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0819            552   
0819 C2EF       553       clr ADCF
081B D2EE       554       setb ADCS
081D 30EFFD     555       jnb ADCF, $
0820            556   
0820 E5C3       557       mov a, ADCRH
0822 C4         558       swap a
0823 C0E0       559       push acc
0825 540F       560       anl a, #0x0f
0827 F9         561       mov R1, a
0828 D0E0       562       pop acc
082A 54F0       563       anl a, #0xf0
082C 45C2       564       orl a, ADCRL
082E F8         565       mov R0, A
082F            566       
082F            567       ; Convert to voltage
082F 883D       568            mov x+0, R0
0831 893E       569            mov x+1, R1
0833 753F00     570            mov x+2, #0
0836 754000     571            mov x+3, #0
0839 75417C     572            mov y+0, #low (50300 % 0x10000) 
083C 7542C4     572            mov y+1, #high(50300 % 0x10000) 
083F 754300     572            mov y+2, #low (50300 / 0x10000) 
0842 754400     572            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0845 12033C     573            lcall mul32
0848 7541FF     574            mov y+0, #low (4095 % 0x10000) 
084B 75420F     574            mov y+1, #high(4095 % 0x10000) 
084E 754300     574            mov y+2, #low (4095 / 0x10000) 
0851 754400     574            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0854 1203C9     575            lcall div32
0857            576   
0857            577            ;vout of opamp should now be in x
0857            578       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0857            579       ;first calculate vout*R2:
0857 7541BD     580            mov y+0, #low (1469 % 0x10000) 
085A 754205     580            mov y+1, #high(1469 % 0x10000) 
085D 754300     580            mov y+2, #low (1469 / 0x10000) 
0860 754400     580            mov y+3, #high(1469 / 0x10000) 
0863 12033C     581       lcall mul32
0866            582       ;now vout*R2 ohm is in x
0866            583       ;next we will take 461 650V and divide
0866 754152     584            mov y+0, #low (461650 % 0x10000) 
0869 75420B     584            mov y+1, #high(461650 % 0x10000) 
086C 754307     584            mov y+2, #low (461650 / 0x10000) 
086F 754400     584            mov y+3, #high(461650 / 0x10000)  
0872 1203C9     585       lcall div32
0875            586       ;multiply by 100k and then divide by 41 to cancel units
0875 754140     587            mov y+0, #low (1000000 % 0x10000) 
0878 754242     587            mov y+1, #high(1000000 % 0x10000) 
087B 75430F     587            mov y+2, #low (1000000 / 0x10000) 
087E 754400     587            mov y+3, #high(1000000 / 0x10000) 
0881 12033C     588       lcall mul32
0884 754129     589            mov y+0, #low (41 % 0x10000) 
0887 754200     589            mov y+1, #high(41 % 0x10000) 
088A 754300     589            mov y+2, #low (41 / 0x10000) 
088D 754400     589            mov y+3, #high(41 / 0x10000) 
0890 1203C9     590       lcall div32
0893            591       ;move the outside temp to y and add
0893 854541     592       mov y+0, z+0
0896 854642     593       mov y+1, z+1
0899 854743     594       mov y+2, z+2
089C 854844     595       mov y+3, z+3
089F 120287     596       lcall add32
08A2 1201C2     597       lcall hex2bcd
08A5 1208AF     598       lcall display_oven_tmp
08A8 854B36     599       mov current_temp, bcd+2
08AB 854C37     600       mov current_temp_hund, bcd+3
08AE            601            ;lcall clearx
08AE            602            ;mov x, current_temp_hund
08AE            603            ;load_y(10)
08AE            604            ;lcall div32
08AE            605            ;mov current_temp_hund, x
08AE            606            
08AE            607   
08AE 22         608   ret
08AF            609   
08AF            610   display_oven_tmp:
08AF C0E0       611            push acc
08B1 7406       611            mov a, #6
08B3 14         611            dec a
08B4 120167     611            lcall ?Set_Cursor_2 ; Select column and row
08B7 D0E0       611            pop acc
08B9 C000       612            push ar0
08BB A84C       612            mov r0, bcd+3
08BD 12016E     612            lcall ?Display_BCD
08C0 D000       612            pop ar0
08C2 C000       613            push ar0
08C4 A84B       613            mov r0, bcd+2
08C6 12016E     613            lcall ?Display_BCD
08C9 D000       613            pop ar0
08CB C0E0       614            push acc
08CD 742E       614            mov a, #'.'
08CF 12011F     614            lcall ?WriteData
08D2 D0E0       614            pop acc
08D4 C000       615            push ar0
08D6 A84A       615            mov r0, bcd+1
08D8 12016E     615            lcall ?Display_BCD
08DB D000       615            pop ar0
08DD            616            
08DD C0E0       617            push acc
08DF 740F       617            mov a, #15
08E1 14         617            dec a
08E2 120167     617            lcall ?Set_Cursor_2 ; Select column and row
08E5 D0E0       617            pop acc
08E7 C000       618            push ar0
08E9 A833       618            mov r0, soak_temp_hund
08EB 12016E     618            lcall ?Display_BCD
08EE D000       618            pop ar0
08F0 C0E0       619            push acc
08F2 740D       619            mov a, #13
08F4 14         619            dec a
08F5 120167     619            lcall ?Set_Cursor_2 ; Select column and row
08F8 D0E0       619            pop acc
08FA C000       620            push ar0
08FC A837       620            mov r0, current_temp_hund
08FE 12016E     620            lcall ?Display_BCD
0901 D000       620            pop ar0
0903            621            ;display_bcd(bcd+3)
0903            622            ;Display_BCD(bcd+2)
0903            623            ;Display_char(#'.')
0903            624            ;Display_BCD(bcd+1)
0903 22         625            ret
0904            626   
0904            627   skipp1:
0904 22         628            ret
0905            629   clearx:
0905 753D00     630            mov x+0, #0x00
0908 753E00     631            mov x+1, #0x00
090B 753F00     632            mov x+2, #0x00
090E 754000     633            mov x+3, #0x00
0911 22         634            ret 
0912            635   
0912            636   check_temps:
0912 E536       637            mov a, current_temp 
0914 9532       638            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0916            639            ;soak temp is 10 for 100, current temp is 1 for 100 
0916 40EC       640            jc skipp1 ; skip if current_temp < soak_temp (carry bit set)
0918 E537       641            mov a, current_temp_hund
091A B53303     642            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
091D 753002     643            mov STATE, #0x02
0920            644   next2:
0920 22         645            ret
0921            646   
0921            647   check_currenttemp:
0921 E536       648            mov a, current_temp
0923 9460       649            subb a, #0x60
0925 40DD       650            jc skipp1
0927 D208       651            setb temp_flag ; set safety flag if temp >=60
0929 22         652            ret
092A            653   
092A            654   safety_feature:
092A E539       655            mov a, seconds
092C 943C       656            subb a, #0x3C
092E 40D4       657            jc skipp1
0930 200841     658            jb temp_flag, skipp2
0933 120728     659            lcall display_blank
0936 753B00     660            mov pwm, #0
0939 C0E0       661            push acc
093B 7401       661            mov a, #1
093D 14         661            dec a
093E 120169     661            lcall ?Set_Cursor_1 ; Select column and row
0941 D0E0       661            pop acc
0943 C083       662            push dph
0945 C082       662            push dpl
0947 C0E0       662            push acc
0949 900076     662            mov dptr, #safety_message
094C 12015C     662            lcall ?Send_Constant_String
094F D0E0       662            pop acc
0951 D082       662            pop dpl
0953 D083       662            pop dph
0955 C0E0       663            push acc
0957 7401       663            mov a, #1
0959 14         663            dec a
095A 120167     663            lcall ?Set_Cursor_2 ; Select column and row
095D D0E0       663            pop acc
095F C083       664            push dph
0961 C082       664            push dpl
0963 C0E0       664            push acc
0965 90007E     664            mov dptr, #safety_message1
0968 12015C     664            lcall ?Send_Constant_String
096B D0E0       664            pop acc
096D D082       664            pop dpl
096F D083       664            pop dph
0971            665   
0971            666   safety_feature_loop:
0971 020971     667            ljmp safety_feature_loop
0974            668   
0974            669   skipp2:
0974 22         670            ret
0975            671   
0975            672   ; checks secs for state 2 -> 3
0975            673   check_secs_s2:
0975 853149     674            mov bcd, soak_time ; soak_time stored as bcd
0978 12024B     675            lcall bcd2hex
097B E53D       676       mov a, x
097D B53903     677       cjne a, seconds, skip_check_secs_s2
0980            678            ;lcall debug_display
0980 753003     679       mov state, #3
0983            680   skip_check_secs_s2:
0983 22         681       ret
0984            682   
0984            683   ; checks temp for state 3 -> 4
0984            684   check_temps_s3:
0984 E536       685            mov a, current_temp 
0986 9535       686            subb a, Reflow_temp
0988 40EA       687            jc skipp2
098A E537       688            mov a, current_temp_hund
098C B53C00     689            cjne a, reflow_temp_100, nxt2
098F            690            nxt2:
098F 40E3       691            jc skipp2
0991 753004     692   mov STATe, #0x04
0994 22         693   ret
0995            694   
0995            695   ; checks secs for state 4 -> 5
0995            696   check_secs_s4:
0995 853449     697            mov bcd, reflow_time ; reflow_time stored as bcd
0998 12024B     698            lcall bcd2hex
099B E53D       699       mov a, x
099D B53903     700       cjne a, seconds, skip_check_secs_s4
09A0 753005     701       mov state, #5
09A3            702   skip_check_secs_s4:
09A3 22         703       ret
09A4            704   
09A4            705   ; checks temp for state 5 -> 0
09A4            706   check_temp_s5:
09A4 E536       707       mov a, current_temp      
09A6 75F03C     708       mov b, #60                 
09A9 B5F003     709       cjne a, b, check_high       
09AC 0209B7     710       ljmp skip_s5_to_s0         
09AF            711   check_high:
09AF 5480       712       anl a, #0x80               ; mask msb (bit 7)
09B1 6004       713       jz skip_s5_to_s0           ; if msb = 0 skip to the end
09B3 753000     714       mov STATE, #0x00           ; set state to 0 (finished)
09B6 22         715       ret                        ; return
09B7            716   skip_s5_to_s0:
09B7 22         717       ret                        ; return without state change
09B8            718   
09B8            719   debug_display:
09B8 C0E0       720            push acc
09BA 7408       720            mov a, #8
09BC 14         720            dec a
09BD 120169     720            lcall ?Set_Cursor_1 ; Select column and row
09C0 D0E0       720            pop acc
09C2 C000       721            push ar0
09C4 A831       721            mov r0, soak_time
09C6 12016E     721            lcall ?Display_BCD
09C9 D000       721            pop ar0
09CB C0E0       722            push acc
09CD 7408       722            mov a, #8
09CF 14         722            dec a
09D0 120167     722            lcall ?Set_Cursor_2 ; Select column and row
09D3 D0E0       722            pop acc
09D5 C000       723            push ar0
09D7 A839       723            mov r0, seconds
09D9 12016E     723            lcall ?Display_BCD
09DC D000       723            pop ar0
09DE C0E0       724            push acc
09E0 740F       724            mov a, #15
09E2 14         724            dec a
09E3 120167     724            lcall ?Set_Cursor_2 ; Select column and row
09E6 D0E0       724            pop acc
09E8 C000       725            push ar0
09EA A830       725            mov r0, STATE
09EC 12016E     725            lcall ?Display_BCD
09EF D000       725            pop ar0
09F1 22         726   ret
09F2            727   
09F2            728   main:
09F2 75817F     729            mov sp, #0x7f
09F5 120432     730            lcall Init_All
09F8 120129     731       lcall LCD_4BIT
09FB 1204AE     732            lcall Timer2_ISR
09FE            733       
09FE            734        ; initial messages in LCD
09FE 753000     735       mov STATE, #0x00
0A01 753100     736       mov Soak_time, #0x00
0A04 753200     737       mov Soak_temp, #0x00
0A07 753300     738       mov soak_temp_hund, #0x00
0A0A 753400     739       mov Reflow_time, #0x00
0A0D 753500     740       mov Reflow_temp, #0x00
0A10 753600     741       mov current_temp, #0x00
0A13 753700     742       mov current_temp_hund, #0x00
0A16 753900     743       mov seconds, #0x00
0A19 753A00     744       mov pwm_counter, #0x00
0A1C 753B00     745       mov pwm, #0x00
0A1F 753C00     746       mov reflow_temp_100, #0x00
0A22 C205       747       clr decrement1
0A24 C206       748       clr s_flag 
0A26            749            
0A26            750   Forever:
0A26 120728     751            lcall display_blank
0A29            752   
0A29            753   state_0:
0A29 C0E0       754            push acc
0A2B 7401       754            mov a, #1
0A2D 14         754            dec a
0A2E 120169     754            lcall ?Set_Cursor_1 ; Select column and row
0A31 D0E0       754            pop acc
0A33 C083       755            push dph
0A35 C082       755            push dpl
0A37 C0E0       755            push acc
0A39 90002E     755            mov dptr, #soak_param
0A3C 12015C     755            lcall ?Send_Constant_String
0A3F D0E0       755            pop acc
0A41 D082       755            pop dpl
0A43 D083       755            pop dph
0A45 C0E0       756            push acc
0A47 7401       756            mov a, #1
0A49 14         756            dec a
0A4A 120167     756            lcall ?Set_Cursor_2 ; Select column and row
0A4D D0E0       756            pop acc
0A4F C083       757            push dph
0A51 C082       757            push dpl
0A53 C0E0       757            push acc
0A55 90003D     757            mov dptr, #reflow_param
0A58 12015C     757            lcall ?Send_Constant_String
0A5B D0E0       757            pop acc
0A5D D082       757            pop dpl
0A5F D083       757            pop dph
0A61            758   
0A61            759   state_0_loop:
0A61 E530       760            mov a, STATE
0A63 753B64     761           mov pwm, #100
0A66 B4000F     762            cjne a, #0, state_1
0A69 1204CF     763            lcall LCD_PB
0A6C 12052D     764            lcall check_decrement
0A6F 120641     765            lcall display_menu
0A72 120622     766            lcall Check_start
0A75 020A61     767            ljmp state_0_loop
0A78            768   
0A78            769   state_1: 
0A78 120728     770            lcall display_blank
0A7B 753900     771            mov seconds, #0x00
0A7E C0E0       772            push acc
0A80 7401       772            mov a, #1
0A82 14         772            dec a
0A83 120169     772            lcall ?Set_Cursor_1 ; Select column and row
0A86 D0E0       772            pop acc
0A88 C083       773            push dph
0A8A C082       773            push dpl
0A8C C0E0       773            push acc
0A8E 90004E     773            mov dptr, #heating_to_s
0A91 12015C     773            lcall ?Send_Constant_String
0A94 D0E0       773            pop acc
0A96 D082       773            pop dpl
0A98 D083       773            pop dph
0A9A C0E0       774            push acc
0A9C 7401       774            mov a, #1
0A9E 14         774            dec a
0A9F 120167     774            lcall ?Set_Cursor_2 ; Select column and row
0AA2 D0E0       774            pop acc
0AA4 C083       775            push dph
0AA6 C082       775            push dpl
0AA8 C0E0       775            push acc
0AAA 90005E     775            mov dptr, #heating_temp
0AAD 12015C     775            lcall ?Send_Constant_String
0AB0 D0E0       775            pop acc
0AB2 D082       775            pop dpl
0AB4 D083       775            pop dph
0AB6            776   
0AB6 C0E0       777            push acc
0AB8 7404       777            mov a, #4
0ABA 14         777            dec a
0ABB 120169     777            lcall ?Set_Cursor_1 ; Select column and row
0ABE D0E0       777            pop acc
0AC0 C000       778            push ar0
0AC2 A833       778            mov r0, Soak_temp_hund
0AC4 12016E     778            lcall ?Display_BCD
0AC7 D000       778            pop ar0
0AC9 C0E0       779            push acc
0ACB 7405       779            mov a, #5
0ACD 14         779            dec a
0ACE 120169     779            lcall ?Set_Cursor_1 ; Select column and row
0AD1 D0E0       779            pop acc
0AD3 C000       780            push ar0
0AD5 A832       780            mov r0, soak_temp
0AD7 12016E     780            lcall ?Display_BCD
0ADA D000       780            pop ar0
0ADC            781   
0ADC 120905     782            lcall clearx
0ADF 85333D     783            mov x, soak_temp_hund
0AE2 75410A     784            mov y+0, #low (10 % 0x10000) 
0AE5 754200     784            mov y+1, #high(10 % 0x10000) 
0AE8 754300     784            mov y+2, #low (10 / 0x10000) 
0AEB 754400     784            mov y+3, #high(10 / 0x10000) 
0AEE 1203C9     785            lcall div32
0AF1 853D33     786            mov soak_temp_hund, x
0AF4            787   state_1_loop:
0AF4 E530       788            mov a, STATE
0AF6 B4011D     789            cjne a, #1, state_2
0AF9 1206B4     790            lcall display_heating_s
0AFC 753B00     791            mov pwm, #0
0AFF 12079E     792            lcall outside_tmp
0B02 120813     793            lcall oven_tmp
0B05 120921     794            lcall check_currenttemp
0B08 12092A     795            lcall safety_feature
0B0B 120912     796            lcall check_temps
0B0E 7AFA       797            mov R2, #250
0B10 1204A8     798            lcall waitms
0B13 020AF4     799            ljmp state_1_loop
0B16            800   
0B16            801   state_2:
0B16 120728     802            lcall display_blank 
0B19 753900     803            mov seconds, #0x00
0B1C C0E0       804            push acc
0B1E 7401       804            mov a, #1
0B20 14         804            dec a
0B21 120169     804            lcall ?Set_Cursor_1 ; Select column and row
0B24 D0E0       804            pop acc
0B26 C083       805            push dph
0B28 C082       805            push dpl
0B2A C0E0       805            push acc
0B2C 90008C     805            mov dptr, #soaking
0B2F 12015C     805            lcall ?Send_Constant_String
0B32 D0E0       805            pop acc
0B34 D082       805            pop dpl
0B36 D083       805            pop dph
0B38 C0E0       806            push acc
0B3A 7401       806            mov a, #1
0B3C 14         806            dec a
0B3D 120167     806            lcall ?Set_Cursor_2 ; Select column and row
0B40 D0E0       806            pop acc
0B42 C083       807            push dph
0B44 C082       807            push dpl
0B46 C0E0       807            push acc
0B48 9000A7     807            mov dptr, #time
0B4B 12015C     807            lcall ?Send_Constant_String
0B4E D0E0       807            pop acc
0B50 D082       807            pop dpl
0B52 D083       807            pop dph
0B54 C0E0       808            push acc
0B56 740E       808            mov a, #14
0B58 14         808            dec a
0B59 120169     808            lcall ?Set_Cursor_1 ; Select column and row
0B5C D0E0       808            pop acc
0B5E C000       809            push ar0
0B60 A831       809            mov r0, soak_time
0B62 12016E     809            lcall ?Display_BCD
0B65 D000       809            pop ar0
0B67            810   
0B67            811   state_2_loop: 
0B67 E530       812            mov a, STATE
0B69 B40225     813       cjne a, #2, state_3
0B6C C0E0       814            push acc
0B6E 7406       814            mov a, #6
0B70 14         814            dec a
0B71 120167     814            lcall ?Set_Cursor_2 ; Select column and row
0B74 D0E0       814            pop acc
0B76 120905     815            lcall clearx
0B79 85393D     816            mov x, seconds 
0B7C 1201C2     817            lcall hex2bcd 
0B7F C000       818            push ar0
0B81 A849       818            mov r0, bcd
0B83 12016E     818            lcall ?Display_BCD
0B86 D000       818            pop ar0
0B88 753B14     819            mov pwm, #20
0B8B 120975     820            lcall check_secs_s2
0B8E 020B67     821            ljmp state_2_loop
0B91            822   
0B91            823   state_3:
0B91 120728     824            lcall display_blank
0B94 C0E0       825            push acc
0B96 7401       825            mov a, #1
0B98 14         825            dec a
0B99 120169     825            lcall ?Set_Cursor_1 ; Select column and row
0B9C D0E0       825            pop acc
0B9E C083       826            push dph
0BA0 C082       826            push dpl
0BA2 C0E0       826            push acc
0BA4 9000B0     826            mov dptr, #heating_to_r
0BA7 12015C     826            lcall ?Send_Constant_String
0BAA D0E0       826            pop acc
0BAC D082       826            pop dpl
0BAE D083       826            pop dph
0BB0 C0E0       827            push acc
0BB2 7401       827            mov a, #1
0BB4 14         827            dec a
0BB5 120167     827            lcall ?Set_Cursor_2 ; Select column and row
0BB8 D0E0       827            pop acc
0BBA C083       828            push dph
0BBC C082       828            push dpl
0BBE C0E0       828            push acc
0BC0 90005E     828            mov dptr, #heating_temp
0BC3 12015C     828            lcall ?Send_Constant_String
0BC6 D0E0       828            pop acc
0BC8 D082       828            pop dpl
0BCA D083       828            pop dph
0BCC            829   
0BCC            830   state_3_loop:
0BCC E530       831            mov a, STATE
0BCE B40317     832            cjne a, #3, state_4
0BD1 1206DB     833            lcall display_heating_r
0BD4 753B00     834            mov pwm, #0
0BD7 12079E     835            lcall outside_tmp
0BDA 120813     836            lcall oven_tmp
0BDD 120984     837            lcall check_temps_s3
0BE0 7AFA       838            mov R2, #250
0BE2 1204A8     839            lcall waitms
0BE5 020BCC     840            ljmp state_3_loop
0BE8            841   
0BE8            842   state_4:
0BE8 120728     843            lcall display_blank 
0BEB 753900     844            mov seconds, #0x00
0BEE C0E0       845            push acc
0BF0 7401       845            mov a, #1
0BF2 14         845            dec a
0BF3 120169     845            lcall ?Set_Cursor_1 ; Select column and row
0BF6 D0E0       845            pop acc
0BF8 C083       846            push dph
0BFA C082       846            push dpl
0BFC C0E0       846            push acc
0BFE 90009A     846            mov dptr, #reflow
0C01 12015C     846            lcall ?Send_Constant_String
0C04 D0E0       846            pop acc
0C06 D082       846            pop dpl
0C08 D083       846            pop dph
0C0A C0E0       847            push acc
0C0C 7401       847            mov a, #1
0C0E 14         847            dec a
0C0F 120167     847            lcall ?Set_Cursor_2 ; Select column and row
0C12 D0E0       847            pop acc
0C14 C083       848            push dph
0C16 C082       848            push dpl
0C18 C0E0       848            push acc
0C1A 9000A7     848            mov dptr, #time
0C1D 12015C     848            lcall ?Send_Constant_String
0C20 D0E0       848            pop acc
0C22 D082       848            pop dpl
0C24 D083       848            pop dph
0C26 C0E0       849            push acc
0C28 740E       849            mov a, #14
0C2A 14         849            dec a
0C2B 120169     849            lcall ?Set_Cursor_1 ; Select column and row
0C2E D0E0       849            pop acc
0C30 C000       850            push ar0
0C32 A834       850            mov r0, reflow_time
0C34 12016E     850            lcall ?Display_BCD
0C37 D000       850            pop ar0
0C39            851   
0C39            852   state_4_loop:
0C39 E530       853       mov a, STATE
0C3B B40422     854       cjne a, #4, state_5
0C3E C0E0       855            push acc
0C40 7406       855            mov a, #6
0C42 14         855            dec a
0C43 120167     855            lcall ?Set_Cursor_2 ; Select column and row
0C46 D0E0       855            pop acc
0C48 85393D     856       mov x, seconds
0C4B 1201C2     857       lcall hex2bcd
0C4E C000       858            push ar0
0C50 A849       858            mov r0, bcd
0C52 12016E     858            lcall ?Display_BCD
0C55 D000       858            pop ar0
0C57 753B14     859       mov pwm, #20
0C5A 120995     860       lcall check_secs_s4
0C5D 020C39     861       ljmp state_4_loop
0C60            862   
0C60            863   state_5:
0C60 120728     864       lcall display_blank
0C63 C0E0       865            push acc
0C65 7401       865            mov a, #1
0C67 14         865            dec a
0C68 120169     865            lcall ?Set_Cursor_1 ; Select column and row
0C6B D0E0       865            pop acc
0C6D C083       866            push dph
0C6F C082       866            push dpl
0C71 C0E0       866            push acc
0C73 9000C0     866            mov dptr, #cooling
0C76 12015C     866            lcall ?Send_Constant_String
0C79 D0E0       866            pop acc
0C7B D082       866            pop dpl
0C7D D083       866            pop dph
0C7F C0E0       867            push acc
0C81 7401       867            mov a, #1
0C83 14         867            dec a
0C84 120167     867            lcall ?Set_Cursor_2 ; Select column and row
0C87 D0E0       867            pop acc
0C89 C083       868            push dph
0C8B C082       868            push dpl
0C8D C0E0       868            push acc
0C8F 90005E     868            mov dptr, #heating_temp
0C92 12015C     868            lcall ?Send_Constant_String
0C95 D0E0       868            pop acc
0C97 D082       868            pop dpl
0C99 D083       868            pop dph
0C9B            869       
0C9B            870   state_5_loop:
0C9B E530       871            mov a, STATE
0C9D B40527     872            cjne a, #5, state_0_jump
0CA0 753B64     873            mov pwm, #100
0CA3 C0E0       874            push acc
0CA5 7407       874            mov a, #7
0CA7 14         874            dec a
0CA8 120167     874            lcall ?Set_Cursor_2 ; Select column and row
0CAB D0E0       874            pop acc
0CAD C000       875            push ar0
0CAF A836       875            mov r0, current_temp
0CB1 12016E     875            lcall ?Display_BCD
0CB4 D000       875            pop ar0
0CB6 12079E     876            lcall outside_tmp
0CB9 120813     877            lcall oven_tmp
0CBC 1209A4     878            lcall check_temp_s5
0CBF 7AFA       879            mov R2, #250
0CC1 1204A8     880            lcall waitms
0CC4 020C9B     881            ljmp state_5_loop
0CC7            882   
0CC7            883   state_0_jump:
0CC7 020A29     884            ljmp state_0
0CCA            885   
0CCA            886   END
