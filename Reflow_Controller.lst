0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             24   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             25   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             26   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             27   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             28   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             29   
0000             30   ORG 0x0000
0000 020FB1      31            ljmp main
0003             32   ; Timer/Counter 0 overflow interrupt vector
000B             33   org 0x000B
000B 0204CA      34            ljmp Timer0_ISR
0023             35   org 0x0023
0023 32          36            reti
0024             37            ; Timer/Counter 2 overflow interrupt vector
002B             38   org 0x002B
002B 0204D7      39            ljmp Timer2_ISR
002E             40   
002E             41   START_BUTTON  equ P1.7
002E             42   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             43   CONVERT equ P1.6
002E             44   SOUND_OUT equ P1.2
002E             45   MUTE_BUTTON equ P3.0
002E             46   
002E             47   
002E             48   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    49   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    50   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A20    51   heating_to_s:  db   'Ts:   C To:   C', 0
     20204320
     546F3A20
     20204300
005E 54656D70    52   heating_temp:db    'Temp:', 0
     3A00
0064 20202020    53   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0075 4552524F    54   safety_message:db  'ERROR: ', 0
     523A2000
007D 43616E74    55   safety_message1:db  'Cant Read Temp',0
     20526561
     64205465
     6D7000
008C 536F616B    56   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    57   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    58   time:db            'Time:  s',0
     3A202073
     00
00B0 54723A20    59   heating_to_r:db    'Tr:   C To:   C', 0
     20204320
     546F3A20
     20204300
00C0 436F6F6C    60   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0 446F6E65    61   done:db            'Done',0
     00
00D5 506C7320    62   ready:db           'Pls Remove',0
     52656D6F
     766500
00E0 4300        63   celsius:db         'C',0
00E2 4600        64   fahrenheit:db      'F',0
00E4 4C00        65   low_1:db             'L',0
00E6 4800        66   high_1:db            'H',0
00E8 4700        67   good:db            'G',0
00EA 2000        68   blank_unit:db      ' ',0
00EC             69   
00EC             70   cseg
00EC             71   ; These 'equ' must match the hardware wiring
00EC             72   LCD_RS equ P1.3
00EC             73   LCD_E  equ P1.4
00EC             74   LCD_D4 equ P0.0
00EC             75   LCD_D5 equ P0.1
00EC             76   LCD_D6 equ P0.2
00EC             77   LCD_D7 equ P0.3
00EC             78   ;ADC_pn equ P1.1
00EC             79   
00EC             80   
                 82   	$LIST
01DE             84   
0030             85   DSEG at 30h
0030             86   STATE: ds 1
0031             87   Soak_time: ds 1
0032             88   Soak_temp: ds 1
0033             89   soak_temp_hund: ds 1
0034             90   Reflow_time: ds 1
0035             91   Reflow_temp: ds 1
0036             92   current_temp: ds 1
0037             93   current_temp_hund: ds 1
0038             94   outside_temp: ds 1
0039             95   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             96   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             97   pwm: ds 1 ; pwm percentage
003C             98   reflow_temp_100:ds 1
003D             99   x: ds 4
0041            100   y: ds 4
0045            101   z: ds 4
0049            102   bcd: ds 5
004E            103   
004E            104   
0000            105   BSEG
0000            106   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000            107   PB0: dbit 1
0001            108   PB1: dbit 1
0002            109   PB2: dbit 1
0003            110   PB3: dbit 1
0004            111   PB4: dbit 1
0005            112   decrement1: dbit 1
0006            113   s_flag: dbit 1 ; set to 1 every time a second has passed
0007            114   mf: dbit 1
0008            115   temp_flag: dbit 1
0009            116   fahrenheit_flag: dbit 1
000A            117   mute_flag: dbit 1
000B            118   
                546   $LIST
                120   $LIST
044E            122   
044E            123   CSEG
044E            124   
044E            125   Init_All:
044E            126            ; Configure all the pins for biderectional I/O
044E 75AC00     127            mov     P3M1, #0x00
0451 75AD00     128            mov     P3M2, #0x00
0454 75B300     129            mov     P1M1, #0x00
0457 75B400     130            mov     P1M2, #0x00
045A 75B100     131            mov     P0M1, #0x00
045D 75B200     132            mov     P0M2, #0x00
0460            133            
0460 438E10     134            orl     CKCON, #0x10 ; CLK is the input for timer 1
0463 438780     135            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0466 759852     136            mov     SCON, #0x52
0469 53C4DF     137            anl     T3CON, #0b11011111
046C 53890F     138            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
046F 438920     139            orl     TMOD, #0x20 ; Timer 1 Mode 2
0472 758DF7     140            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0475 D28E       141            setb TR1
0477            142            
0477            143            ; Using timer 0 for delay functions.  Initialize here:
0477 C28C       144            clr     TR0 ; Stop timer 0
0479 438E08     145            orl     CKCON,#0x08 ; CLK is the input for timer 0
047C 5389F0     146            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
047F 438901     147            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0482            148   
0482            149            ; Initialize timer 2 for periodic interrupts
0482 75C800     150            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
0485 75CDD7     151            mov TH2, #high(TIMER2_RELOAD)
0488 75CC79     152            mov TL2, #low(TIMER2_RELOAD)
048B            153            ; Set the reload value
048B 75C9A0     154            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
048E 75CBD7     155            mov RCMP2H, #high(TIMER2_RELOAD)
0491 75CA79     156            mov RCMP2L, #low(TIMER2_RELOAD)
0494            157            ; Init the free running 10 ms counter to zero
0494 753A00     158            mov pwm_counter, #0
0497            159            ; Enable the timer and interrupts
0497 439B80     160            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
049A D2CA       161            setb TR2 ; Enable timer 2
049C D2AF       162            setb EA ; Enable global interrupts
049E            163   
049E            164            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
049E 43B302     165            orl     P1M1, #0b00000010
04A1 53B4FD     166            anl     P1M2, #0b11111101
04A4            167            
04A4            168       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
04A4 43B110     169       orl  P0M1, #0b00010000
04A7 53B2EF     170            anl     P0M2, #0b11101111
04AA            171            
04AA            172   
04AA            173            ; Initialize and start the ADC-LM335:
04AA            174            ;do these two when you are going to read from pin 14
04AA            175       ;anl ADCCON0, #0xF0
04AA            176            ;orl ADCCON0, #0x07 ; Select channel 7
04AA            177            
04AA            178       ; AINDIDS select if some pins are analog inputs or digital I/O:
04AA 75F600     179            mov AINDIDS, #0x00 ; Disable all analog inputs
04AD 43F690     180            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
04B0 43E101     181            orl ADCCON1, #0x01 ; Enable ADC
04B3            182   
04B3            183   
04B3 22         184   ret
04B4            185            
04B4            186   Timer0_Init:
04B4 438E08     187            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04B7 E589       188            mov a, TMOD
04B9 54F0       189            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04BB 4401       190            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04BD F589       191            mov TMOD, a
04BF 758CF0     192            mov TH0, #high(TIMER0_RELOAD)
04C2 758A2C     193            mov TL0, #low(TIMER0_RELOAD)
04C5            194            ; Enable the timer and interrupts
04C5 D2A9       195       setb ET0  ; Enable timer 0 interrupt
04C7 D28C       196       setb TR0  ; Start timer 0
04C9 22         197            ret
04CA            198   
04CA            199   ;---------------------------------;
04CA            200   ; ISR for timer 0.  Set to execute;
04CA            201   ; every 1/4096Hz to generate a    ;
04CA            202   ; 2048 Hz wave at pin SOUND_OUT   ;
04CA            203   ;---------------------------------;
04CA            204   Timer0_ISR:
04CA            205            ;clr TF0  ; According to the data sheet this is done for us already.
04CA            206            ; Timer 0 doesn't have 16-bit auto-reload, so
04CA C28C       207            clr TR0
04CC 758CF0     208            mov TH0, #high(TIMER0_RELOAD)
04CF 758A2C     209            mov TL0, #low(TIMER0_RELOAD)
04D2 D28C       210            setb TR0
04D4 B292       211            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04D6 32         212            reti
04D7            213   
04D7            214   Timer2_ISR:
04D7 C2CF       215            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04D9 C0D0       216            push psw
04DB C0E0       217            push acc
04DD            218   
04DD 053A       219            inc pwm_counter
04DF C3         220            clr c
04E0 E53B       221            mov a, pwm
04E2 953A       222            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04E4 B3         223            cpl c
04E5 9290       224            mov PWM_OUT, c
04E7            225   
04E7 E53A       226            mov a, pwm_counter
04E9 B46407     227            cjne a, #100, Timer2_ISR_done
04EC 753A00     228            mov pwm_counter, #0
04EF 0539       229            inc seconds ; It is super easy to keep a seconds count here
04F1 D206       230            setb s_flag
04F3            231   
04F3            232   Timer2_ISR_done:
04F3 D0E0       233            pop acc
04F5 D0D0       234            pop psw
04F7 32         235            reti
04F8            236   
04F8            237   LCD_PB:
04F8            238            ; Set variables to 1: 'no push button pressed'
04F8 D200       239            setb PB0
04FA D201       240            setb PB1
04FC D202       241            setb PB2
04FE D203       242            setb PB3
0500 D204       243            setb PB4
0502            244            ; The input pin used to check set to '1'
0502 D295       245            setb P1.5
0504            246            
0504            247            ; Check if any push button is pressed
0504 C280       248            clr P0.0
0506 C281       249            clr P0.1
0508 C282       250            clr P0.2
050A C283       251            clr P0.3
050C C293       252            clr P1.3
050E 209544     253            jb P1.5, LCD_PB_Done
0511            254   
0511            255            ; Debounce
0511 209541     256            jb P1.5, LCD_PB_Done
0514 C002       257            push AR2
0516 7A32       257            mov R2, #50
0518 1200F6     257            lcall ?Wait_Milli_Seconds
051B D002       257            pop AR2
051D 209535     258            jb P1.5, LCD_PB_Done
0520 2095FD     259            jb P1.5, $
0523            260   
0523            261            ; Set the LCD data pins to logic 1
0523 D280       262            setb P0.0
0525 D281       263            setb P0.1
0527 D282       264            setb P0.2
0529 D283       265            setb P0.3
052B D293       266            setb P1.3
052D            267            
052D            268            ; Check the push buttons one by one
052D C293       269            clr P1.3
052F A295       270            mov c, P1.5
0531 9204       271            mov PB4, c
0533 D293       272            setb P1.3
0535            273   
0535 C280       274            clr P0.0
0537 A295       275            mov c, P1.5
0539 9203       276            mov PB3, c
053B D280       277            setb P0.0
053D            278            
053D C281       279            clr P0.1
053F A295       280            mov c, P1.5
0541 9202       281            mov PB2, c
0543 D281       282            setb P0.1
0545            283            
0545 C282       284            clr P0.2
0547 A295       285            mov c, P1.5
0549 9201       286            mov PB1, c
054B D282       287            setb P0.2
054D            288            
054D C283       289            clr P0.3
054F A295       290            mov c, P1.5
0551 9200       291            mov PB0, c
0553 D283       292            setb P0.3
0555            293   
0555            294   LCD_PB_Done:             
0555 22         295            ret
0556            296   
0556            297   check_decrement: 
0556 200005     298            jb PB0, check_stime
0559 B205       299            cpl decrement1
055B 02055E     300            ljmp check_stime
055E            301   
055E            302   check_stime:
055E 20042B     303            jb PB4, check_stemp_intr
0561 200514     304            jb decrement1, Soak_time_decrement
0564 E531       305            mov a, Soak_time
0566 2401       306            add a, #0x01
0568 D4         307            da a
0569 F531       308            mov Soak_time, a
056B 9460       309            subb a, #0x60
056D 4020       310            jc display_up_stime ;if soak_time < 60
056F E531       311            mov a, Soak_time
0571 9490       312            subb a, #0x90
0573 4059       313            jc display_check_stime
0575 02060D     314            ljmp display_down_stime 
0578            315   
0578            316   Soak_time_decrement: 
0578 E531       317            mov a, Soak_time
057A 2499       318            add a, #0x99
057C D4         319            da a
057D F531       320            mov Soak_time, a
057F 9460       321            subb a, #0x60
0581 400C       322            jc display_up_stime ; skip if soak_time < 60
0583 E531       323            mov a, Soak_time
0585 9490       324            subb a, #0x90
0587 4045       325            jc display_check_stime
0589 02060D     326            ljmp display_down_stime
058C            327   
058C            328   check_stemp_intr:
058C 02064C     329            ljmp check_stemp
058F            330            
058F            331   display_up_stime:
058F 7440       332            mov a, #0x40
0591 120140     332            lcall ?WriteCommand
0594 7400       333            mov a, #00000B
0596 12013B     333            lcall ?WriteData
0599 7404       334            mov a, #00100B
059B 12013B     334            lcall ?WriteData
059E 740E       335            mov a, #01110B
05A0 12013B     335            lcall ?WriteData
05A3 741F       336            mov a, #11111B
05A5 12013B     336            lcall ?WriteData
05A8 7404       337            mov a, #00100B
05AA 12013B     337            lcall ?WriteData
05AD 7404       338            mov a, #00100B
05AF 12013B     338            lcall ?WriteData
05B2 7404       339            mov a, #00100B
05B4 12013B     339            lcall ?WriteData
05B7 7404       340            mov a, #00100B
05B9 12013B     340            lcall ?WriteData
05BC C0E0       341            push acc
05BE 7406       341            mov a, #6
05C0 14         341            dec a
05C1 120185     341            lcall ?Set_Cursor_1 ; Select column and row
05C4 D0E0       341            pop acc
05C6 7400       342            mov a, #0
05C8 12013B     342            lcall ?WriteData
05CB 02064C     343            ljmp check_stemp
05CE            344   
05CE            345   display_check_stime:
05CE 7450       346            mov a, #0x50
05D0 120140     346            lcall ?WriteCommand
05D3 7400       347            mov a, #00000B
05D5 12013B     347            lcall ?WriteData
05D8 7400       348            mov a, #00000B
05DA 12013B     348            lcall ?WriteData
05DD 7401       349            mov a, #00001B
05DF 12013B     349            lcall ?WriteData
05E2 7401       350            mov a, #00001B
05E4 12013B     350            lcall ?WriteData
05E7 7412       351            mov a, #10010B
05E9 12013B     351            lcall ?WriteData
05EC 740A       352            mov a, #01010B
05EE 12013B     352            lcall ?WriteData
05F1 7404       353            mov a, #00100B
05F3 12013B     353            lcall ?WriteData
05F6 7400       354            mov a, #00000B
05F8 12013B     354            lcall ?WriteData
05FB C0E0       355            push acc
05FD 7406       355            mov a, #6
05FF 14         355            dec a
0600 120185     355            lcall ?Set_Cursor_1 ; Select column and row
0603 D0E0       355            pop acc
0605 7402       356            mov a, #2
0607 12013B     356            lcall ?WriteData
060A 02064C     357            ljmp check_stemp
060D            358   
060D            359   display_down_stime:
060D 7448       360            mov a, #0x48
060F 120140     360            lcall ?WriteCommand
0612 7400       361            mov a, #00000B
0614 12013B     361            lcall ?WriteData
0617 7404       362            mov a, #00100B
0619 12013B     362            lcall ?WriteData
061C 7404       363            mov a, #00100B
061E 12013B     363            lcall ?WriteData
0621 7404       364            mov a, #00100B
0623 12013B     364            lcall ?WriteData
0626 7404       365            mov a, #00100B
0628 12013B     365            lcall ?WriteData
062B 741F       366            mov a, #11111B
062D 12013B     366            lcall ?WriteData
0630 740E       367            mov a, #01110B
0632 12013B     367            lcall ?WriteData
0635 7404       368            mov a, #00100B
0637 12013B     368            lcall ?WriteData
063A C0E0       369            push acc
063C 7406       369            mov a, #6
063E 14         369            dec a
063F 120185     369            lcall ?Set_Cursor_1 ; Select column and row
0642 D0E0       369            pop acc
0644 7401       370            mov a, #1
0646 12013B     370            lcall ?WriteData
0649 02064C     371            ljmp check_stemp
064C            372   
064C            373   check_stemp:
064C 20037E     374            jb PB3, check_rtime_intr
064F 200555     375            jb decrement1, Soak_temp_decrement
0652 E532       376            mov a, Soak_temp
0654 B49903     377            cjne a, #0x99, continue_stemp
0657 020679     378            ljmp add_hund_s
065A            379   
065A            380   continue_stemp:
065A 2401       381            add a, #0x01
065C D4         382            da a
065D F532       383            mov Soak_temp, a
065F 020662     384       ljmp cont_s
0662            385   
0662            386       cont_s:
0662 E533       387       mov a, soak_temp_hund
0664 B42022     388            cjne a, #0x20, check_stemp_range_hund
0667 E532       389       mov a, Soak_temp
0669 B4501D     390       cjne a, #0x50, check_stemp_range_hund
066C 7400       391            mov a, #0x00
066E F532       392            mov Soak_temp, a
0670 E533       393       mov a, soak_temp_hund
0672 7400       394       mov a, #0x00
0674 F533       395       mov soak_temp_hund, a
0676 020689     396            ljmp check_stemp_range_hund
0679            397   
0679            398   add_hund_s:
0679 E533       399       mov a, soak_temp_hund
067B 2410       400       add a, #0x10
067D D4         401       da A
067E F533       402       mov soak_temp_hund, A
0680 E532       403       mov a, Soak_temp
0682 7400       404            mov a, #0x00
0684 F532       405            mov soak_temp, a
0686 020662     406       ljmp cont_s
0689            407   
0689            408   check_stemp_range_hund:
0689 E533       409            mov a, Soak_temp_hund
068B 9409       410            subb a, #0x09
068D 4044       411            jc display_up_stemp
068F E533       412            mov a, soak_temp_hund
0691 9419       413            subb a, #0x19
0693 4003       414            jc check_stemp_range
0695 0206D0     415            ljmp display_down_stemp_intr
0698            416   
0698            417   check_stemp_range:
0698 E532       418            mov a, soak_temp
069A 9430       419            subb a, #0x30 
069C 4035       420            jc display_up_stemp
069E E532       421            mov a, soak_temp
06A0 9471       422            subb a, #0x71
06A2 406E       423            jc display_check_stemp
06A4 0206D0     424            ljmp display_down_stemp_intr
06A7            425   
06A7            426   Soak_temp_decrement: 
06A7 E532       427            mov a, Soak_temp
06A9 2499       428            add a, #0x99
06AB D4         429            da a
06AC F532       430            mov Soak_temp, a
06AE B400D8     431       cjne a, #0x00, check_stemp_range_hund
06B1 0206C5     432       ljmp decrement_s_hund   
06B4            433   
06B4            434       continue_dec_s:
06B4 753320     435       mov soak_temp_hund, #0x20
06B7 753250     436       mov soak_temp, #0x50
06BA 020689     437       ljmp check_stemp_range_hund
06BD            438   
06BD            439       cont_s_dec:
06BD 9410       440       SUBB a, #0x10
06BF D4         441       da A
06C0 F533       442       mov soak_temp_hund, a 
06C2 020689     443            ljmp check_stemp_range_hund
06C5            444   
06C5            445   decrement_s_hund:
06C5 E533       446       mov a, soak_temp_hund
06C7 B400F3     447       cjne a , #0x00, cont_s_dec
06CA 0206B4     448       ljmp continue_dec_s
06CD            449   
06CD            450   check_rtime_intr:
06CD 020790     451            ljmp check_rtime
06D0            452   
06D0            453   display_down_stemp_intr:
06D0 020751     454            ljmp display_down_stemp
06D3            455   
06D3            456   display_up_stemp:
06D3 7440       457            mov a, #0x40
06D5 120140     457            lcall ?WriteCommand
06D8 7400       458            mov a, #00000B
06DA 12013B     458            lcall ?WriteData
06DD 7404       459            mov a, #00100B
06DF 12013B     459            lcall ?WriteData
06E2 740E       460            mov a, #01110B
06E4 12013B     460            lcall ?WriteData
06E7 741F       461            mov a, #11111B
06E9 12013B     461            lcall ?WriteData
06EC 7404       462            mov a, #00100B
06EE 12013B     462            lcall ?WriteData
06F1 7404       463            mov a, #00100B
06F3 12013B     463            lcall ?WriteData
06F6 7404       464            mov a, #00100B
06F8 12013B     464            lcall ?WriteData
06FB 7404       465            mov a, #00100B
06FD 12013B     465            lcall ?WriteData
0700 C0E0       466            push acc
0702 740A       466            mov a, #10
0704 14         466            dec a
0705 120185     466            lcall ?Set_Cursor_1 ; Select column and row
0708 D0E0       466            pop acc
070A 7400       467            mov a, #0
070C 12013B     467            lcall ?WriteData
070F            467   
070F 020790     468            ljmp check_rtime
0712            469   
0712            470   display_check_stemp:
0712 7450       471            mov a, #0x50
0714 120140     471            lcall ?WriteCommand
0717 7400       472            mov a, #00000B
0719 12013B     472            lcall ?WriteData
071C 7400       473            mov a, #00000B
071E 12013B     473            lcall ?WriteData
0721 7401       474            mov a, #00001B
0723 12013B     474            lcall ?WriteData
0726 7401       475            mov a, #00001B
0728 12013B     475            lcall ?WriteData
072B 7412       476            mov a, #10010B
072D 12013B     476            lcall ?WriteData
0730 740A       477            mov a, #01010B
0732 12013B     477            lcall ?WriteData
0735 7404       478            mov a, #00100B
0737 12013B     478            lcall ?WriteData
073A 7400       479            mov a, #00000B
073C 12013B     479            lcall ?WriteData
073F C0E0       480            push acc
0741 740A       480            mov a, #10
0743 14         480            dec a
0744 120185     480            lcall ?Set_Cursor_1 ; Select column and row
0747 D0E0       480            pop acc
0749 7402       481            mov a, #2
074B 12013B     481            lcall ?WriteData
074E            481   
074E 020790     482            ljmp check_rtime
0751            483   
0751            484   display_down_stemp:
0751 7448       485            mov a, #0x48
0753 120140     485            lcall ?WriteCommand
0756 7400       486            mov a, #00000B
0758 12013B     486            lcall ?WriteData
075B 7404       487            mov a, #00100B
075D 12013B     487            lcall ?WriteData
0760 7404       488            mov a, #00100B
0762 12013B     488            lcall ?WriteData
0765 7404       489            mov a, #00100B
0767 12013B     489            lcall ?WriteData
076A 7404       490            mov a, #00100B
076C 12013B     490            lcall ?WriteData
076F 741F       491            mov a, #11111B
0771 12013B     491            lcall ?WriteData
0774 740E       492            mov a, #01110B
0776 12013B     492            lcall ?WriteData
0779 7404       493            mov a, #00100B
077B 12013B     493            lcall ?WriteData
077E C0E0       494            push acc
0780 740A       494            mov a, #10
0782 14         494            dec a
0783 120185     494            lcall ?Set_Cursor_1 ; Select column and row
0786 D0E0       494            pop acc
0788 7401       495            mov a, #1
078A 12013B     495            lcall ?WriteData
078D            495   
078D 020790     496            ljmp check_rtime
0790            497   
0790            498   check_rtime:
0790 20026A     499            jb PB2, check_rtemp_intr
0793 200514     500            jb decrement1, Reflow_time_decrement
0796 E534       501            mov a, Reflow_time
0798 2401       502            add a, #0x01
079A D4         503            da a
079B F534       504            mov Reflow_time, a
079D 9430       505            subb a, #0x30
079F 401D       506            jc display_up_rtime ; skip if soak_time < 60
07A1 E534       507            mov a, Reflow_time
07A3 9490       508            subb a, #0x90
07A5 4059       509            jc display_check_rtime
07A7 02083F     510            ljmp display_down_rtime 
07AA            511   
07AA            512   Reflow_time_decrement: 
07AA E534       513            mov a, Reflow_time
07AC 2499       514            add a, #0x99
07AE D4         515            da a
07AF F534       516            mov Reflow_time, a
07B1 9430       517            subb a, #0x30
07B3 4009       518            jc display_up_rtime ; skip if soak_time < 60
07B5 E534       519            mov a, Reflow_time
07B7 9490       520            subb a, #0x90
07B9 4045       521            jc display_check_rtime
07BB 02083F     522            ljmp display_down_rtime 
07BE            523   
07BE            524   display_up_rtime:
07BE 7440       525            mov a, #0x40
07C0 120140     525            lcall ?WriteCommand
07C3 7400       526            mov a, #00000B
07C5 12013B     526            lcall ?WriteData
07C8 7404       527            mov a, #00100B
07CA 12013B     527            lcall ?WriteData
07CD 740E       528            mov a, #01110B
07CF 12013B     528            lcall ?WriteData
07D2 741F       529            mov a, #11111B
07D4 12013B     529            lcall ?WriteData
07D7 7404       530            mov a, #00100B
07D9 12013B     530            lcall ?WriteData
07DC 7404       531            mov a, #00100B
07DE 12013B     531            lcall ?WriteData
07E1 7404       532            mov a, #00100B
07E3 12013B     532            lcall ?WriteData
07E6 7404       533            mov a, #00100B
07E8 12013B     533            lcall ?WriteData
07EB C0E0       534            push acc
07ED 7408       534            mov a, #8
07EF 14         534            dec a
07F0 120183     534            lcall ?Set_Cursor_2 ; Select column and row
07F3 D0E0       534            pop acc
07F5 7400       535            mov a, #0
07F7 12013B     535            lcall ?WriteData
07FA 02087E     536            ljmp check_rtemp
07FD            537   
07FD            538   check_rtemp_intr:
07FD 02087E     539            ljmp check_rtemp
0800            540   
0800            541   display_check_rtime:
0800 7450       542            mov a, #0x50
0802 120140     542            lcall ?WriteCommand
0805 7400       543            mov a, #00000B
0807 12013B     543            lcall ?WriteData
080A 7400       544            mov a, #00000B
080C 12013B     544            lcall ?WriteData
080F 7401       545            mov a, #00001B
0811 12013B     545            lcall ?WriteData
0814 7401       546            mov a, #00001B
0816 12013B     546            lcall ?WriteData
0819 7412       547            mov a, #10010B
081B 12013B     547            lcall ?WriteData
081E 740A       548            mov a, #01010B
0820 12013B     548            lcall ?WriteData
0823 7404       549            mov a, #00100B
0825 12013B     549            lcall ?WriteData
0828 7400       550            mov a, #00000B
082A 12013B     550            lcall ?WriteData
082D C0E0       551            push acc
082F 7408       551            mov a, #8
0831 14         551            dec a
0832 120183     551            lcall ?Set_Cursor_2 ; Select column and row
0835 D0E0       551            pop acc
0837 7402       552            mov a, #2
0839 12013B     552            lcall ?WriteData
083C 02087E     553            ljmp check_rtemp
083F            554   
083F            555   display_down_rtime:
083F 7448       556            mov a, #0x48
0841 120140     556            lcall ?WriteCommand
0844 7400       557            mov a, #00000B
0846 12013B     557            lcall ?WriteData
0849 7404       558            mov a, #00100B
084B 12013B     558            lcall ?WriteData
084E 7404       559            mov a, #00100B
0850 12013B     559            lcall ?WriteData
0853 7404       560            mov a, #00100B
0855 12013B     560            lcall ?WriteData
0858 7404       561            mov a, #00100B
085A 12013B     561            lcall ?WriteData
085D 741F       562            mov a, #11111B
085F 12013B     562            lcall ?WriteData
0862 740E       563            mov a, #01110B
0864 12013B     563            lcall ?WriteData
0867 7404       564            mov a, #00100B
0869 12013B     564            lcall ?WriteData
086C C0E0       565            push acc
086E 7408       565            mov a, #8
0870 14         565            dec a
0871 120183     565            lcall ?Set_Cursor_2 ; Select column and row
0874 D0E0       565            pop acc
0876 7401       566            mov a, #1
0878 12013B     566            lcall ?WriteData
087B 02087E     567            ljmp check_rtemp
087E            568   
087E            569   check_rtemp:
087E 200178     570            jb PB1, skipp_intr
0881 20054C     571            jb decrement1, Reflow_temp_decrement
0884 E535       572            mov a, Reflow_temp
0886 B49903     573            cjne a, #0x99, continue_rtemp
0889 0208C0     574            ljmp add_hundreds_r
088C            575   
088C            576   continue_rtemp:
088C 2401       577            add a, #0x01
088E D4         578       da a
088F F535       579       mov Reflow_temp, a
0891 020894     580       ljmp cont_r
0894            581   
0894            582       cont_r:
0894            583       ;check hundreds
0894 E53C       584       mov a, reflow_temp_100
0896 B4200F     585       cjne a, #0x20, check_rtemp_range_hund ;make sure to check with 20 since the hundreds place value is multiplied by 10
0899 E535       586            mov a, reflow_temp
089B B4500A     587       cjne a, #0x50, check_rtemp_range_hund
089E 7400       588       mov a, #0x00
08A0 F535       589       mov reflow_temp, a
08A2 E53C       590       mov a, reflow_temp_100
08A4 7400       591       mov a, #0x00
08A6 F53C       592            mov Reflow_temp_100, a
08A8            593   
08A8            594            check_rtemp_range_hund:
08A8 E53C       595            mov a, reflow_temp_100
08AA 9419       596            subb a, #0x19
08AC 404E       597            jc display_up_rtemp
08AE 0208B1     598            ljmp check_rtemp_range
08B1            599   
08B1            600            check_rtemp_range:
08B1 E535       601            mov a, reflow_temp
08B3 9420       602            subb a, #0x20
08B5 4045       603            jc display_up_rtemp
08B7 E535       604            mov a, reflow_temp
08B9 9441       605            subb a, #0x41
08BB 407E       606            jc display_check_rtemp
08BD 02097A     607            ljmp display_down_rtemp
08C0            608   
08C0            609   add_hundreds_r:
08C0 E53C       610       mov a, reflow_temp_100
08C2 2410       611       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
08C4 D4         612       da A
08C5 F53C       613       mov reflow_temp_100, A
08C7 E535       614       mov a, Reflow_temp
08C9 7400       615            mov a, #0x00
08CB F535       616            mov reflow_temp, a
08CD 020894     617       ljmp cont_r
08D0            618   
08D0            619   
08D0            620   Reflow_temp_decrement: 
08D0 E535       621            mov a, Reflow_temp
08D2 2499       622            add a, #0x99
08D4 D4         623            da a
08D5 F535       624            mov Reflow_temp, a
08D7 B400CE     625       cjne a, #0x00, check_rtemp_range_hund
08DA 0208EE     626       ljmp decrement_r_hund
08DD            627   
08DD            628       continue_dec_r:
08DD            629            ;mov a, reflow_temp
08DD            630       ;cjne a, #0x00, skipp
08DD 753550     631       mov reflow_temp, #0x50
08E0 753C20     632       mov reflow_temp_100, #0x20
08E3 0208A8     633       ljmp check_rtemp_range_hund
08E6            634   
08E6            635       cont_dec:
08E6 9410       636       SUBB a, #0x10
08E8 D4         637       da a
08E9 F53C       638       mov reflow_temp_100, a
08EB 0208A8     639            ljmp check_rtemp_range_hund
08EE            640   
08EE            641       decrement_r_hund:
08EE E53C       642       mov a, reflow_temp_100
08F0 B400F3     643       cjne a, #0x00, cont_dec
08F3 0208DD     644       ljmp continue_dec_r
08F6            645   
08F6            646   display_down_rtemp_intr:
08F6 02097A     647            ljmp display_down_rtemp
08F9            648   
08F9            649   skipp_intr:
08F9 0209B9     650            ljmp skipp
08FC            651   
08FC            652   display_up_rtemp:
08FC 7440       653            mov a, #0x40
08FE 120140     653            lcall ?WriteCommand
0901 7400       654            mov a, #00000B
0903 12013B     654            lcall ?WriteData
0906 7404       655            mov a, #00100B
0908 12013B     655            lcall ?WriteData
090B 740E       656            mov a, #01110B
090D 12013B     656            lcall ?WriteData
0910 741F       657            mov a, #11111B
0912 12013B     657            lcall ?WriteData
0915 7404       658            mov a, #00100B
0917 12013B     658            lcall ?WriteData
091A 7404       659            mov a, #00100B
091C 12013B     659            lcall ?WriteData
091F 7404       660            mov a, #00100B
0921 12013B     660            lcall ?WriteData
0924 7404       661            mov a, #00100B
0926 12013B     661            lcall ?WriteData
0929 C0E0       662            push acc
092B 740C       662            mov a, #12
092D 14         662            dec a
092E 120183     662            lcall ?Set_Cursor_2 ; Select column and row
0931 D0E0       662            pop acc
0933 7400       663            mov a, #0
0935 12013B     663            lcall ?WriteData
0938            663   
0938 0209B9     664            ljmp skipp
093B            665   
093B            666   display_check_rtemp:
093B 7450       667            mov a, #0x50
093D 120140     667            lcall ?WriteCommand
0940 7400       668            mov a, #00000B
0942 12013B     668            lcall ?WriteData
0945 7400       669            mov a, #00000B
0947 12013B     669            lcall ?WriteData
094A 7401       670            mov a, #00001B
094C 12013B     670            lcall ?WriteData
094F 7401       671            mov a, #00001B
0951 12013B     671            lcall ?WriteData
0954 7412       672            mov a, #10010B
0956 12013B     672            lcall ?WriteData
0959 740A       673            mov a, #01010B
095B 12013B     673            lcall ?WriteData
095E 7404       674            mov a, #00100B
0960 12013B     674            lcall ?WriteData
0963 7400       675            mov a, #00000B
0965 12013B     675            lcall ?WriteData
0968 C0E0       676            push acc
096A 740C       676            mov a, #12
096C 14         676            dec a
096D 120183     676            lcall ?Set_Cursor_2 ; Select column and row
0970 D0E0       676            pop acc
0972 7402       677            mov a, #2
0974 12013B     677            lcall ?WriteData
0977            677   
0977 0209B9     678            ljmp skipp
097A            679   
097A            680   display_down_rtemp:
097A 7448       681            mov a, #0x48
097C 120140     681            lcall ?WriteCommand
097F 7400       682            mov a, #00000B
0981 12013B     682            lcall ?WriteData
0984 7404       683            mov a, #00100B
0986 12013B     683            lcall ?WriteData
0989 7404       684            mov a, #00100B
098B 12013B     684            lcall ?WriteData
098E 7404       685            mov a, #00100B
0990 12013B     685            lcall ?WriteData
0993 7404       686            mov a, #00100B
0995 12013B     686            lcall ?WriteData
0998 741F       687            mov a, #11111B
099A 12013B     687            lcall ?WriteData
099D 740E       688            mov a, #01110B
099F 12013B     688            lcall ?WriteData
09A2 7404       689            mov a, #00100B
09A4 12013B     689            lcall ?WriteData
09A7 C0E0       690            push acc
09A9 740C       690            mov a, #12
09AB 14         690            dec a
09AC 120183     690            lcall ?Set_Cursor_2 ; Select column and row
09AF D0E0       690            pop acc
09B1 7401       691            mov a, #1
09B3 12013B     691            lcall ?WriteData
09B6            691   
09B6 0209B9     692            ljmp skipp
09B9            693   
09B9            694   skipp:
09B9 22         695            ret
09BA            696   
09BA            697   Check_start:
09BA 20976C     698            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09BD C002       699            push AR2
09BF 7A32       699            mov R2, #50
09C1 1200F6     699            lcall ?Wait_Milli_Seconds
09C4 D002       699            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09C6 209760     700            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09C9 3097FD     701            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
09CC 753001     702            mov STATE, #0x01
09CF 22         703            ret
09D0            704   
09D0            705   check_convert: 
09D0 209656     706            jb CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09D3 C002       707            push AR2
09D5 7A32       707            mov R2, #50
09D7 1200F6     707            lcall ?Wait_Milli_Seconds
09DA D002       707            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09DC 20964A     708            jb  CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09DF B209       709            cpl fahrenheit_flag 
09E1 22         710            ret 
09E2            711   
09E2            712   Check_mute:
09E2 20B044     713            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09E5 C002       714            push AR2
09E7 7A32       714            mov R2, #50
09E9 1200F6     714            lcall ?Wait_Milli_Seconds
09EC D002       714            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09EE 20B038     715            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09F1 200A0F     716            jb mute_flag, muteset
09F4 D20A       717            setb mute_flag
09F6 C0E0       718            push acc
09F8 744D       718            mov a, #'M'
09FA 12013B     718            lcall ?WriteData
09FD D0E0       718            pop acc
09FF 30B0FD     719            jnb MUTE_BUTTON, $
0A02 22         720            ret
0A03            721   muteset:
0A03 C20A       722            clr mute_flag
0A05 C0E0       723            push acc
0A07 7420       723            mov a, #' '
0A09 12013B     723            lcall ?WriteData
0A0C D0E0       723            pop acc
0A0E 30B0FD     724            jnb MUTE_BUTTON, $
0A11 22         725            ret
0A12            726   
0A12            727   display_mute:
0A12 200A0A     728            jb mute_flag, muted
0A15 C0E0       729            push acc
0A17 7420       729            mov a, #' '
0A19 12013B     729            lcall ?WriteData
0A1C D0E0       729            pop acc
0A1E 22         730            ret
0A1F            731   muted:
0A1F C0E0       732            push acc
0A21 744D       732            mov a, #'M'
0A23 12013B     732            lcall ?WriteData
0A26 D0E0       732            pop acc
0A28 22         733            ret
0A29            734   
0A29            735   smjmp:
0A29 0209B9     736   ljmp skipp
0A2C            737   
0A2C            738   wait_for_ti:
0A2C 3099FD     739       jnb TI, wait_for_ti
0A2F C299       740       clr TI
0A31 22         741       ret
0A32            742   
0A32            743   display_menu:
0A32 C0E0       744            push acc
0A34 7407       744            mov a, #7
0A36 14         744            dec a
0A37 120185     744            lcall ?Set_Cursor_1 ; Select column and row
0A3A D0E0       744            pop acc 
0A3C C000       745            push ar0
0A3E A831       745            mov r0, Soak_time
0A40 12018A     745            lcall ?Display_BCD
0A43 D000       745            pop ar0
0A45 C0E0       746            push acc
0A47 740B       746            mov a, #11
0A49 14         746            dec a
0A4A 120185     746            lcall ?Set_Cursor_1 ; Select column and row
0A4D D0E0       746            pop acc
0A4F C000       747            push ar0
0A51 A833       747            mov r0, Soak_temp_hund
0A53 12018A     747            lcall ?Display_BCD
0A56 D000       747            pop ar0
0A58 C0E0       748            push acc
0A5A 740C       748            mov a, #12
0A5C 14         748            dec a
0A5D 120185     748            lcall ?Set_Cursor_1 ; Select column and row
0A60 D0E0       748            pop acc
0A62 C000       749            push ar0
0A64 A832       749            mov r0, soak_temp
0A66 12018A     749            lcall ?Display_BCD
0A69 D000       749            pop ar0
0A6B C0E0       750            push acc
0A6D 7409       750            mov a, #9
0A6F 14         750            dec a
0A70 120183     750            lcall ?Set_Cursor_2 ; Select column and row
0A73 D0E0       750            pop acc
0A75 C000       751            push ar0
0A77 A834       751            mov r0, Reflow_time
0A79 12018A     751            lcall ?Display_BCD
0A7C D000       751            pop ar0
0A7E C0E0       752            push acc
0A80 740D       752            mov a, #13
0A82 14         752            dec a
0A83 120183     752            lcall ?Set_Cursor_2 ; Select column and row
0A86 D0E0       752            pop acc
0A88 C000       753            push ar0
0A8A A83C       753            mov r0, reflow_temp_100
0A8C 12018A     753            lcall ?Display_BCD
0A8F D000       753            pop ar0
0A91 C0E0       754            push acc
0A93 740E       754            mov a, #14
0A95 14         754            dec a
0A96 120183     754            lcall ?Set_Cursor_2 ; Select column and row
0A99 D0E0       754            pop acc
0A9B C000       755            push ar0
0A9D A835       755            mov r0, reflow_temp
0A9F 12018A     755            lcall ?Display_BCD
0AA2 D000       755            pop ar0
0AA4 22         756       ret
0AA5            757   
0AA5            758   display_heating_s:
0AA5            759            ;Set_Cursor(1,4)
0AA5            760            ;Display_BCD(Soak_temp_hund)
0AA5            761            ;set_cursor(1,5)
0AA5            762            ;display_bcd(soak_temp)
0AA5 C0E0       763            push acc
0AA7 740C       763            mov a, #12
0AA9 14         763            dec a
0AAA 120185     763            lcall ?Set_Cursor_1 ; Select column and row
0AAD D0E0       763            pop acc
0AAF C000       764            push ar0
0AB1 A838       764            mov r0, outside_temp
0AB3 12018A     764            lcall ?Display_BCD
0AB6 D000       764            pop ar0
0AB8 C0E0       765            push acc
0ABA 7407       765            mov a, #7
0ABC 14         765            dec a
0ABD 120183     765            lcall ?Set_Cursor_2 ; Select column and row
0AC0 D0E0       765            pop acc
0AC2 C000       766            push ar0
0AC4 A836       766            mov r0, current_temp
0AC6 12018A     766            lcall ?Display_BCD
0AC9 D000       766            pop ar0
0ACB 22         767            ret
0ACC            768   
0ACC            769   display_heating_r:
0ACC            770            ;Set_Cursor(1,4)
0ACC            771            ;Display_BCD(reflow_temp_100)
0ACC            772            ;set_cursor(1,5)
0ACC            773            ;display_bcd(reflow_temp)
0ACC C0E0       774            push acc
0ACE 740C       774            mov a, #12
0AD0 14         774            dec a
0AD1 120185     774            lcall ?Set_Cursor_1 ; Select column and row
0AD4 D0E0       774            pop acc
0AD6 C000       775            push ar0
0AD8 A838       775            mov r0, outside_temp
0ADA 12018A     775            lcall ?Display_BCD
0ADD D000       775            pop ar0
0ADF C0E0       776            push acc
0AE1 7407       776            mov a, #7
0AE3 14         776            dec a
0AE4 120183     776            lcall ?Set_Cursor_2 ; Select column and row
0AE7 D0E0       776            pop acc
0AE9 C000       777            push ar0
0AEB A836       777            mov r0, current_temp
0AED 12018A     777            lcall ?Display_BCD
0AF0 D000       777            pop ar0
0AF2 22         778            ret
0AF3            779   
0AF3            780   display_blank:
0AF3 C0E0       781            push acc
0AF5 7401       781            mov a, #1
0AF7 14         781            dec a
0AF8 120185     781            lcall ?Set_Cursor_1 ; Select column and row
0AFB D0E0       781            pop acc
0AFD C083       782            push dph
0AFF C082       782            push dpl
0B01 C0E0       782            push acc
0B03 900064     782            mov dptr, #blank
0B06 120178     782            lcall ?Send_Constant_String
0B09 D0E0       782            pop acc
0B0B D082       782            pop dpl
0B0D D083       782            pop dph
0B0F C0E0       783            push acc
0B11 7401       783            mov a, #1
0B13 14         783            dec a
0B14 120183     783            lcall ?Set_Cursor_2 ; Select column and row
0B17 D0E0       783            pop acc
0B19 C083       784            push dph
0B1B C082       784            push dpl
0B1D C0E0       784            push acc
0B1F 900064     784            mov dptr, #blank
0B22 120178     784            lcall ?Send_Constant_String
0B25 D0E0       784            pop acc
0B27 D082       784            pop dpl
0B29 D083       784            pop dph
0B2B 22         785            ret
0B2C            786   
0B2C            787   Display_formated_BCD:
0B2C C0E0       788            push acc
0B2E 740C       788            mov a, #12
0B30 14         788            dec a
0B31 120185     788            lcall ?Set_Cursor_1 ; Select column and row
0B34 D0E0       788            pop acc
0B36 C000       789            push ar0
0B38 A84B       789            mov r0, bcd+2
0B3A 12018A     789            lcall ?Display_BCD
0B3D D000       789            pop ar0
0B3F C0E0       790            push acc
0B41 742E       790            mov a, #'.'
0B43 12013B     790            lcall ?WriteData
0B46 D0E0       790            pop acc
0B48 C000       791            push ar0
0B4A A84A       791            mov r0, bcd+1
0B4C 12018A     791            lcall ?Display_BCD
0B4F D000       791            pop ar0
0B51 22         792            ret
0B52            793   
0B52            794   conv_to_bcd_high:
0B52 C4         795       swap a
0B53 540F       796       anl a, #0x0f
0B55 F9         797       mov R1, a
0B56 22         798            ret
0B57            799   
0B57            800   conv_to_bcd_low:
0B57 540F       801       anl a, #0x0f
0B59 F8         802       mov R0, A
0B5A 22         803            ret
0B5B            804   
0B5B            805   conv_to_bcd:
0B5B 883D       806            mov x+0, R0
0B5D 893E       807            mov x+1, R1
0B5F 753F00     808            mov x+2, #0
0B62 754000     809            mov x+3, #0
0B65 1201DE     810       lcall hex2bcd
0B68 22         811            ret
0B69            812   String: 
0B69 0D0A00     813            DB '\r', '\n', 0
0B6C            814   
0B6C            815   Outside_tmp:
0B6C 53E8F0     816       anl ADCCON0, #0xF0
0B6F 43E807     817       orl ADCCON0, #0x07 ; Select channel 7 
0B72            818   
0B72 C2EF       819       clr ADCF
0B74 D2EE       820       setb ADCS
0B76 30EFFD     821       jnb ADCF, $
0B79            822   
0B79 E5C3       823       mov a, ADCRH
0B7B C4         824       swap a
0B7C C0E0       825       push acc
0B7E 540F       826       anl a, #0x0f
0B80 F9         827       mov R1, a
0B81 D0E0       828       pop acc
0B83 54F0       829       anl a, #0xf0
0B85 45C2       830       orl a, ADCRL
0B87 F8         831       mov R0, A
0B88            832       
0B88            833       ; Convert to voltage
0B88 883D       834            mov x+0, R0
0B8A 893E       835            mov x+1, R1
0B8C 753F00     836            mov x+2, #0
0B8F 754000     837            mov x+3, #0
0B92 75417C     838            mov y+0, #low (50300 % 0x10000) 
0B95 7542C4     838            mov y+1, #high(50300 % 0x10000) 
0B98 754300     838            mov y+2, #low (50300 / 0x10000) 
0B9B 754400     838            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0B9E 120358     839            lcall mul32
0BA1 7541FF     840            mov y+0, #low (4095 % 0x10000) 
0BA4 75420F     840            mov y+1, #high(4095 % 0x10000) 
0BA7 754300     840            mov y+2, #low (4095 / 0x10000) 
0BAA 754400     840            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0BAD 1203E5     841            lcall div32
0BB0 7541A4     842            mov y+0, #low (27300 % 0x10000) 
0BB3 75426A     842            mov y+1, #high(27300 % 0x10000) 
0BB6 754300     842            mov y+2, #low (27300 / 0x10000) 
0BB9 754400     842            mov y+3, #high(27300 / 0x10000) 
0BBC 1202C4     843            lcall sub32
0BBF 754164     844            mov y+0, #low (100 % 0x10000) 
0BC2 754200     844            mov y+1, #high(100 % 0x10000) 
0BC5 754300     844            mov y+2, #low (100 / 0x10000) 
0BC8 754400     844            mov y+3, #high(100 / 0x10000) 
0BCB 120358     845            lcall mul32
0BCE            846       ;save outside temp to z to later add onto the oven temp
0BCE 853D45     847       mov z+0, x+0
0BD1 853E46     848       mov z+1, x+1
0BD4 853F47     849       mov z+2, x+2
0BD7 854048     850       mov z+3, x+3 
0BDA            851   
0BDA 1201DE     852       lcall hex2bcd
0BDD E530       853       mov a, STATE
0BDF B40501     854       cjne a, #5, display
0BE2 22         855       ret
0BE3            856   
0BE3            857   display:
0BE3 120B2C     858       lcall Display_formated_BCD
0BE6 22         859       ret
0BE7            860   
0BE7            861   oven_tmp:
0BE7 53E8F0     862       anl  ADCCON0, #0xF0  
0BEA 43E804     863       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0BED            864   
0BED C2EF       865       clr ADCF
0BEF D2EE       866       setb ADCS
0BF1 30EFFD     867       jnb ADCF, $
0BF4            868   
0BF4 E5C3       869       mov a, ADCRH
0BF6 C4         870       swap a
0BF7 C0E0       871       push acc
0BF9 540F       872       anl a, #0x0f
0BFB F9         873       mov R1, a
0BFC D0E0       874       pop acc
0BFE 54F0       875       anl a, #0xf0
0C00 45C2       876       orl a, ADCRL
0C02 F8         877       mov R0, A
0C03            878       
0C03            879       ; Convert to voltage
0C03 883D       880            mov x+0, R0
0C05 893E       881            mov x+1, R1
0C07 753F00     882            mov x+2, #0
0C0A 754000     883            mov x+3, #0
0C0D 75417C     884            mov y+0, #low (50300 % 0x10000) 
0C10 7542C4     884            mov y+1, #high(50300 % 0x10000) 
0C13 754300     884            mov y+2, #low (50300 / 0x10000) 
0C16 754400     884            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0C19 120358     885            lcall mul32
0C1C 7541FF     886            mov y+0, #low (4095 % 0x10000) 
0C1F 75420F     886            mov y+1, #high(4095 % 0x10000) 
0C22 754300     886            mov y+2, #low (4095 / 0x10000) 
0C25 754400     886            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0C28 1203E5     887            lcall div32
0C2B            888   
0C2B            889            ;vout of opamp should now be in x
0C2B            890       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0C2B            891       ;first calculate vout*R2:
0C2B 7541BD     892            mov y+0, #low (1469 % 0x10000) 
0C2E 754205     892            mov y+1, #high(1469 % 0x10000) 
0C31 754300     892            mov y+2, #low (1469 / 0x10000) 
0C34 754400     892            mov y+3, #high(1469 / 0x10000) 
0C37 120358     893       lcall mul32
0C3A            894       ;now vout*R2 ohm is in x
0C3A            895       ;next we will take 461 650V and divide
0C3A 754152     896            mov y+0, #low (461650 % 0x10000) 
0C3D 75420B     896            mov y+1, #high(461650 % 0x10000) 
0C40 754307     896            mov y+2, #low (461650 / 0x10000) 
0C43 754400     896            mov y+3, #high(461650 / 0x10000)  
0C46 1203E5     897       lcall div32
0C49            898       ;multiply by 100k and then divide by 41 to cancel units
0C49 754140     899            mov y+0, #low (1000000 % 0x10000) 
0C4C 754242     899            mov y+1, #high(1000000 % 0x10000) 
0C4F 75430F     899            mov y+2, #low (1000000 / 0x10000) 
0C52 754400     899            mov y+3, #high(1000000 / 0x10000) 
0C55 120358     900       lcall mul32
0C58 754129     901            mov y+0, #low (41 % 0x10000) 
0C5B 754200     901            mov y+1, #high(41 % 0x10000) 
0C5E 754300     901            mov y+2, #low (41 / 0x10000) 
0C61 754400     901            mov y+3, #high(41 / 0x10000) 
0C64 1203E5     902       lcall div32
0C67            903       ;move the outside temp to y and add
0C67 854541     904       mov y+0, z+0
0C6A 854642     905       mov y+1, z+1
0C6D 854743     906       mov y+2, z+2
0C70 854844     907       mov y+3, z+3
0C73 1202A3     908       lcall add32
0C76 1201DE     909       lcall hex2bcd
0C79            910   
0C79 854B36     911            mov current_temp, bcd+2
0C7C 854C37     912       mov current_temp_hund, bcd+3
0C7F            913   
0C7F C000       914   push ar0
0C81 A84C       914   mov r0, bcd+3
0C83 1201C0     914   lcall ?Send_BCD
0C86 D000       914   pop ar0
0C88 C000       915   push ar0
0C8A A84B       915   mov r0, bcd+2
0C8C 1201C0     915   lcall ?Send_BCD
0C8F D000       915   pop ar0
0C91            916       put_decimal:
0C91 3099FD     917       jnb TI, put_decimal ; Wait for transmission to complete
0C94 C299       918       clr TI
0C96 75992E     919       mov SBUF, #'.'
0C99 C000       920   push ar0
0C9B A84A       920   mov r0, bcd+1
0C9D 1201C0     920   lcall ?Send_BCD
0CA0 D000       920   pop ar0
0CA2 C000       921   push ar0
0CA4 A849       921   mov r0, bcd+0
0CA6 1201C0     921   lcall ?Send_BCD
0CA9 D000       921   pop ar0
0CAB            922       put_r:
0CAB 3099FD     923       jnb TI, put_r ; Wait for transmission to complete
0CAE C299       924       clr TI
0CB0 75990D     925       mov SBUF, #'\r'
0CB3            926       put_n:
0CB3 3099FD     927       jnb TI, put_n ; Wait for transmission to complete
0CB6 C299       928       clr TI
0CB8 75990A     929       mov SBUF, #'\n'
0CBB            930   
0CBB 300936     931       jnb fahrenheit_flag, display_oven_tmp
0CBE 120267     932            lcall bcd2hex
0CC1 754109     933            mov y+0, #low (9 % 0x10000) 
0CC4 754200     933            mov y+1, #high(9 % 0x10000) 
0CC7 754300     933            mov y+2, #low (9 / 0x10000) 
0CCA 754400     933            mov y+3, #high(9 / 0x10000) 
0CCD 120358     934            lcall mul32
0CD0 754105     935            mov y+0, #low (5 % 0x10000) 
0CD3 754200     935            mov y+1, #high(5 % 0x10000) 
0CD6 754300     935            mov y+2, #low (5 / 0x10000) 
0CD9 754400     935            mov y+3, #high(5 / 0x10000) 
0CDC 1203E5     936            lcall div32 
0CDF 754100     937            mov y+0, #low (320000 % 0x10000) 
0CE2 7542E2     937            mov y+1, #high(320000 % 0x10000) 
0CE5 754304     937            mov y+2, #low (320000 / 0x10000) 
0CE8 754400     937            mov y+3, #high(320000 / 0x10000) 
0CEB 1202A3     938            lcall add32 
0CEE 1201DE     939            lcall hex2bcd 
0CF1 020CF4     940            ljmp display_oven_tmp
0CF4            941   
0CF4            942   display_oven_tmp:
0CF4 C0E0       943            push acc
0CF6 7406       943            mov a, #6
0CF8 14         943            dec a
0CF9 120183     943            lcall ?Set_Cursor_2 ; Select column and row
0CFC D0E0       943            pop acc
0CFE C000       944            push ar0
0D00 A84C       944            mov r0, bcd+3
0D02 12018A     944            lcall ?Display_BCD
0D05 D000       944            pop ar0
0D07 C000       945            push ar0
0D09 A84B       945            mov r0, bcd+2
0D0B 12018A     945            lcall ?Display_BCD
0D0E D000       945            pop ar0
0D10 C0E0       946            push acc
0D12 742E       946            mov a, #'.'
0D14 12013B     946            lcall ?WriteData
0D17 D0E0       946            pop acc
0D19 C000       947            push ar0
0D1B A84A       947            mov r0, bcd+1
0D1D 12018A     947            lcall ?Display_BCD
0D20 D000       947            pop ar0
0D22 22         948            ret
0D23            949   
0D23            950   skipp1:
0D23 22         951            ret
0D24            952   
0D24            953   
0D24            954   stage_temp:
0D24 53E8F0     955       anl ADCCON0, #0xF0
0D27 43E807     956       orl ADCCON0, #0x07 ; Select channel 7 
0D2A            957   
0D2A C2EF       958       clr ADCF
0D2C D2EE       959       setb ADCS
0D2E 30EFFD     960       jnb ADCF, $
0D31            961   
0D31 E5C3       962       mov a, ADCRH
0D33 C4         963       swap a
0D34 C0E0       964       push acc
0D36 540F       965       anl a, #0x0f
0D38 F9         966       mov R1, a
0D39 D0E0       967       pop acc
0D3B 54F0       968       anl a, #0xf0
0D3D 45C2       969       orl a, ADCRL
0D3F F8         970       mov R0, A
0D40            971       
0D40            972       ; Convert to voltage
0D40 883D       973            mov x+0, R0
0D42 893E       974            mov x+1, R1
0D44 753F00     975            mov x+2, #0
0D47 754000     976            mov x+3, #0
0D4A 75417C     977            mov y+0, #low (50300 % 0x10000) 
0D4D 7542C4     977            mov y+1, #high(50300 % 0x10000) 
0D50 754300     977            mov y+2, #low (50300 / 0x10000) 
0D53 754400     977            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0D56 120358     978            lcall mul32
0D59 7541FF     979            mov y+0, #low (4095 % 0x10000) 
0D5C 75420F     979            mov y+1, #high(4095 % 0x10000) 
0D5F 754300     979            mov y+2, #low (4095 / 0x10000) 
0D62 754400     979            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0D65 1203E5     980            lcall div32
0D68 7541A4     981            mov y+0, #low (27300 % 0x10000) 
0D6B 75426A     981            mov y+1, #high(27300 % 0x10000) 
0D6E 754300     981            mov y+2, #low (27300 / 0x10000) 
0D71 754400     981            mov y+3, #high(27300 / 0x10000) 
0D74 1202C4     982            lcall sub32
0D77 754164     983            mov y+0, #low (100 % 0x10000) 
0D7A 754200     983            mov y+1, #high(100 % 0x10000) 
0D7D 754300     983            mov y+2, #low (100 / 0x10000) 
0D80 754400     983            mov y+3, #high(100 / 0x10000) 
0D83 120358     984            lcall mul32
0D86            985       ;save outside temp to z to later add onto the oven temp
0D86 853D45     986       mov z+0, x+0
0D89 853E46     987       mov z+1, x+1
0D8C 853F47     988       mov z+2, x+2
0D8F 854048     989       mov z+3, x+3 
0D92            990   
0D92 53E8F0     991            anl  ADCCON0, #0xF0  
0D95 43E804     992       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0D98            993   
0D98 C2EF       994       clr ADCF
0D9A D2EE       995       setb ADCS
0D9C 30EFFD     996       jnb ADCF, $
0D9F            997   
0D9F E5C3       998       mov a, ADCRH
0DA1 C4         999       swap a
0DA2 C0E0      1000       push acc
0DA4 540F      1001       anl a, #0x0f
0DA6 F9        1002       mov R1, a
0DA7 D0E0      1003       pop acc
0DA9 54F0      1004       anl a, #0xf0
0DAB 45C2      1005       orl a, ADCRL
0DAD F8        1006       mov R0, A
0DAE           1007       
0DAE           1008       ; Convert to voltage
0DAE 883D      1009            mov x+0, R0
0DB0 893E      1010            mov x+1, R1
0DB2 753F00    1011            mov x+2, #0
0DB5 754000    1012            mov x+3, #0
0DB8 75417C    1013            mov y+0, #low (50300 % 0x10000) 
0DBB 7542C4    1013            mov y+1, #high(50300 % 0x10000) 
0DBE 754300    1013            mov y+2, #low (50300 / 0x10000) 
0DC1 754400    1013            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0DC4 120358    1014            lcall mul32
0DC7 7541FF    1015            mov y+0, #low (4095 % 0x10000) 
0DCA 75420F    1015            mov y+1, #high(4095 % 0x10000) 
0DCD 754300    1015            mov y+2, #low (4095 / 0x10000) 
0DD0 754400    1015            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0DD3 1203E5    1016            lcall div32
0DD6           1017   
0DD6           1018            ;vout of opamp should now be in x
0DD6           1019       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0DD6           1020       ;first calculate vout*R2:
0DD6 7541BD    1021            mov y+0, #low (1469 % 0x10000) 
0DD9 754205    1021            mov y+1, #high(1469 % 0x10000) 
0DDC 754300    1021            mov y+2, #low (1469 / 0x10000) 
0DDF 754400    1021            mov y+3, #high(1469 / 0x10000) 
0DE2 120358    1022       lcall mul32
0DE5           1023       ;now vout*R2 ohm is in x
0DE5           1024       ;next we will take 461 650V and divide
0DE5 754152    1025            mov y+0, #low (461650 % 0x10000) 
0DE8 75420B    1025            mov y+1, #high(461650 % 0x10000) 
0DEB 754307    1025            mov y+2, #low (461650 / 0x10000) 
0DEE 754400    1025            mov y+3, #high(461650 / 0x10000)  
0DF1 1203E5    1026       lcall div32
0DF4           1027       ;multiply by 100k and then divide by 41 to cancel units
0DF4 754140    1028            mov y+0, #low (1000000 % 0x10000) 
0DF7 754242    1028            mov y+1, #high(1000000 % 0x10000) 
0DFA 75430F    1028            mov y+2, #low (1000000 / 0x10000) 
0DFD 754400    1028            mov y+3, #high(1000000 / 0x10000) 
0E00 120358    1029       lcall mul32
0E03 754129    1030            mov y+0, #low (41 % 0x10000) 
0E06 754200    1030            mov y+1, #high(41 % 0x10000) 
0E09 754300    1030            mov y+2, #low (41 / 0x10000) 
0E0C 754400    1030            mov y+3, #high(41 / 0x10000) 
0E0F 1203E5    1031       lcall div32
0E12           1032       ;move the outside temp to y and add
0E12 854541    1033       mov y+0, z+0
0E15 854642    1034       mov y+1, z+1
0E18 854743    1035       mov y+2, z+2
0E1B 854844    1036       mov y+3, z+3
0E1E 1202A3    1037       lcall add32
0E21 1201DE    1038       lcall hex2bcd
0E24           1039   
0E24 C000      1040   push ar0
0E26 A84C      1040   mov r0, bcd+3
0E28 1201C0    1040   lcall ?Send_BCD
0E2B D000      1040   pop ar0
0E2D C000      1041   push ar0
0E2F A84B      1041   mov r0, bcd+2
0E31 1201C0    1041   lcall ?Send_BCD
0E34 D000      1041   pop ar0
0E36           1042       put_decimal_1:
0E36 3099FD    1043       jnb TI, put_decimal_1 ; Wait for transmission to complete
0E39 C299      1044       clr TI
0E3B 75992E    1045       mov SBUF, #'.'
0E3E C000      1046   push ar0
0E40 A84A      1046   mov r0, bcd+1
0E42 1201C0    1046   lcall ?Send_BCD
0E45 D000      1046   pop ar0
0E47 C000      1047   push ar0
0E49 A849      1047   mov r0, bcd+0
0E4B 1201C0    1047   lcall ?Send_BCD
0E4E D000      1047   pop ar0
0E50           1048       put_r_1:
0E50 3099FD    1049       jnb TI, put_r_1 ; Wait for transmission to complete
0E53 C299      1050       clr TI
0E55 75990D    1051       mov SBUF, #'\r'
0E58           1052       put_n_1:
0E58 3099FD    1053       jnb TI, put_n_1 ; Wait for transmission to complete
0E5B C299      1054       clr TI
0E5D 75990A    1055       mov SBUF, #'\n'
0E60           1056   
0E60 22        1057            ret
0E61           1058   
0E61           1059   clearx:
0E61 753D00    1060            mov x+0, #0x00
0E64 753E00    1061            mov x+1, #0x00
0E67 753F00    1062            mov x+2, #0x00
0E6A 754000    1063            mov x+3, #0x00
0E6D 22        1064            ret 
0E6E           1065   
0E6E           1066   check_temps:
0E6E E536      1067            mov a, current_temp 
0E70 9532      1068            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0E72           1069            ;soak temp is 10 for 100, current temp is 1 for 100 
0E72 4012      1070            jc skipp2 ; skip if current_temp < soak_temp (carry bit set)
0E74 E537      1071            mov a, current_temp_hund
0E76 B53303    1072            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
0E79 753002    1073            mov STATE, #0x02
0E7C           1074   next2:
0E7C 22        1075            ret
0E7D           1076   
0E7D           1077   check_currenttemp:
0E7D E536      1078            mov a, current_temp
0E7F 9450      1079            subb a, #0x50
0E81 4003      1080            jc skipp2
0E83 D208      1081            setb temp_flag ; set safety flag if temp >=60
0E85 22        1082            ret
0E86           1083            
0E86           1084   skipp2:
0E86 22        1085            ret
0E87           1086            
0E87           1087   safety_feature:
0E87 E539      1088            mov a, seconds
0E89 B43CFA    1089            cjne a, #0x3C, skipp2 ; skip if current time is not 60
0E8C 2008F7    1090            jb temp_flag, skipp2 ; skip if temperature checks passed
0E8F 120AF3    1091            lcall display_blank
0E92 753B00    1092            mov pwm, #0
0E95 C0E0      1093            push acc
0E97 7401      1093            mov a, #1
0E99 14        1093            dec a
0E9A 120185    1093            lcall ?Set_Cursor_1 ; Select column and row
0E9D D0E0      1093            pop acc
0E9F C083      1094            push dph
0EA1 C082      1094            push dpl
0EA3 C0E0      1094            push acc
0EA5 900075    1094            mov dptr, #safety_message
0EA8 120178    1094            lcall ?Send_Constant_String
0EAB D0E0      1094            pop acc
0EAD D082      1094            pop dpl
0EAF D083      1094            pop dph
0EB1 C0E0      1095            push acc
0EB3 7401      1095            mov a, #1
0EB5 14        1095            dec a
0EB6 120183    1095            lcall ?Set_Cursor_2 ; Select column and row
0EB9 D0E0      1095            pop acc
0EBB C083      1096            push dph
0EBD C082      1096            push dpl
0EBF C0E0      1096            push acc
0EC1 90007D    1096            mov dptr, #safety_message1
0EC4 120178    1096            lcall ?Send_Constant_String
0EC7 D0E0      1096            pop acc
0EC9 D082      1096            pop dpl
0ECB D083      1096            pop dph
0ECD           1097   
0ECD           1098   safety_feature_loop:
0ECD C0E0      1099            push acc
0ECF 7408      1099            mov a, #8
0ED1 14        1099            dec a
0ED2 120185    1099            lcall ?Set_Cursor_1 ; Select column and row
0ED5 D0E0      1099            pop acc
0ED7 C0E0      1100            push acc
0ED9 7421      1100            mov a, #'!'
0EDB 12013B    1100            lcall ?WriteData
0EDE D0E0      1100            pop acc
0EE0 C002      1101            push AR2
0EE2 7AFA      1101            mov R2, #250
0EE4 1200F6    1101            lcall ?Wait_Milli_Seconds
0EE7 D002      1101            pop AR2
0EE9 C0E0      1102            push acc
0EEB 7408      1102            mov a, #8
0EED 14        1102            dec a
0EEE 120185    1102            lcall ?Set_Cursor_1 ; Select column and row
0EF1 D0E0      1102            pop acc
0EF3 C0E0      1103            push acc
0EF5 7420      1103            mov a, #' '
0EF7 12013B    1103            lcall ?WriteData
0EFA D0E0      1103            pop acc
0EFC C002      1104            push AR2
0EFE 7AFA      1104            mov R2, #250
0F00 1200F6    1104            lcall ?Wait_Milli_Seconds
0F03 D002      1104            pop AR2
0F05 020ECD    1105            ljmp safety_feature_loop
0F08           1106   
0F08           1107   
0F08           1108   
0F08           1109   ; checks secs for state 2 -> 3
0F08           1110   check_secs_s2:
0F08 853149    1111            mov bcd, soak_time                      ; soak_time stored as bcd
0F0B 120267    1112            lcall bcd2hex
0F0E E53D      1113       mov a, x
0F10 B53903    1114       cjne a, seconds, skip_check_secs_s2
0F13           1115            ;lcall debug_display
0F13 753003    1116       mov state, #3
0F16           1117   skip_check_secs_s2:
0F16 22        1118       ret
0F17           1119   
0F17           1120   skipp3:
0F17 22        1121            ret
0F18           1122   
0F18           1123   ; checks temp for state 3 -> 4
0F18           1124   check_temps_s3:
0F18 E536      1125            mov a, current_temp 
0F1A 9535      1126            subb a, Reflow_temp
0F1C 40F9      1127            jc skipp3
0F1E E537      1128            mov a, current_temp_hund
0F20 B53C03    1129            cjne a, reflow_temp_100, nxt2
0F23 753004    1130            mov STATe, #0x04
0F26           1131   nxt2:
0F26 22        1132            ret
0F27           1133   
0F27           1134   ; checks secs for state 4 -> 5
0F27           1135   check_secs_s4:
0F27 853449    1136            mov bcd, reflow_time ; reflow_time stored as bcd
0F2A 120267    1137            lcall bcd2hex
0F2D E53D      1138       mov a, x
0F2F B53903    1139       cjne a, seconds, skip_check_secs_s4
0F32 753005    1140       mov state, #5
0F35           1141   skip_check_secs_s4:
0F35 22        1142       ret
0F36           1143   
0F36           1144   ; checks temp for state 5 -> 0
0F36           1145   check_temp_s5:
0F36 7460      1146       mov a, #0x60
0F38 9536      1147            subb a, current_temp
0F3A 40DB      1148            jc skipp3
0F3C E537      1149            mov a, current_temp_hund
0F3E B40003    1150            cjne a, #0, nx2
0F41 753000    1151            mov STATE, #0x00
0F44           1152   nx2:
0F44 22        1153            ret
0F45 22        1154   ret
0F46           1155   
0F46           1156   reset_seconds:
0F46 E539      1157            mov a, seconds
0F48 7400      1158            mov a, #0x00
0F4A F539      1159            mov seconds, a
0F4C           1160            ;lcall clearx
0F4C           1161            ;mov x, soak_time
0F4C           1162            ;lcall bcd2hex
0F4C           1163            ;mov soak_time, x
0F4C           1164   
0F4C           1165            ;mov a, seconds
0F4C           1166            ;SUBB a, soak_time
0F4C           1167            ;mov seconds, a
0F4C 22        1168   ret
0F4D           1169   
0F4D           1170   check_fahrenheit:
0F4D 200903    1171            jb fahrenheit_flag, fahrenheit_display
0F50 020F82    1172            ljmp celsius_display
0F53           1173   
0F53           1174   fahrenheit_display:
0F53 C0E0      1175            push acc
0F55 740D      1175            mov a, #13
0F57 14        1175            dec a
0F58 120183    1175            lcall ?Set_Cursor_2 ; Select column and row
0F5B D0E0      1175            pop acc
0F5D C083      1176            push dph
0F5F C082      1176            push dpl
0F61 C0E0      1176            push acc
0F63 9000EA    1176            mov dptr, #blank_unit
0F66 120178    1176            lcall ?Send_Constant_String
0F69 D0E0      1176            pop acc
0F6B D082      1176            pop dpl
0F6D D083      1176            pop dph
0F6F C083      1177            push dph
0F71 C082      1177            push dpl
0F73 C0E0      1177            push acc
0F75 9000E2    1177            mov dptr, #fahrenheit
0F78 120178    1177            lcall ?Send_Constant_String
0F7B D0E0      1177            pop acc
0F7D D082      1177            pop dpl
0F7F D083      1177            pop dph
0F81 22        1178            ret 
0F82           1179   
0F82           1180   celsius_display:
0F82 C0E0      1181            push acc
0F84 740D      1181            mov a, #13
0F86 14        1181            dec a
0F87 120183    1181            lcall ?Set_Cursor_2 ; Select column and row
0F8A D0E0      1181            pop acc
0F8C C083      1182            push dph
0F8E C082      1182            push dpl
0F90 C0E0      1182            push acc
0F92 9000EA    1182            mov dptr, #blank_unit
0F95 120178    1182            lcall ?Send_Constant_String
0F98 D0E0      1182            pop acc
0F9A D082      1182            pop dpl
0F9C D083      1182            pop dph
0F9E C083      1183            push dph
0FA0 C082      1183            push dpl
0FA2 C0E0      1183            push acc
0FA4 9000E0    1183            mov dptr, #celsius
0FA7 120178    1183            lcall ?Send_Constant_String
0FAA D0E0      1183            pop acc
0FAC D082      1183            pop dpl
0FAE D083      1183            pop dph
0FB0 22        1184            ret 
0FB1           1185   
0FB1           1186   main:
0FB1 75817F    1187            mov sp, #0x7f
0FB4           1188   
0FB4 75B100    1189            mov P0M1, #0x00
0FB7 75B200    1190       mov P0M2, #0x00
0FBA 75B300    1191       mov P1M1, #0x00
0FBD 75B400    1192       mov P1M2, #0x00
0FC0 75AD00    1193       mov P3M2, #0x00
0FC3 75AD00    1194       mov P3M2, #0x00
0FC6           1195   
0FC6 12044E    1196            lcall Init_All
0FC9 120145    1197       lcall LCD_4BIT
0FCC 1204D7    1198            lcall Timer2_ISR
0FCF 1204B4    1199            lcall Timer0_Init
0FD2           1200       
0FD2           1201        ; initial messages in LCD
0FD2 753000    1202       mov STATE, #0x00
0FD5 753100    1203       mov Soak_time, #0x00
0FD8 753200    1204       mov Soak_temp, #0x00
0FDB 753300    1205       mov soak_temp_hund, #0x00
0FDE 753400    1206       mov Reflow_time, #0x00
0FE1 753500    1207       mov Reflow_temp, #0x00
0FE4 753600    1208       mov current_temp, #0x00
0FE7 753700    1209       mov current_temp_hund, #0x00
0FEA 753900    1210       mov seconds, #0x00
0FED 753A00    1211       mov pwm_counter, #0x00
0FF0 753B00    1212       mov pwm, #0x00
0FF3 753C00    1213       mov reflow_temp_100, #0x00
0FF6 C205      1214       clr decrement1
0FF8 C206      1215       clr s_flag 
0FFA C209      1216       clr fahrenheit_flag
0FFC C28C      1217            clr TR0
0FFE C20A      1218            clr mute_flag
1000           1219            
1000           1220   Forever:
1000 120AF3    1221            lcall display_blank
1003           1222   
1003           1223   state_0:
1003 C0E0      1224            push acc
1005 7401      1224            mov a, #1
1007 14        1224            dec a
1008 120185    1224            lcall ?Set_Cursor_1 ; Select column and row
100B D0E0      1224            pop acc
100D C083      1225            push dph
100F C082      1225            push dpl
1011 C0E0      1225            push acc
1013 90002E    1225            mov dptr, #soak_param
1016 120178    1225            lcall ?Send_Constant_String
1019 D0E0      1225            pop acc
101B D082      1225            pop dpl
101D D083      1225            pop dph
101F C0E0      1226            push acc
1021 7401      1226            mov a, #1
1023 14        1226            dec a
1024 120183    1226            lcall ?Set_Cursor_2 ; Select column and row
1027 D0E0      1226            pop acc
1029 C083      1227            push dph
102B C082      1227            push dpl
102D C0E0      1227            push acc
102F 90003D    1227            mov dptr, #reflow_param
1032 120178    1227            lcall ?Send_Constant_String
1035 D0E0      1227            pop acc
1037 D082      1227            pop dpl
1039 D083      1227            pop dph
103B           1228   
103B           1229   state_0_loop:
103B E530      1230            mov a, STATE
103D 753B64    1231       mov pwm, #100
1040 B4001C    1232            cjne a, #0, state_1
1043 1204F8    1233            lcall LCD_PB
1046 120556    1234            lcall check_decrement
1049 120A32    1235            lcall display_menu
104C 1209BA    1236            lcall Check_start
104F C0E0      1237            push acc
1051 7410      1237            mov a, #16
1053 14        1237            dec a
1054 120185    1237            lcall ?Set_Cursor_1 ; Select column and row
1057 D0E0      1237            pop acc
1059           1237   
1059 1209E2    1238            lcall check_mute
105C 02103B    1239            ljmp state_0_loop
105F           1240   
105F           1241   state_1: 
105F 120AF3    1242            lcall display_blank
1062 C0E0      1243            push acc
1064 7410      1243            mov a, #16
1066 14        1243            dec a
1067 120183    1243            lcall ?Set_Cursor_2 ; Select column and row
106A D0E0      1243            pop acc
106C 120A12    1244            lcall display_mute
106F 1209E2    1245            lcall check_mute
1072 753900    1246            mov seconds, #0x00
1075 C0E0      1247            push acc
1077 7401      1247            mov a, #1
1079 14        1247            dec a
107A 120185    1247            lcall ?Set_Cursor_1 ; Select column and row
107D D0E0      1247            pop acc
107F C083      1248            push dph
1081 C082      1248            push dpl
1083 C0E0      1248            push acc
1085 90004E    1248            mov dptr, #heating_to_s
1088 120178    1248            lcall ?Send_Constant_String
108B D0E0      1248            pop acc
108D D082      1248            pop dpl
108F D083      1248            pop dph
1091 C0E0      1249            push acc
1093 7401      1249            mov a, #1
1095 14        1249            dec a
1096 120183    1249            lcall ?Set_Cursor_2 ; Select column and row
1099 D0E0      1249            pop acc
109B C083      1250            push dph
109D C082      1250            push dpl
109F C0E0      1250            push acc
10A1 90005E    1250            mov dptr, #heating_temp
10A4 120178    1250            lcall ?Send_Constant_String
10A7 D0E0      1250            pop acc
10A9 D082      1250            pop dpl
10AB D083      1250            pop dph
10AD           1251   
10AD C0E0      1252            push acc
10AF 7404      1252            mov a, #4
10B1 14        1252            dec a
10B2 120185    1252            lcall ?Set_Cursor_1 ; Select column and row
10B5 D0E0      1252            pop acc
10B7 C000      1253            push ar0
10B9 A833      1253            mov r0, Soak_temp_hund
10BB 12018A    1253            lcall ?Display_BCD
10BE D000      1253            pop ar0
10C0 C0E0      1254            push acc
10C2 7405      1254            mov a, #5
10C4 14        1254            dec a
10C5 120185    1254            lcall ?Set_Cursor_1 ; Select column and row
10C8 D0E0      1254            pop acc
10CA C000      1255            push ar0
10CC A832      1255            mov r0, soak_temp
10CE 12018A    1255            lcall ?Display_BCD
10D1 D000      1255            pop ar0
10D3           1256   
10D3 120E61    1257            lcall clearx
10D6 754900    1258            mov bcd+0, #0x00
10D9 754A00    1259            mov bcd+1, #0x00
10DC 754B00    1260            mov bcd+2, #0x00
10DF 754C00    1261            mov bcd+3, #0x00
10E2 853349    1262            mov bcd, soak_temp_hund
10E5 120267    1263            lcall bcd2hex
10E8 75410A    1264            mov y+0, #low (10 % 0x10000) 
10EB 754200    1264            mov y+1, #high(10 % 0x10000) 
10EE 754300    1264            mov y+2, #low (10 / 0x10000) 
10F1 754400    1264            mov y+3, #high(10 / 0x10000) 
10F4 1203E5    1265            lcall div32
10F7 1201DE    1266            lcall hex2bcd
10FA 854933    1267            mov soak_temp_hund, bcd
10FD 200A16    1268            jb mute_flag, state_1_loop
1100 D28C      1269            setb TR0
1102 C002      1270            push AR2
1104 7AFA      1270            mov R2, #250
1106 1200F6    1270            lcall ?Wait_Milli_Seconds
1109 D002      1270            pop AR2
110B C002      1271            push AR2
110D 7AFA      1271            mov R2, #250
110F 1200F6    1271            lcall ?Wait_Milli_Seconds
1112 D002      1271            pop AR2
1114 C28C      1272       clr TR0
1116           1273            
1116           1274   state_1_loop:
1116 E530      1275            mov a, STATE
1118 B40134    1276            cjne a, #1, state_2
111B 120AA5    1277            lcall display_heating_s
111E 753B00    1278            mov pwm, #0
1121 1209D0    1279            lcall check_convert
1124 120B6C    1280            lcall outside_tmp
1127 120BE7    1281            lcall oven_tmp
112A 120E7D    1282            lcall check_currenttemp
112D 120E87    1283            lcall safety_feature
1130 120E6E    1284            lcall check_temps
1133 120F4D    1285            lcall check_fahrenheit
1136 C0E0      1286            push acc
1138 7410      1286            mov a, #16
113A 14        1286            dec a
113B 120183    1286            lcall ?Set_Cursor_2 ; Select column and row
113E D0E0      1286            pop acc
1140 1209E2    1287            lcall check_mute
1143 C002      1288            push AR2
1145 7AFA      1288            mov R2, #250
1147 1200F6    1288            lcall ?Wait_Milli_Seconds
114A D002      1288            pop AR2
114C 021116    1289            ljmp state_1_loop
114F           1290   
114F           1291   state_2:
114F 120AF3    1292            lcall display_blank
1152 C0E0      1293            push acc
1154 7410      1293            mov a, #16
1156 14        1293            dec a
1157 120183    1293            lcall ?Set_Cursor_2 ; Select column and row
115A D0E0      1293            pop acc
115C 120A12    1294            lcall display_mute
115F 1209E2    1295            lcall check_mute
1162 753900    1296            mov seconds, #0
1165 C0E0      1297            push acc
1167 7401      1297            mov a, #1
1169 14        1297            dec a
116A 120185    1297            lcall ?Set_Cursor_1 ; Select column and row
116D D0E0      1297            pop acc
116F C083      1298            push dph
1171 C082      1298            push dpl
1173 C0E0      1298            push acc
1175 90008C    1298            mov dptr, #soaking
1178 120178    1298            lcall ?Send_Constant_String
117B D0E0      1298            pop acc
117D D082      1298            pop dpl
117F D083      1298            pop dph
1181 C0E0      1299            push acc
1183 7401      1299            mov a, #1
1185 14        1299            dec a
1186 120183    1299            lcall ?Set_Cursor_2 ; Select column and row
1189 D0E0      1299            pop acc
118B C083      1300            push dph
118D C082      1300            push dpl
118F C0E0      1300            push acc
1191 9000A7    1300            mov dptr, #time
1194 120178    1300            lcall ?Send_Constant_String
1197 D0E0      1300            pop acc
1199 D082      1300            pop dpl
119B D083      1300            pop dph
119D C0E0      1301            push acc
119F 740E      1301            mov a, #14
11A1 14        1301            dec a
11A2 120185    1301            lcall ?Set_Cursor_1 ; Select column and row
11A5 D0E0      1301            pop acc
11A7 C000      1302            push ar0
11A9 A831      1302            mov r0, soak_time
11AB 12018A    1302            lcall ?Display_BCD
11AE D000      1302            pop ar0
11B0 200A16    1303            jb mute_flag, state_2_loop
11B3 D28C      1304            setb TR0
11B5 C002      1305            push AR2
11B7 7AFA      1305            mov R2, #250
11B9 1200F6    1305            lcall ?Wait_Milli_Seconds
11BC D002      1305            pop AR2
11BE C002      1306            push AR2
11C0 7AFA      1306            mov R2, #250
11C2 1200F6    1306            lcall ?Wait_Milli_Seconds
11C5 D002      1306            pop AR2
11C7 C28C      1307       clr TR0
11C9           1308   
11C9           1309   
11C9           1310   state_2_loop: 
11C9 E530      1311            mov a, STATE
11CB B40241    1312       cjne a, #2, state_3
11CE C0E0      1313            push acc
11D0 7406      1313            mov a, #6
11D2 14        1313            dec a
11D3 120183    1313            lcall ?Set_Cursor_2 ; Select column and row
11D6 D0E0      1313            pop acc
11D8 120E61    1314            lcall clearx
11DB 85393D    1315            mov x, seconds 
11DE 1201DE    1316            lcall hex2bcd 
11E1 C000      1317            push ar0
11E3 A849      1317            mov r0, bcd
11E5 12018A    1317            lcall ?Display_BCD
11E8 D000      1317            pop ar0
11EA 120E61    1318            lcall clearx
11ED 753B50    1319            mov pwm, #80
11F0 120F08    1320            lcall check_secs_s2
11F3 120D24    1321            lcall stage_temp
11F6 C0E0      1322            push acc
11F8 7410      1322            mov a, #16
11FA 14        1322            dec a
11FB 120183    1322            lcall ?Set_Cursor_2 ; Select column and row
11FE D0E0      1322            pop acc
1200 1209E2    1323            lcall check_mute
1203 C002      1324            push AR2
1205 7AFA      1324            mov R2, #250
1207 1200F6    1324            lcall ?Wait_Milli_Seconds
120A D002      1324            pop AR2
120C 0211C9    1325            ljmp state_2_loop
120F           1326   
120F           1327   state_3:
120F 753900    1328            mov seconds, #0
1212 120F46    1329            lcall reset_seconds
1215 120AF3    1330            lcall display_blank
1218 C0E0      1331            push acc
121A 7401      1331            mov a, #1
121C 14        1331            dec a
121D 120185    1331            lcall ?Set_Cursor_1 ; Select column and row
1220 D0E0      1331            pop acc
1222 C083      1332            push dph
1224 C082      1332            push dpl
1226 C0E0      1332            push acc
1228 9000B0    1332            mov dptr, #heating_to_r
122B 120178    1332            lcall ?Send_Constant_String
122E D0E0      1332            pop acc
1230 D082      1332            pop dpl
1232 D083      1332            pop dph
1234 C0E0      1333            push acc
1236 7401      1333            mov a, #1
1238 14        1333            dec a
1239 120183    1333            lcall ?Set_Cursor_2 ; Select column and row
123C D0E0      1333            pop acc
123E C083      1334            push dph
1240 C082      1334            push dpl
1242 C0E0      1334            push acc
1244 90005E    1334            mov dptr, #heating_temp
1247 120178    1334            lcall ?Send_Constant_String
124A D0E0      1334            pop acc
124C D082      1334            pop dpl
124E D083      1334            pop dph
1250 C0E0      1335            push acc
1252 7410      1335            mov a, #16
1254 14        1335            dec a
1255 120183    1335            lcall ?Set_Cursor_2 ; Select column and row
1258 D0E0      1335            pop acc
125A           1335   
125A 120A12    1336            lcall display_mute
125D 1209E2    1337            lcall check_mute
1260           1338            
1260 C0E0      1339            push acc
1262 7404      1339            mov a, #4
1264 14        1339            dec a
1265 120185    1339            lcall ?Set_Cursor_1 ; Select column and row
1268 D0E0      1339            pop acc
126A           1339   
126A C000      1340            push ar0
126C A83C      1340            mov r0, reflow_temp_100
126E 12018A    1340            lcall ?Display_BCD
1271 D000      1340            pop ar0
1273 C0E0      1341            push acc
1275 7405      1341            mov a, #5
1277 14        1341            dec a
1278 120185    1341            lcall ?Set_Cursor_1 ; Select column and row
127B D0E0      1341            pop acc
127D C000      1342            push ar0
127F A835      1342            mov r0, reflow_temp
1281 12018A    1342            lcall ?Display_BCD
1284 D000      1342            pop ar0
1286           1343   
1286 120E61    1344            lcall clearx
1289 754900    1345            mov bcd+0, #0x00
128C 754A00    1346            mov bcd+1, #0x00
128F 754B00    1347            mov bcd+2, #0x00
1292 754C00    1348            mov bcd+3, #0x00
1295 853C49    1349            mov bcd, reflow_temp_100
1298 120267    1350            lcall bcd2hex
129B 75410A    1351            mov y+0, #low (10 % 0x10000) 
129E 754200    1351            mov y+1, #high(10 % 0x10000) 
12A1 754300    1351            mov y+2, #low (10 / 0x10000) 
12A4 754400    1351            mov y+3, #high(10 / 0x10000) 
12A7 1203E5    1352            lcall div32
12AA 1201DE    1353            lcall hex2bcd
12AD 85493C    1354            mov reflow_temp_100, bcd
12B0 200A16    1355            jb mute_flag, state_3_loop
12B3 D28C      1356            setb TR0
12B5 C002      1357            push AR2
12B7 7AFA      1357            mov R2, #250
12B9 1200F6    1357            lcall ?Wait_Milli_Seconds
12BC D002      1357            pop AR2
12BE C002      1358            push AR2
12C0 7AFA      1358            mov R2, #250
12C2 1200F6    1358            lcall ?Wait_Milli_Seconds
12C5 D002      1358            pop AR2
12C7 C28C      1359       clr TR0
12C9           1360   
12C9           1361   state_3_loop:
12C9 E530      1362            mov a, STATE
12CB B4032E    1363            cjne a, #3, state_4
12CE 120ACC    1364            lcall display_heating_r
12D1 753B00    1365            mov pwm, #0
12D4 1209D0    1366            lcall check_convert
12D7 120B6C    1367            lcall outside_tmp
12DA 120BE7    1368            lcall oven_tmp
12DD 120F18    1369            lcall check_temps_s3
12E0 120F4D    1370            lcall check_fahrenheit
12E3 C0E0      1371            push acc
12E5 7410      1371            mov a, #16
12E7 14        1371            dec a
12E8 120183    1371            lcall ?Set_Cursor_2 ; Select column and row
12EB D0E0      1371            pop acc
12ED 1209E2    1372            lcall check_mute
12F0 C002      1373            push AR2
12F2 7AFA      1373            mov R2, #250
12F4 1200F6    1373            lcall ?Wait_Milli_Seconds
12F7 D002      1373            pop AR2
12F9 0212C9    1374            ljmp state_3_loop
12FC           1375   
12FC           1376   state_4:
12FC 120AF3    1377            lcall display_blank
12FF 753900    1378            mov seconds, #0
1302 C0E0      1379            push acc
1304 7401      1379            mov a, #1
1306 14        1379            dec a
1307 120185    1379            lcall ?Set_Cursor_1 ; Select column and row
130A D0E0      1379            pop acc
130C C083      1380            push dph
130E C082      1380            push dpl
1310 C0E0      1380            push acc
1312 90009A    1380            mov dptr, #reflow
1315 120178    1380            lcall ?Send_Constant_String
1318 D0E0      1380            pop acc
131A D082      1380            pop dpl
131C D083      1380            pop dph
131E C0E0      1381            push acc
1320 7401      1381            mov a, #1
1322 14        1381            dec a
1323 120183    1381            lcall ?Set_Cursor_2 ; Select column and row
1326 D0E0      1381            pop acc
1328 C083      1382            push dph
132A C082      1382            push dpl
132C C0E0      1382            push acc
132E 9000A7    1382            mov dptr, #time
1331 120178    1382            lcall ?Send_Constant_String
1334 D0E0      1382            pop acc
1336 D082      1382            pop dpl
1338 D083      1382            pop dph
133A C0E0      1383            push acc
133C 740E      1383            mov a, #14
133E 14        1383            dec a
133F 120185    1383            lcall ?Set_Cursor_1 ; Select column and row
1342 D0E0      1383            pop acc
1344 C000      1384            push ar0
1346 A834      1384            mov r0, reflow_time
1348 12018A    1384            lcall ?Display_BCD
134B D000      1384            pop ar0
134D C0E0      1385            push acc
134F 7410      1385            mov a, #16
1351 14        1385            dec a
1352 120183    1385            lcall ?Set_Cursor_2 ; Select column and row
1355 D0E0      1385            pop acc
1357 120A12    1386            lcall display_mute
135A 1209E2    1387            lcall check_mute
135D 200A16    1388            jb mute_flag, state_4_loop
1360 D28C      1389            setb TR0
1362 C002      1390            push AR2
1364 7AFA      1390            mov R2, #250
1366 1200F6    1390            lcall ?Wait_Milli_Seconds
1369 D002      1390            pop AR2
136B C002      1391            push AR2
136D 7AFA      1391            mov R2, #250
136F 1200F6    1391            lcall ?Wait_Milli_Seconds
1372 D002      1391            pop AR2
1374 C28C      1392       clr TR0
1376           1393   
1376           1394   state_4_loop:
1376 E530      1395       mov a, STATE
1378 B40441    1396       cjne a, #4, state_5
137B C0E0      1397            push acc
137D 7406      1397            mov a, #6
137F 14        1397            dec a
1380 120183    1397            lcall ?Set_Cursor_2 ; Select column and row
1383 D0E0      1397            pop acc
1385 120E61    1398       lcall clearx
1388 85393D    1399       mov x, seconds
138B 1201DE    1400       lcall hex2bcd
138E C000      1401            push ar0
1390 A849      1401            mov r0, bcd
1392 12018A    1401            lcall ?Display_BCD
1395 D000      1401            pop ar0
1397 120E61    1402       lcall clearx
139A 753B50    1403       mov pwm, #80
139D 120F27    1404       lcall check_secs_s4
13A0 120D24    1405            lcall stage_temp
13A3 C0E0      1406            push acc
13A5 7410      1406            mov a, #16
13A7 14        1406            dec a
13A8 120183    1406            lcall ?Set_Cursor_2 ; Select column and row
13AB D0E0      1406            pop acc
13AD 1209E2    1407            lcall check_mute
13B0 C002      1408            push AR2
13B2 7AFA      1408            mov R2, #250
13B4 1200F6    1408            lcall ?Wait_Milli_Seconds
13B7 D002      1408            pop AR2
13B9 021376    1409       ljmp state_4_loop
13BC           1410   
13BC           1411   state_5:
13BC 120AF3    1412       lcall display_blank
13BF C0E0      1413            push acc
13C1 7401      1413            mov a, #1
13C3 14        1413            dec a
13C4 120185    1413            lcall ?Set_Cursor_1 ; Select column and row
13C7 D0E0      1413            pop acc
13C9 C083      1414            push dph
13CB C082      1414            push dpl
13CD C0E0      1414            push acc
13CF 9000C0    1414            mov dptr, #cooling
13D2 120178    1414            lcall ?Send_Constant_String
13D5 D0E0      1414            pop acc
13D7 D082      1414            pop dpl
13D9 D083      1414            pop dph
13DB C0E0      1415            push acc
13DD 7401      1415            mov a, #1
13DF 14        1415            dec a
13E0 120183    1415            lcall ?Set_Cursor_2 ; Select column and row
13E3 D0E0      1415            pop acc
13E5 C083      1416            push dph
13E7 C082      1416            push dpl
13E9 C0E0      1416            push acc
13EB 90005E    1416            mov dptr, #heating_temp
13EE 120178    1416            lcall ?Send_Constant_String
13F1 D0E0      1416            pop acc
13F3 D082      1416            pop dpl
13F5 D083      1416            pop dph
13F7 C0E0      1417            push acc
13F9 7410      1417            mov a, #16
13FB 14        1417            dec a
13FC 120183    1417            lcall ?Set_Cursor_2 ; Select column and row
13FF D0E0      1417            pop acc
1401           1417   
1401 120A12    1418            lcall display_mute
1404 1209E2    1419            lcall check_mute
1407 200A16    1420            jb mute_flag, state_5_loop
140A D28C      1421            setb TR0
140C C002      1422            push AR2
140E 7AFA      1422            mov R2, #250
1410 1200F6    1422            lcall ?Wait_Milli_Seconds
1413 D002      1422            pop AR2
1415 C002      1423            push AR2
1417 7AFA      1423            mov R2, #250
1419 1200F6    1423            lcall ?Wait_Milli_Seconds
141C D002      1423            pop AR2
141E C28C      1424       clr TR0
1420           1425       
1420           1426   state_5_loop:
1420 E530      1427            mov a, STATE
1422 B4053E    1428            cjne a, #5, state_6
1425 753B64    1429            mov pwm, #100
1428 C0E0      1430            push acc
142A 7407      1430            mov a, #7
142C 14        1430            dec a
142D 120183    1430            lcall ?Set_Cursor_2 ; Select column and row
1430 D0E0      1430            pop acc
1432           1430   
1432 C000      1431            push ar0
1434 A836      1431            mov r0, current_temp
1436 12018A    1431            lcall ?Display_BCD
1439 D000      1431            pop ar0
143B 1209D0    1432            lcall check_convert
143E 120B6C    1433            lcall outside_tmp
1441 120BE7    1434            lcall oven_tmp
1444 120F36    1435            lcall check_temp_s5
1447 120F4D    1436            lcall check_fahrenheit
144A C0E0      1437            push acc
144C 7410      1437            mov a, #16
144E 14        1437            dec a
144F 120183    1437            lcall ?Set_Cursor_2 ; Select column and row
1452 D0E0      1437            pop acc
1454 1209E2    1438            lcall check_mute
1457 C002      1439            push AR2
1459 7AFA      1439            mov R2, #250
145B 1200F6    1439            lcall ?Wait_Milli_Seconds
145E D002      1439            pop AR2
1460 021420    1440            ljmp state_5_loop
1463           1441   
1463           1442   state_6:
1463 120AF3    1443            lcall display_blank
1466 C0E0      1444            push acc
1468 7401      1444            mov a, #1
146A 14        1444            dec a
146B 120185    1444            lcall ?Set_Cursor_1 ; Select column and row
146E D0E0      1444            pop acc
1470 C083      1445            push dph
1472 C082      1445            push dpl
1474 C0E0      1445            push acc
1476 9000D0    1445            mov dptr, #done
1479 120178    1445            lcall ?Send_Constant_String
147C D0E0      1445            pop acc
147E D082      1445            pop dpl
1480 D083      1445            pop dph
1482 C0E0      1446            push acc
1484 7401      1446            mov a, #1
1486 14        1446            dec a
1487 120183    1446            lcall ?Set_Cursor_2 ; Select column and row
148A D0E0      1446            pop acc
148C C083      1447            push dph
148E C082      1447            push dpl
1490 C0E0      1447            push acc
1492 9000D5    1447            mov dptr, #ready
1495 120178    1447            lcall ?Send_Constant_String
1498 D0E0      1447            pop acc
149A D082      1447            pop dpl
149C D083      1447            pop dph
149E C0E0      1448            push acc
14A0 7410      1448            mov a, #16
14A2 14        1448            dec a
14A3 120183    1448            lcall ?Set_Cursor_2 ; Select column and row
14A6 D0E0      1448            pop acc
14A8 120A12    1449            lcall display_mute
14AB 1209E2    1450            lcall check_mute
14AE 200A66    1451            jb mute_flag, state_6_loop
14B1 B28C      1452            cpl TR0
14B3 C002      1453            push AR2
14B5 7AFA      1453            mov R2, #250
14B7 1200F6    1453            lcall ?Wait_Milli_Seconds
14BA D002      1453            pop AR2
14BC C002      1454            push AR2
14BE 7AFA      1454            mov R2, #250
14C0 1200F6    1454            lcall ?Wait_Milli_Seconds
14C3 D002      1454            pop AR2
14C5 B28C      1455       cpl TR0
14C7 C002      1456            push AR2
14C9 7AFA      1456            mov R2, #250
14CB 1200F6    1456            lcall ?Wait_Milli_Seconds
14CE D002      1456            pop AR2
14D0 C002      1457            push AR2
14D2 7AFA      1457            mov R2, #250
14D4 1200F6    1457            lcall ?Wait_Milli_Seconds
14D7 D002      1457            pop AR2
14D9 B28C      1458       cpl TR0
14DB C002      1459            push AR2
14DD 7AFA      1459            mov R2, #250
14DF 1200F6    1459            lcall ?Wait_Milli_Seconds
14E2 D002      1459            pop AR2
14E4 C002      1460            push AR2
14E6 7AFA      1460            mov R2, #250
14E8 1200F6    1460            lcall ?Wait_Milli_Seconds
14EB D002      1460            pop AR2
14ED B28C      1461       cpl TR0
14EF C002      1462            push AR2
14F1 7AFA      1462            mov R2, #250
14F3 1200F6    1462            lcall ?Wait_Milli_Seconds
14F6 D002      1462            pop AR2
14F8 C002      1463            push AR2
14FA 7AFA      1463            mov R2, #250
14FC 1200F6    1463            lcall ?Wait_Milli_Seconds
14FF D002      1463            pop AR2
1501 B28C      1464       cpl TR0
1503 C002      1465            push AR2
1505 7AFA      1465            mov R2, #250
1507 1200F6    1465            lcall ?Wait_Milli_Seconds
150A D002      1465            pop AR2
150C C002      1466            push AR2
150E 7AFA      1466            mov R2, #250
1510 1200F6    1466            lcall ?Wait_Milli_Seconds
1513 D002      1466            pop AR2
1515 B28C      1467       cpl TR0
1517           1468   
1517           1469   state_6_loop:
1517 7458      1470            mov a, #0x58
1519 120140    1470            lcall ?WriteCommand
151C 740E      1471            mov a, #01110B
151E 12013B    1471            lcall ?WriteData
1521 7409      1472            mov a, #01001B
1523 12013B    1472            lcall ?WriteData
1526 7409      1473            mov a, #01001B
1528 12013B    1473            lcall ?WriteData
152B 7409      1474            mov a, #01001B
152D 12013B    1474            lcall ?WriteData
1530 7409      1475            mov a, #01001B
1532 12013B    1475            lcall ?WriteData
1535 7409      1476            mov a, #01001B
1537 12013B    1476            lcall ?WriteData
153A 7408      1477            mov a, #01000B
153C 12013B    1477            lcall ?WriteData
153F 7410      1478            mov a, #10000B
1541 12013B    1478            lcall ?WriteData
1544 C0E0      1479            push acc
1546 740D      1479            mov a, #13
1548 14        1479            dec a
1549 120185    1479            lcall ?Set_Cursor_1 ; Select column and row
154C D0E0      1479            pop acc
154E 7403      1480            mov a, #3
1550 12013B    1480            lcall ?WriteData
1553           1480   
1553           1481   
1553 7460      1482            mov a, #0x60
1555 120140    1482            lcall ?WriteCommand
1558 7400      1483            mov a, #00000B
155A 12013B    1483            lcall ?WriteData
155D 7400      1484            mov a, #00000B
155F 12013B    1484            lcall ?WriteData
1562 7400      1485            mov a, #00000B
1564 12013B    1485            lcall ?WriteData
1567 7400      1486            mov a, #00000B
1569 12013B    1486            lcall ?WriteData
156C 7400      1487            mov a, #00000B
156E 12013B    1487            lcall ?WriteData
1571 7400      1488            mov a, #00000B
1573 12013B    1488            lcall ?WriteData
1576 741E      1489            mov a, #11110B
1578 12013B    1489            lcall ?WriteData
157B 7401      1490            mov a, #00001B
157D 12013B    1490            lcall ?WriteData
1580 C0E0      1491            push acc
1582 740E      1491            mov a, #14
1584 14        1491            dec a
1585 120185    1491            lcall ?Set_Cursor_1 ; Select column and row
1588 D0E0      1491            pop acc
158A 7404      1492            mov a, #4
158C 12013B    1492            lcall ?WriteData
158F           1492   
158F           1493   
158F 7468      1494            mov a, #0x68
1591 120140    1494            lcall ?WriteCommand
1594 7410      1495            mov a, #10000B
1596 12013B    1495            lcall ?WriteData
1599 7410      1496            mov a, #10000B
159B 12013B    1496            lcall ?WriteData
159E 7410      1497            mov a, #10000B
15A0 12013B    1497            lcall ?WriteData
15A3 7410      1498            mov a, #10000B
15A5 12013B    1498            lcall ?WriteData
15A8 7418      1499            mov a, #11000B
15AA 12013B    1499            lcall ?WriteData
15AD 7406      1500            mov a, #00110B
15AF 12013B    1500            lcall ?WriteData
15B2 7401      1501            mov a, #00001B
15B4 12013B    1501            lcall ?WriteData
15B7 7400      1502            mov a, #00000B
15B9 12013B    1502            lcall ?WriteData
15BC C0E0      1503            push acc
15BE 740D      1503            mov a, #13
15C0 14        1503            dec a
15C1 120183    1503            lcall ?Set_Cursor_2 ; Select column and row
15C4 D0E0      1503            pop acc
15C6 7405      1504            mov a, #5
15C8 12013B    1504            lcall ?WriteData
15CB           1504   
15CB           1505   
15CB 7470      1506            mov a, #0x70
15CD 120140    1506            lcall ?WriteCommand
15D0 741E      1507            mov a, #11110B
15D2 12013B    1507            lcall ?WriteData
15D5 7401      1508            mov a, #00001B
15D7 12013B    1508            lcall ?WriteData
15DA 741E      1509            mov a, #11110B
15DC 12013B    1509            lcall ?WriteData
15DF 7401      1510            mov a, #00001B
15E1 12013B    1510            lcall ?WriteData
15E4 741E      1511            mov a, #11110B
15E6 12013B    1511            lcall ?WriteData
15E9 7401      1512            mov a, #00001B
15EB 12013B    1512            lcall ?WriteData
15EE 741E      1513            mov a, #11110B
15F0 12013B    1513            lcall ?WriteData
15F3 7400      1514            mov a, #00000B
15F5 12013B    1514            lcall ?WriteData
15F8 C0E0      1515            push acc
15FA 740E      1515            mov a, #14
15FC 14        1515            dec a
15FD 120183    1515            lcall ?Set_Cursor_2 ; Select column and row
1600 D0E0      1515            pop acc
1602 7406      1516            mov a, #6
1604 12013B    1516            lcall ?WriteData
1607           1516   
1607           1517   
1607 C002      1518            push AR2
1609 7AFA      1518            mov R2, #250
160B 1200F6    1518            lcall ?Wait_Milli_Seconds
160E D002      1518            pop AR2
1610 C002      1519            push AR2
1612 7AFA      1519            mov R2, #250
1614 1200F6    1519            lcall ?Wait_Milli_Seconds
1617 D002      1519            pop AR2
1619           1520   
1619 7478      1521            mov a, #0x78
161B 120140    1521            lcall ?WriteCommand
161E 7400      1522            mov a, #00000B
1620 12013B    1522            lcall ?WriteData
1623 7400      1523            mov a, #00000B
1625 12013B    1523            lcall ?WriteData
1628 7400      1524            mov a, #00000B
162A 12013B    1524            lcall ?WriteData
162D 7400      1525            mov a, #00000B
162F 12013B    1525            lcall ?WriteData
1632 7400      1526            mov a, #00000B
1634 12013B    1526            lcall ?WriteData
1637 7407      1527            mov a, #00111B
1639 12013B    1527            lcall ?WriteData
163C 7408      1528            mov a, #01000B
163E 12013B    1528            lcall ?WriteData
1641 7410      1529            mov a, #10000B
1643 12013B    1529            lcall ?WriteData
1646 C0E0      1530            push acc
1648 740D      1530            mov a, #13
164A 14        1530            dec a
164B 120185    1530            lcall ?Set_Cursor_1 ; Select column and row
164E D0E0      1530            pop acc
1650 7407      1531            mov a, #7
1652 12013B    1531            lcall ?WriteData
1655           1531   
1655           1532            
1655           1533   
1655 C002      1534            push AR2
1657 7AFA      1534            mov R2, #250
1659 1200F6    1534            lcall ?Wait_Milli_Seconds
165C D002      1534            pop AR2
165E C002      1535            push AR2
1660 7AFA      1535            mov R2, #250
1662 1200F6    1535            lcall ?Wait_Milli_Seconds
1665 D002      1535            pop AR2
1667           1536   
1667 021517    1537            ljmp state_6_loop
166A           1538   
166A           1539   END
