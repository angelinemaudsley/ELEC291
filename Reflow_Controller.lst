0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             27   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             28   
0000             29   ORG 0x0000
0000 020A01      30            ljmp main
0023             31   org 0x0023
0023 32          32            reti
0024             33            ; Timer/Counter 2 overflow interrupt vector
002B             34   org 0x002B
002B 0204AE      35            ljmp Timer2_ISR
002E             36   
002E             37   START_BUTTON  equ P1.7
002E             38   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             39   
002E             40   
002E             41   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    42   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    43   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A78    44   heating_to_s:  db   'Ts:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
005E 54656D70    45   heating_temp:db    'Temp: ', 0;heating_temp:db    'Temp: xxxC', 0
     3A2000
0065 20202020    46   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0076 4552524F    47   safety_message:db  'ERROR: ', 0
     523A2000
007E 43616E74    48   safety_message1:db  'Cant Read Temp'
     20526561
     64205465
     6D70
008C 536F616B    49   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    50   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    51   time:db            'Time:xxs',0
     3A787873
     00
00B0 54723A78    52   heating_to_r:db    'Tr:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
00C0 436F6F6C    53   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0             54   
00D0             55   cseg
00D0             56   ; These 'equ' must match the hardware wiring
00D0             57   LCD_RS equ P1.3
00D0             58   LCD_E  equ P1.4
00D0             59   LCD_D4 equ P0.0
00D0             60   LCD_D5 equ P0.1
00D0             61   LCD_D6 equ P0.2
00D0             62   LCD_D7 equ P0.3
00D0             63   ;ADC_pn equ P1.1
00D0             64   
00D0             65   
                 67   	$LIST
01C2             69   
0030             70   DSEG at 30h
0030             71   STATE: ds 1
0031             72   Soak_time: ds 1
0032             73   Soak_temp: ds 1
0033             74   soak_temp_hund: ds 1
0034             75   Reflow_time: ds 1
0035             76   Reflow_temp: ds 1
0036             77   current_temp: ds 1
0037             78   current_temp_hund: ds 1
0038             79   outside_temp: ds 1
0039             80   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             81   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             82   pwm: ds 1 ; pwm percentage
003C             83   reflow_temp_100:ds 1
003D             84   x: ds 4
0041             85   y: ds 4
0045             86   z: ds 4
0049             87   bcd: ds 5
004E             88   
004E             89   
0000             90   BSEG
0000             91   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000             92   PB0: dbit 1
0001             93   PB1: dbit 1
0002             94   PB2: dbit 1
0003             95   PB3: dbit 1
0004             96   PB4: dbit 1
0005             97   decrement1: dbit 1
0006             98   s_flag: dbit 1 ; set to 1 every time a second has passed
0007             99   mf: dbit 1
0008            100   temp_flag: dbit 1
0009            101   
                546   $LIST
                103   $LIST
0432            105   
0432            106   CSEG
0432            107   
0432            108   Init_All:
0432            109            ; Configure all the pins for biderectional I/O
0432 75AC00     110            mov     P3M1, #0x00
0435 75AD00     111            mov     P3M2, #0x00
0438 75B300     112            mov     P1M1, #0x00
043B 75B400     113            mov     P1M2, #0x00
043E 75B100     114            mov     P0M1, #0x00
0441 75B200     115            mov     P0M2, #0x00
0444            116            
0444 438E10     117            orl     CKCON, #0x10 ; CLK is the input for timer 1
0447 438780     118            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
044A 759852     119            mov     SCON, #0x52
044D 53C4DF     120            anl     T3CON, #0b11011111
0450 53890F     121            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0453 438920     122            orl     TMOD, #0x20 ; Timer 1 Mode 2
0456 758DF7     123            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0459 D28E       124            setb TR1
045B            125            
045B            126            ; Using timer 0 for delay functions.  Initialize here:
045B C28C       127            clr     TR0 ; Stop timer 0
045D 438E08     128            orl     CKCON,#0x08 ; CLK is the input for timer 0
0460 5389F0     129            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0463 438901     130            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0466            131   
0466            132            ; Initialize timer 2 for periodic interrupts
0466 75C800     133            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
0469 75CDD7     134            mov TH2, #high(TIMER2_RELOAD)
046C 75CC79     135            mov TL2, #low(TIMER2_RELOAD)
046F            136            ; Set the reload value
046F 75C9A0     137            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0472 75CBD7     138            mov RCMP2H, #high(TIMER2_RELOAD)
0475 75CA79     139            mov RCMP2L, #low(TIMER2_RELOAD)
0478            140            ; Init the free running 10 ms counter to zero
0478 753A00     141            mov pwm_counter, #0
047B            142            ; Enable the timer and interrupts
047B 439B80     143            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
047E D2CA       144            setb TR2 ; Enable timer 2
0480 D2AF       145            setb EA ; Enable global interrupts
0482            146   
0482            147            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
0482 43B302     148            orl     P1M1, #0b00000010
0485 53B4FD     149            anl     P1M2, #0b11111101
0488            150            
0488            151       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
0488 43B110     152       orl  P0M1, #0b00010000
048B 53B2EF     153            anl     P0M2, #0b11101111
048E            154            
048E            155   
048E            156            ; Initialize and start the ADC-LM335:
048E            157            ;do these two when you are going to read from pin 14
048E            158       ;anl ADCCON0, #0xF0
048E            159            ;orl ADCCON0, #0x07 ; Select channel 7
048E            160            
048E            161       ; AINDIDS select if some pins are analog inputs or digital I/O:
048E 75F600     162            mov AINDIDS, #0x00 ; Disable all analog inputs
0491 43F690     163            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
0494 43E101     164            orl ADCCON1, #0x01 ; Enable ADC
0497            165   
0497            166   
0497 22         167   ret
0498            168            
0498            169   wait_1ms:
0498 C28C       170            clr     TR0 ; Stop timer 0
049A C28D       171            clr     TF0 ; Clear overflow flag
049C 758CBF     172            mov     TH0, #high(TIMER0_RELOAD_1MS)
049F 758A28     173            mov     TL0,#low(TIMER0_RELOAD_1MS)
04A2 D28C       174            setb TR0
04A4 308DFD     175            jnb     TF0, $ ; Wait for overflow
04A7 22         176            ret
04A8            177   
04A8            178   ; Wait the number of miliseconds in R2
04A8            179   waitms:
04A8 120498     180            lcall wait_1ms
04AB DAFB       181            djnz R2, waitms
04AD 22         182            ret
04AE            183   
04AE            184   Timer2_ISR:
04AE C2CF       185            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04B0 C0D0       186            push psw
04B2 C0E0       187            push acc
04B4            188   
04B4 053A       189            inc pwm_counter
04B6 C3         190            clr c
04B7 E53B       191            mov a, pwm
04B9 953A       192            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04BB B3         193            cpl c
04BC 9290       194            mov PWM_OUT, c
04BE            195   
04BE E53A       196            mov a, pwm_counter
04C0 B46407     197            cjne a, #100, Timer2_ISR_done
04C3 753A00     198            mov pwm_counter, #0
04C6 0539       199            inc seconds ; It is super easy to keep a seconds count here
04C8 D206       200            setb s_flag
04CA            201   
04CA            202   Timer2_ISR_done:
04CA D0E0       203            pop acc
04CC D0D0       204            pop psw
04CE 32         205            reti
04CF            206   
04CF            207   LCD_PB:
04CF            208            ; Set variables to 1: 'no push button pressed'
04CF D200       209            setb PB0
04D1 D201       210            setb PB1
04D3 D202       211            setb PB2
04D5 D203       212            setb PB3
04D7 D204       213            setb PB4
04D9            214            ; The input pin used to check set to '1'
04D9 D295       215            setb P1.5
04DB            216            
04DB            217            ; Check if any push button is pressed
04DB C280       218            clr P0.0
04DD C281       219            clr P0.1
04DF C282       220            clr P0.2
04E1 C283       221            clr P0.3
04E3 C293       222            clr P1.3
04E5 209544     223            jb P1.5, LCD_PB_Done
04E8            224   
04E8            225            ; Debounce
04E8 209541     226            jb P1.5, LCD_PB_Done
04EB C002       227            push AR2
04ED 7A32       227            mov R2, #50
04EF 1200DA     227            lcall ?Wait_Milli_Seconds
04F2 D002       227            pop AR2
04F4 209535     228            jb P1.5, LCD_PB_Done
04F7 2095FD     229            jb P1.5, $
04FA            230   
04FA            231            ; Set the LCD data pins to logic 1
04FA D280       232            setb P0.0
04FC D281       233            setb P0.1
04FE D282       234            setb P0.2
0500 D283       235            setb P0.3
0502 D293       236            setb P1.3
0504            237            
0504            238            ; Check the push buttons one by one
0504 C293       239            clr P1.3
0506 A295       240            mov c, P1.5
0508 9204       241            mov PB4, c
050A D293       242            setb P1.3
050C            243   
050C C280       244            clr P0.0
050E A295       245            mov c, P1.5
0510 9203       246            mov PB3, c
0512 D280       247            setb P0.0
0514            248            
0514 C281       249            clr P0.1
0516 A295       250            mov c, P1.5
0518 9202       251            mov PB2, c
051A D281       252            setb P0.1
051C            253            
051C C282       254            clr P0.2
051E A295       255            mov c, P1.5
0520 9201       256            mov PB1, c
0522 D282       257            setb P0.2
0524            258            
0524 C283       259            clr P0.3
0526 A295       260            mov c, P1.5
0528 9200       261            mov PB0, c
052A D283       262            setb P0.3
052C            263   
052C            264   LCD_PB_Done:             
052C 22         265            ret
052D            266   
052D            267   check_decrement: 
052D 200005     268            jb PB0, check_stime
0530 B205       269            cpl decrement1
0532 020535     270            ljmp check_stime
0535            271   
0535            272   check_stime:
0535 200117     273            jb PB1, check_stemp
0538 20050A     274            jb decrement1, Soak_time_decrement
053B E531       275            mov a, Soak_time
053D 2401       276            add a, #0x01
053F D4         277            da a
0540 F531       278            mov Soak_time, a
0542 02054F     279            ljmp check_stemp
0545            280   
0545            281   Soak_time_decrement: 
0545 E531       282            mov a, Soak_time
0547 2499       283            add a, #0x99
0549 D4         284            da a
054A F531       285            mov Soak_time, a
054C 02054F     286            ljmp check_stemp
054F            287   
054F            288   check_stemp:
054F 200259     289            jb PB2, check_rtime
0552 200530     290            jb decrement1, Soak_temp_decrement
0555 E532       291            mov a, Soak_temp
0557 2401       292            add a, #0x01
0559 D4         293            da a
055A F532       294            mov Soak_temp, a
055C B49903     295       cjne a, #0x99, cont_s
055F 020579     296       ljmp add_hund_s
0562            297   
0562            298       cont_s:
0562 E533       299       mov a, soak_temp_hund
0564 B4200F     300            cjne a, #0x20, fini
0567 E532       301       mov a, Soak_temp
0569 B4503F     302       cjne a, #0x50, check_rtime
056C 7400       303            mov a, #0x00
056E F532       304            mov Soak_temp, a
0570 E533       305       mov a, soak_temp_hund
0572 7400       306       mov a, #0x00
0574 F533       307       mov soak_temp_hund, a
0576            308   
0576            309       fini:
0576 0205AB     310            ljmp check_rtime
0579            311   
0579            312   add_hund_s:
0579 E533       313       mov a, soak_temp_hund
057B 2410       314       add a, #0x10
057D D4         315       da A
057E F533       316       mov soak_temp_hund, A
0580 E532       317       mov a, Soak_temp
0582 020562     318       ljmp cont_s
0585            319   
0585            320   Soak_temp_decrement: 
0585 E532       321            mov a, Soak_temp
0587 2499       322            add a, #0x99
0589 D4         323            da a
058A F532       324            mov Soak_temp, a
058C B4001C     325       cjne a, #0x00, check_rtime
058F 0205A3     326       ljmp decrement_s_hund   
0592            327   
0592            328       continue_dec_s:
0592 753320     329       mov soak_temp_hund, #0x20
0595 753250     330       mov soak_temp, #0x50
0598 0205AB     331       ljmp check_rtime
059B            332   
059B            333       cont_s_dec:
059B 9410       334       SUBB a, #0x10
059D D4         335       da A
059E F533       336       mov soak_temp_hund, a 
05A0 0205AB     337            ljmp check_rtime
05A3            338   
05A3            339   decrement_s_hund:
05A3 E533       340       mov a, soak_temp_hund
05A5 B40069     341       cjne a , #0x00, cont_dec
05A8 020592     342       ljmp continue_dec_s
05AB            343   
05AB            344   check_rtime:
05AB 200317     345            jb PB3, check_rtemp 
05AE 20050A     346            jb decrement1, Reflow_time_decrement
05B1 E534       347            mov a, Reflow_time
05B3 2401       348            add a, #0x01
05B5 D4         349            da a
05B6 F534       350            mov Reflow_time, a
05B8 0205C5     351            ljmp check_rtemp
05BB            352   
05BB            353   Reflow_time_decrement: 
05BB E534       354            mov a, Reflow_time
05BD 2499       355            add a, #0x99
05BF D4         356            da a
05C0 F534       357            mov Reflow_time, a
05C2 0205C5     358            ljmp check_rtemp
05C5            359   
05C5            360   check_rtemp:
05C5 200459     361            jb PB4, skipp
05C8 200530     362            jb decrement1, Reflow_temp_decrement
05CB E535       363            mov a, Reflow_temp
05CD 2401       364            add a, #0x01
05CF D4         365       da a
05D0 F535       366       mov Reflow_temp, a
05D2 B49903     367            cjne a, #0x99, cont_r
05D5 0205EF     368       ljmp add_hundreds_r
05D8            369   
05D8            370       cont_r:
05D8            371       ;check hundreds
05D8 E53C       372       mov a, reflow_temp_100
05DA B4200F     373       cjne a, #0x20, cont_count ;make sure to check with 20 since the hundreds place value is multiplied by 10
05DD E535       374            mov a, reflow_temp
05DF B4503F     375       cjne a, #0x50, skipp
05E2 7400       376       mov a, #0x00
05E4 F535       377       mov reflow_temp, a
05E6 E53C       378       mov a, reflow_temp_100
05E8 7400       379       mov a, #0x00
05EA F53C       380            mov Reflow_temp_100, a
05EC            381       cont_count:
05EC 020621     382            ljmp skipp
05EF            383   
05EF            384   add_hundreds_r:
05EF E53C       385       mov a, reflow_temp_100
05F1 2410       386       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
05F3 D4         387       da A
05F4 F53C       388       mov reflow_temp_100, A
05F6 E535       389       mov a, Reflow_temp
05F8 0205D8     390       ljmp cont_r
05FB            391   
05FB            392   
05FB            393   Reflow_temp_decrement: 
05FB E535       394            mov a, Reflow_temp
05FD 2499       395            add a, #0x99
05FF D4         396            da a
0600 F535       397            mov Reflow_temp, a
0602 B4001C     398       cjne a, #0x00, skipp
0605 020619     399       ljmp decrement_r_hund
0608            400   
0608            401       continue_dec_r:
0608            402            ;mov a, reflow_temp
0608            403       ;cjne a, #0x00, skipp
0608 753550     404       mov reflow_temp, #0x50
060B 753C20     405       mov reflow_temp_100, #0x20
060E 020621     406       ljmp skipp
0611            407   
0611            408       cont_dec:
0611 9410       409       SUBB a, #0x10
0613 D4         410       da a
0614 F53C       411       mov reflow_temp_100, a
0616 020621     412            ljmp skipp
0619            413   
0619            414       decrement_r_hund:
0619 E53C       415       mov a, reflow_temp_100
061B B400F3     416       cjne a, #0x00, cont_dec
061E 020608     417       ljmp continue_dec_r
0621            418   
0621            419   skipp:
0621 22         420            ret
0622            421   
0622            422   Check_start:
0622 209713     423            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0625 C002       424            push AR2
0627 7A32       424            mov R2, #50
0629 1200DA     424            lcall ?Wait_Milli_Seconds
062C D002       424            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
062E 209707     425            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0631 3097FD     426            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
0634 753001     427            mov STATE, #0x01
0637 22         428            ret
0638            429   
0638            430   smjmp:
0638 020621     431   ljmp skipp
063B            432   
063B            433   wait_for_ti:
063B 3099FD     434       jnb TI, wait_for_ti
063E C299       435       clr TI
0640 22         436       ret
0641            437   
0641            438   display_menu:
0641 C0E0       439            push acc
0643 7407       439            mov a, #7
0645 14         439            dec a
0646 120169     439            lcall ?Set_Cursor_1 ; Select column and row
0649 D0E0       439            pop acc 
064B C000       440            push ar0
064D A831       440            mov r0, Soak_time
064F 12016E     440            lcall ?Display_BCD
0652 D000       440            pop ar0
0654 C0E0       441            push acc
0656 740B       441            mov a, #11
0658 14         441            dec a
0659 120169     441            lcall ?Set_Cursor_1 ; Select column and row
065C D0E0       441            pop acc
065E            441   
065E C000       442            push ar0
0660 A833       442            mov r0, Soak_temp_hund
0662 12016E     442            lcall ?Display_BCD
0665 D000       442            pop ar0
0667 C0E0       443            push acc
0669 740C       443            mov a, #12
066B 14         443            dec a
066C 120169     443            lcall ?Set_Cursor_1 ; Select column and row
066F D0E0       443            pop acc
0671 C000       444            push ar0
0673 A832       444            mov r0, soak_temp
0675 12016E     444            lcall ?Display_BCD
0678 D000       444            pop ar0
067A C0E0       445            push acc
067C 7409       445            mov a, #9
067E 14         445            dec a
067F 120167     445            lcall ?Set_Cursor_2 ; Select column and row
0682 D0E0       445            pop acc
0684 C000       446            push ar0
0686 A834       446            mov r0, Reflow_time
0688 12016E     446            lcall ?Display_BCD
068B D000       446            pop ar0
068D C0E0       447            push acc
068F 740D       447            mov a, #13
0691 14         447            dec a
0692 120167     447            lcall ?Set_Cursor_2 ; Select column and row
0695 D0E0       447            pop acc
0697 C000       448            push ar0
0699 A83C       448            mov r0, reflow_temp_100
069B 12016E     448            lcall ?Display_BCD
069E D000       448            pop ar0
06A0 C0E0       449            push acc
06A2 740E       449            mov a, #14
06A4 14         449            dec a
06A5 120167     449            lcall ?Set_Cursor_2 ; Select column and row
06A8 D0E0       449            pop acc
06AA C000       450            push ar0
06AC A835       450            mov r0, reflow_temp
06AE 12016E     450            lcall ?Display_BCD
06B1 D000       450            pop ar0
06B3 22         451       ret
06B4            452   
06B4            453   display_heating_s:
06B4            454            ;Set_Cursor(1,4)
06B4            455            ;Display_BCD(Soak_temp_hund)
06B4            456            ;set_cursor(1,5)
06B4            457            ;display_bcd(soak_temp)
06B4 C0E0       458            push acc
06B6 740C       458            mov a, #12
06B8 14         458            dec a
06B9 120169     458            lcall ?Set_Cursor_1 ; Select column and row
06BC D0E0       458            pop acc
06BE C000       459            push ar0
06C0 A838       459            mov r0, outside_temp
06C2 12016E     459            lcall ?Display_BCD
06C5 D000       459            pop ar0
06C7 C0E0       460            push acc
06C9 7407       460            mov a, #7
06CB 14         460            dec a
06CC 120167     460            lcall ?Set_Cursor_2 ; Select column and row
06CF D0E0       460            pop acc
06D1 C000       461            push ar0
06D3 A836       461            mov r0, current_temp
06D5 12016E     461            lcall ?Display_BCD
06D8 D000       461            pop ar0
06DA 22         462            ret
06DB            463   
06DB            464   display_heating_r:
06DB C0E0       465            push acc
06DD 7404       465            mov a, #4
06DF 14         465            dec a
06E0 120169     465            lcall ?Set_Cursor_1 ; Select column and row
06E3 D0E0       465            pop acc
06E5 C000       466            push ar0
06E7 A83C       466            mov r0, reflow_temp_100
06E9 12016E     466            lcall ?Display_BCD
06EC D000       466            pop ar0
06EE C0E0       467            push acc
06F0 7405       467            mov a, #5
06F2 14         467            dec a
06F3 120169     467            lcall ?Set_Cursor_1 ; Select column and row
06F6 D0E0       467            pop acc
06F8 C000       468            push ar0
06FA A835       468            mov r0, reflow_temp
06FC 12016E     468            lcall ?Display_BCD
06FF D000       468            pop ar0
0701 C0E0       469            push acc
0703 740C       469            mov a, #12
0705 14         469            dec a
0706 120169     469            lcall ?Set_Cursor_1 ; Select column and row
0709 D0E0       469            pop acc
070B C000       470            push ar0
070D A838       470            mov r0, outside_temp
070F 12016E     470            lcall ?Display_BCD
0712 D000       470            pop ar0
0714 C0E0       471            push acc
0716 7407       471            mov a, #7
0718 14         471            dec a
0719 120167     471            lcall ?Set_Cursor_2 ; Select column and row
071C D0E0       471            pop acc
071E C000       472            push ar0
0720 A836       472            mov r0, current_temp
0722 12016E     472            lcall ?Display_BCD
0725 D000       472            pop ar0
0727 22         473            ret
0728            474   
0728            475   display_blank:
0728 C0E0       476            push acc
072A 7401       476            mov a, #1
072C 14         476            dec a
072D 120169     476            lcall ?Set_Cursor_1 ; Select column and row
0730 D0E0       476            pop acc
0732 C083       477            push dph
0734 C082       477            push dpl
0736 C0E0       477            push acc
0738 900065     477            mov dptr, #blank
073B 12015C     477            lcall ?Send_Constant_String
073E D0E0       477            pop acc
0740 D082       477            pop dpl
0742 D083       477            pop dph
0744 C0E0       478            push acc
0746 7401       478            mov a, #1
0748 14         478            dec a
0749 120167     478            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       478            pop acc
074E C083       479            push dph
0750 C082       479            push dpl
0752 C0E0       479            push acc
0754 900065     479            mov dptr, #blank
0757 12015C     479            lcall ?Send_Constant_String
075A D0E0       479            pop acc
075C D082       479            pop dpl
075E D083       479            pop dph
0760 22         480            ret
0761            481   
0761            482   Display_formated_BCD:
0761 C0E0       483            push acc
0763 740C       483            mov a, #12
0765 14         483            dec a
0766 120169     483            lcall ?Set_Cursor_1 ; Select column and row
0769 D0E0       483            pop acc
076B C000       484            push ar0
076D A84B       484            mov r0, bcd+2
076F 12016E     484            lcall ?Display_BCD
0772 D000       484            pop ar0
0774 C0E0       485            push acc
0776 742E       485            mov a, #'.'
0778 12011F     485            lcall ?WriteData
077B D0E0       485            pop acc
077D C000       486            push ar0
077F A84A       486            mov r0, bcd+1
0781 12016E     486            lcall ?Display_BCD
0784 D000       486            pop ar0
0786 22         487            ret
0787            488   
0787            489   conv_to_bcd_high:
0787 C4         490       swap a
0788 540F       491       anl a, #0x0f
078A F9         492       mov R1, a
078B 22         493            ret
078C            494   
078C            495   conv_to_bcd_low:
078C 540F       496       anl a, #0x0f
078E F8         497       mov R0, A
078F 22         498            ret
0790            499   
0790            500   conv_to_bcd:
0790 883D       501            mov x+0, R0
0792 893E       502            mov x+1, R1
0794 753F00     503            mov x+2, #0
0797 754000     504            mov x+3, #0
079A 1201C2     505       lcall hex2bcd
079D 22         506            ret
079E            507   
079E            508   Outside_tmp:
079E 53E8F0     509       anl ADCCON0, #0xF0
07A1 43E807     510            orl ADCCON0, #0x07 ; Select channel 7 
07A4            511   
07A4 C2EF       512       clr ADCF
07A6 D2EE       513       setb ADCS
07A8 30EFFD     514       jnb ADCF, $
07AB            515   
07AB E5C3       516       mov a, ADCRH
07AD C4         517       swap a
07AE C0E0       518       push acc
07B0 540F       519       anl a, #0x0f
07B2 F9         520       mov R1, a
07B3 D0E0       521       pop acc
07B5 54F0       522       anl a, #0xf0
07B7 45C2       523       orl a, ADCRL
07B9 F8         524       mov R0, A
07BA            525       
07BA            526       ; Convert to voltage
07BA 883D       527            mov x+0, R0
07BC 893E       528            mov x+1, R1
07BE 753F00     529            mov x+2, #0
07C1 754000     530            mov x+3, #0
07C4 75417C     531            mov y+0, #low (50300 % 0x10000) 
07C7 7542C4     531            mov y+1, #high(50300 % 0x10000) 
07CA 754300     531            mov y+2, #low (50300 / 0x10000) 
07CD 754400     531            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07D0 12033C     532            lcall mul32
07D3 7541FF     533            mov y+0, #low (4095 % 0x10000) 
07D6 75420F     533            mov y+1, #high(4095 % 0x10000) 
07D9 754300     533            mov y+2, #low (4095 / 0x10000) 
07DC 754400     533            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07DF 1203C9     534            lcall div32
07E2 7541A4     535            mov y+0, #low (27300 % 0x10000) 
07E5 75426A     535            mov y+1, #high(27300 % 0x10000) 
07E8 754300     535            mov y+2, #low (27300 / 0x10000) 
07EB 754400     535            mov y+3, #high(27300 / 0x10000) 
07EE 1202A8     536            lcall sub32
07F1 754164     537            mov y+0, #low (100 % 0x10000) 
07F4 754200     537            mov y+1, #high(100 % 0x10000) 
07F7 754300     537            mov y+2, #low (100 / 0x10000) 
07FA 754400     537            mov y+3, #high(100 / 0x10000) 
07FD 12033C     538            lcall mul32
0800            539       ;save outside temp to z to later add onto the oven temp
0800 853D45     540       mov z+0, x+0
0803 853E46     541       mov z+1, x+1
0806 853F47     542       mov z+2, x+2
0809 854048     543       mov z+3, x+3 
080C 1201C2     544       lcall hex2bcd
080F 120761     545       lcall Display_formated_BCD
0812            546            
0812 22         547            ret
0813            548   
0813            549   oven_tmp:
0813 53E8F0     550       anl  ADCCON0, #0xF0  
0816 43E804     551       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0819            552   
0819 C2EF       553       clr ADCF
081B D2EE       554       setb ADCS
081D 30EFFD     555       jnb ADCF, $
0820            556   
0820 E5C3       557       mov a, ADCRH
0822 C4         558       swap a
0823 C0E0       559       push acc
0825 540F       560       anl a, #0x0f
0827 F9         561       mov R1, a
0828 D0E0       562       pop acc
082A 54F0       563       anl a, #0xf0
082C 45C2       564       orl a, ADCRL
082E F8         565       mov R0, A
082F            566       
082F            567       ; Convert to voltage
082F 883D       568            mov x+0, R0
0831 893E       569            mov x+1, R1
0833 753F00     570            mov x+2, #0
0836 754000     571            mov x+3, #0
0839 75417C     572            mov y+0, #low (50300 % 0x10000) 
083C 7542C4     572            mov y+1, #high(50300 % 0x10000) 
083F 754300     572            mov y+2, #low (50300 / 0x10000) 
0842 754400     572            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0845 12033C     573            lcall mul32
0848 7541FF     574            mov y+0, #low (4095 % 0x10000) 
084B 75420F     574            mov y+1, #high(4095 % 0x10000) 
084E 754300     574            mov y+2, #low (4095 / 0x10000) 
0851 754400     574            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0854 1203C9     575            lcall div32
0857            576   
0857            577            ;vout of opamp should now be in x
0857            578       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0857            579       ;first calculate vout*R2:
0857 7541BD     580            mov y+0, #low (1469 % 0x10000) 
085A 754205     580            mov y+1, #high(1469 % 0x10000) 
085D 754300     580            mov y+2, #low (1469 / 0x10000) 
0860 754400     580            mov y+3, #high(1469 / 0x10000) 
0863 12033C     581       lcall mul32
0866            582       ;now vout*R2 ohm is in x
0866            583       ;next we will take 461 650V and divide
0866 754152     584            mov y+0, #low (461650 % 0x10000) 
0869 75420B     584            mov y+1, #high(461650 % 0x10000) 
086C 754307     584            mov y+2, #low (461650 / 0x10000) 
086F 754400     584            mov y+3, #high(461650 / 0x10000)  
0872 1203C9     585       lcall div32
0875            586       ;multiply by 100k and then divide by 41 to cancel units
0875 754140     587            mov y+0, #low (1000000 % 0x10000) 
0878 754242     587            mov y+1, #high(1000000 % 0x10000) 
087B 75430F     587            mov y+2, #low (1000000 / 0x10000) 
087E 754400     587            mov y+3, #high(1000000 / 0x10000) 
0881 12033C     588       lcall mul32
0884 754129     589            mov y+0, #low (41 % 0x10000) 
0887 754200     589            mov y+1, #high(41 % 0x10000) 
088A 754300     589            mov y+2, #low (41 / 0x10000) 
088D 754400     589            mov y+3, #high(41 / 0x10000) 
0890 1203C9     590       lcall div32
0893            591       ;move the outside temp to y and add
0893 854541     592       mov y+0, z+0
0896 854642     593       mov y+1, z+1
0899 854743     594       mov y+2, z+2
089C 854844     595       mov y+3, z+3
089F 120287     596       lcall add32
08A2 1201C2     597       lcall hex2bcd
08A5 1208AF     598       lcall display_oven_tmp
08A8 854B36     599       mov current_temp, bcd+2
08AB 854C37     600       mov current_temp_hund, bcd+3
08AE            601            ;lcall clearx
08AE            602            ;mov x, current_temp_hund
08AE            603            ;load_y(10)
08AE            604            ;lcall div32
08AE            605            ;mov current_temp_hund, x
08AE            606            
08AE            607   
08AE 22         608   ret
08AF            609   
08AF            610   display_oven_tmp:
08AF C0E0       611            push acc
08B1 7406       611            mov a, #6
08B3 14         611            dec a
08B4 120167     611            lcall ?Set_Cursor_2 ; Select column and row
08B7 D0E0       611            pop acc
08B9 C000       612            push ar0
08BB A84C       612            mov r0, bcd+3
08BD 12016E     612            lcall ?Display_BCD
08C0 D000       612            pop ar0
08C2 C000       613            push ar0
08C4 A84B       613            mov r0, bcd+2
08C6 12016E     613            lcall ?Display_BCD
08C9 D000       613            pop ar0
08CB C0E0       614            push acc
08CD 742E       614            mov a, #'.'
08CF 12011F     614            lcall ?WriteData
08D2 D0E0       614            pop acc
08D4 C000       615            push ar0
08D6 A84A       615            mov r0, bcd+1
08D8 12016E     615            lcall ?Display_BCD
08DB D000       615            pop ar0
08DD            616            
08DD C0E0       617            push acc
08DF 740F       617            mov a, #15
08E1 14         617            dec a
08E2 120167     617            lcall ?Set_Cursor_2 ; Select column and row
08E5 D0E0       617            pop acc
08E7 C000       618            push ar0
08E9 A833       618            mov r0, soak_temp_hund
08EB 12016E     618            lcall ?Display_BCD
08EE D000       618            pop ar0
08F0 C0E0       619            push acc
08F2 740D       619            mov a, #13
08F4 14         619            dec a
08F5 120167     619            lcall ?Set_Cursor_2 ; Select column and row
08F8 D0E0       619            pop acc
08FA C000       620            push ar0
08FC A837       620            mov r0, current_temp_hund
08FE 12016E     620            lcall ?Display_BCD
0901 D000       620            pop ar0
0903            621            ;display_bcd(bcd+3)
0903            622            ;Display_BCD(bcd+2)
0903            623            ;Display_char(#'.')
0903            624            ;Display_BCD(bcd+1)
0903 22         625            ret
0904            626   
0904            627   skipp1:
0904 22         628            ret
0905            629   clearx:
0905 753D00     630            mov x+0, #0x00
0908 753E00     631            mov x+1, #0x00
090B 753F00     632            mov x+2, #0x00
090E 754000     633            mov x+3, #0x00
0911 22         634            ret 
0912            635   
0912            636   check_temps:
0912 E536       637            mov a, current_temp 
0914 9532       638            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0916            639            ;soak temp is 10 for 100, current temp is 1 for 100 
0916 40EC       640            jc skipp1 ; skip if current_temp < soak_temp (carry bit set)
0918 E537       641            mov a, current_temp_hund
091A B53303     642            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
091D 753002     643            mov STATE, #0x02
0920            644   next2:
0920 22         645            ret
0921            646   
0921            647   check_currenttemp: ; TODO: apply >= comparison logic
0921 E536       648            mov a, current_temp
0923 B460DE     649            cjne a, #0x60, skipp1
0926 D208       650            setb temp_flag
0928 22         651            ret
0929            652   
0929            653   safety_feature:
0929 E539       654            mov a, seconds
092B B43CD6     655            cjne a, #0x3C, skipp1
092E 200841     656            jb temp_flag, skipp2
0931 120728     657            lcall display_blank
0934 753B00     658            mov pwm, #0
0937 C0E0       659            push acc
0939 7401       659            mov a, #1
093B 14         659            dec a
093C 120169     659            lcall ?Set_Cursor_1 ; Select column and row
093F D0E0       659            pop acc
0941 C083       660            push dph
0943 C082       660            push dpl
0945 C0E0       660            push acc
0947 900076     660            mov dptr, #safety_message
094A 12015C     660            lcall ?Send_Constant_String
094D D0E0       660            pop acc
094F D082       660            pop dpl
0951 D083       660            pop dph
0953 C0E0       661            push acc
0955 7401       661            mov a, #1
0957 14         661            dec a
0958 120167     661            lcall ?Set_Cursor_2 ; Select column and row
095B D0E0       661            pop acc
095D C083       662            push dph
095F C082       662            push dpl
0961 C0E0       662            push acc
0963 90007E     662            mov dptr, #safety_message1
0966 12015C     662            lcall ?Send_Constant_String
0969 D0E0       662            pop acc
096B D082       662            pop dpl
096D D083       662            pop dph
096F            663   
096F            664   safety_feature_loop:
096F 02096F     665            ljmp safety_feature_loop
0972            666   
0972            667   skipp2:
0972 22         668            ret
0973            669   
0973            670   ; checks secs for state 2 -> 3
0973            671   check_secs_s2:
0973 E539       672       mov a, seconds
0975 D4         673            da a
0976 B53106     674       cjne a, soak_time, skip_check_secs_s2
0979 1209C7     675            lcall debug_display
097C 753003     676       mov state, #3
097F            677   skip_check_secs_s2:
097F 22         678       ret
0980            679   
0980            680   ; checks temp for state 3 -> 4
0980            681   check_temps_s3:
0980 E536       682            mov a, current_temp 
0982 B53500     683            cjne a, Reflow_temp, nxt1
0985            684   nxt1:
0985 50EB       685            jnc skipp2
0987 E537       686            mov a, current_temp_hund
0989 120905     687            lcall clearx
098C 853C3D     688            mov x,reflow_temp_100
098F 75410A     689            mov y+0, #low (10 % 0x10000) 
0992 754200     689            mov y+1, #high(10 % 0x10000) 
0995 754300     689            mov y+2, #low (10 / 0x10000) 
0998 754400     689            mov y+3, #high(10 / 0x10000) 
099B 1203C9     690            lcall div32
099E 853D3C     691            mov reflow_temp_100, x
09A1 B53C00     692            cjne a, reflow_temp_100, nxt2
09A4            693   nxt2:
09A4 40CC       694   jc skipp2
09A6 753004     695   mov STATe, #0x04
09A9 22         696   ret
09AA            697   
09AA            698   ; checks secs for state 4 -> 5
09AA            699   check_secs_s4:
09AA E534       700       mov a, reflow_time
09AC B53903     701       cjne a, seconds, skip_check_secs_s4
09AF 753005     702       mov state, #5
09B2            703   skip_check_secs_s4:
09B2 22         704       ret
09B3            705   
09B3            706   ; checks temp for state 5 -> 0
09B3            707   check_temp_s5:
09B3 E536       708       mov a, current_temp      
09B5 75F03C     709       mov b, #60                 
09B8 B5F003     710       cjne a, b, check_high       
09BB 0209C6     711       ljmp skip_s5_to_s0         
09BE            712   check_high:
09BE 5480       713       anl a, #0x80               ; mask msb (bit 7)
09C0 6004       714       jz skip_s5_to_s0           ; if msb = 0 skip to the end
09C2 753000     715       mov STATE, #0x00           ; set state to 0 (finished)
09C5 22         716       ret                        ; return
09C6            717   skip_s5_to_s0:
09C6 22         718       ret                        ; return without state change
09C7            719   
09C7            720   debug_display:
09C7 C0E0       721            push acc
09C9 7408       721            mov a, #8
09CB 14         721            dec a
09CC 120169     721            lcall ?Set_Cursor_1 ; Select column and row
09CF D0E0       721            pop acc
09D1 C000       722            push ar0
09D3 A831       722            mov r0, soak_time
09D5 12016E     722            lcall ?Display_BCD
09D8 D000       722            pop ar0
09DA C0E0       723            push acc
09DC 7408       723            mov a, #8
09DE 14         723            dec a
09DF 120167     723            lcall ?Set_Cursor_2 ; Select column and row
09E2 D0E0       723            pop acc
09E4 C000       724            push ar0
09E6 A839       724            mov r0, seconds
09E8 12016E     724            lcall ?Display_BCD
09EB D000       724            pop ar0
09ED C0E0       725            push acc
09EF 740F       725            mov a, #15
09F1 14         725            dec a
09F2 120167     725            lcall ?Set_Cursor_2 ; Select column and row
09F5 D0E0       725            pop acc
09F7 C000       726            push ar0
09F9 A830       726            mov r0, STATE
09FB 12016E     726            lcall ?Display_BCD
09FE D000       726            pop ar0
0A00 22         727   ret
0A01            728   
0A01            729   main:
0A01 75817F     730            mov sp, #0x7f
0A04 120432     731            lcall Init_All
0A07 120129     732       lcall LCD_4BIT
0A0A 1204AE     733            lcall Timer2_ISR
0A0D            734       
0A0D            735        ; initial messages in LCD
0A0D 753000     736       mov STATE, #0x00
0A10 753100     737       mov Soak_time, #0x00
0A13 753200     738       mov Soak_temp, #0x00
0A16 753300     739       mov soak_temp_hund, #0x00
0A19 753400     740       mov Reflow_time, #0x00
0A1C 753500     741       mov Reflow_temp, #0x00
0A1F 753600     742       mov current_temp, #0x00
0A22 753700     743       mov current_temp_hund, #0x00
0A25 753900     744       mov seconds, #0x00
0A28 753A00     745       mov pwm_counter, #0x00
0A2B 753B00     746       mov pwm, #0x00
0A2E 753C00     747       mov reflow_temp_100, #0x00
0A31 C205       748       clr decrement1
0A33 C206       749       clr s_flag 
0A35            750            
0A35            751   Forever:
0A35 120728     752            lcall display_blank
0A38            753   
0A38            754   state_0:
0A38 C0E0       755            push acc
0A3A 7401       755            mov a, #1
0A3C 14         755            dec a
0A3D 120169     755            lcall ?Set_Cursor_1 ; Select column and row
0A40 D0E0       755            pop acc
0A42 C083       756            push dph
0A44 C082       756            push dpl
0A46 C0E0       756            push acc
0A48 90002E     756            mov dptr, #soak_param
0A4B 12015C     756            lcall ?Send_Constant_String
0A4E D0E0       756            pop acc
0A50 D082       756            pop dpl
0A52 D083       756            pop dph
0A54 C0E0       757            push acc
0A56 7401       757            mov a, #1
0A58 14         757            dec a
0A59 120167     757            lcall ?Set_Cursor_2 ; Select column and row
0A5C D0E0       757            pop acc
0A5E C083       758            push dph
0A60 C082       758            push dpl
0A62 C0E0       758            push acc
0A64 90003D     758            mov dptr, #reflow_param
0A67 12015C     758            lcall ?Send_Constant_String
0A6A D0E0       758            pop acc
0A6C D082       758            pop dpl
0A6E D083       758            pop dph
0A70            759   
0A70            760   state_0_loop:
0A70 E530       761            mov a, STATE
0A72 753B64     762           mov pwm, #100
0A75 B4000F     763            cjne a, #0, state_1
0A78 1204CF     764            lcall LCD_PB
0A7B 12052D     765            lcall check_decrement
0A7E 120641     766            lcall display_menu
0A81 120622     767            lcall Check_start
0A84 020A70     768            ljmp state_0_loop
0A87            769   
0A87            770   state_1: 
0A87 120728     771            lcall display_blank
0A8A 753900     772            mov seconds, #0x00
0A8D C0E0       773            push acc
0A8F 7401       773            mov a, #1
0A91 14         773            dec a
0A92 120169     773            lcall ?Set_Cursor_1 ; Select column and row
0A95 D0E0       773            pop acc
0A97 C083       774            push dph
0A99 C082       774            push dpl
0A9B C0E0       774            push acc
0A9D 90004E     774            mov dptr, #heating_to_s
0AA0 12015C     774            lcall ?Send_Constant_String
0AA3 D0E0       774            pop acc
0AA5 D082       774            pop dpl
0AA7 D083       774            pop dph
0AA9 C0E0       775            push acc
0AAB 7401       775            mov a, #1
0AAD 14         775            dec a
0AAE 120167     775            lcall ?Set_Cursor_2 ; Select column and row
0AB1 D0E0       775            pop acc
0AB3 C083       776            push dph
0AB5 C082       776            push dpl
0AB7 C0E0       776            push acc
0AB9 90005E     776            mov dptr, #heating_temp
0ABC 12015C     776            lcall ?Send_Constant_String
0ABF D0E0       776            pop acc
0AC1 D082       776            pop dpl
0AC3 D083       776            pop dph
0AC5            777   
0AC5 C0E0       778            push acc
0AC7 7404       778            mov a, #4
0AC9 14         778            dec a
0ACA 120169     778            lcall ?Set_Cursor_1 ; Select column and row
0ACD D0E0       778            pop acc
0ACF C000       779            push ar0
0AD1 A833       779            mov r0, Soak_temp_hund
0AD3 12016E     779            lcall ?Display_BCD
0AD6 D000       779            pop ar0
0AD8 C0E0       780            push acc
0ADA 7405       780            mov a, #5
0ADC 14         780            dec a
0ADD 120169     780            lcall ?Set_Cursor_1 ; Select column and row
0AE0 D0E0       780            pop acc
0AE2 C000       781            push ar0
0AE4 A832       781            mov r0, soak_temp
0AE6 12016E     781            lcall ?Display_BCD
0AE9 D000       781            pop ar0
0AEB            782   
0AEB 120905     783            lcall clearx
0AEE 85333D     784            mov x, soak_temp_hund
0AF1 75410A     785            mov y+0, #low (10 % 0x10000) 
0AF4 754200     785            mov y+1, #high(10 % 0x10000) 
0AF7 754300     785            mov y+2, #low (10 / 0x10000) 
0AFA 754400     785            mov y+3, #high(10 / 0x10000) 
0AFD 1203C9     786            lcall div32
0B00 853D33     787            mov soak_temp_hund, x
0B03            788   state_1_loop:
0B03 E530       789            mov a, STATE
0B05 B4011D     790            cjne a, #1, state_2
0B08 1206B4     791            lcall display_heating_s
0B0B 753B00     792            mov pwm, #0
0B0E 12079E     793            lcall outside_tmp
0B11 120813     794            lcall oven_tmp
0B14 120921     795            lcall check_currenttemp
0B17 120929     796            lcall safety_feature
0B1A 120912     797            lcall check_temps
0B1D 7AFA       798            mov R2, #250
0B1F 1204A8     799            lcall waitms
0B22 020B03     800            ljmp state_1_loop
0B25            801   
0B25            802   state_2:
0B25 120728     803            lcall display_blank 
0B28 753900     804            mov seconds, #0x00
0B2B C0E0       805            push acc
0B2D 7401       805            mov a, #1
0B2F 14         805            dec a
0B30 120169     805            lcall ?Set_Cursor_1 ; Select column and row
0B33 D0E0       805            pop acc
0B35 C083       806            push dph
0B37 C082       806            push dpl
0B39 C0E0       806            push acc
0B3B 90008C     806            mov dptr, #soaking
0B3E 12015C     806            lcall ?Send_Constant_String
0B41 D0E0       806            pop acc
0B43 D082       806            pop dpl
0B45 D083       806            pop dph
0B47 C0E0       807            push acc
0B49 7401       807            mov a, #1
0B4B 14         807            dec a
0B4C 120167     807            lcall ?Set_Cursor_2 ; Select column and row
0B4F D0E0       807            pop acc
0B51 C083       808            push dph
0B53 C082       808            push dpl
0B55 C0E0       808            push acc
0B57 9000A7     808            mov dptr, #time
0B5A 12015C     808            lcall ?Send_Constant_String
0B5D D0E0       808            pop acc
0B5F D082       808            pop dpl
0B61 D083       808            pop dph
0B63 C0E0       809            push acc
0B65 740E       809            mov a, #14
0B67 14         809            dec a
0B68 120169     809            lcall ?Set_Cursor_1 ; Select column and row
0B6B D0E0       809            pop acc
0B6D C000       810            push ar0
0B6F A831       810            mov r0, soak_time
0B71 12016E     810            lcall ?Display_BCD
0B74 D000       810            pop ar0
0B76            811   
0B76            812   state_2_loop: 
0B76 E530       813            mov a, STATE
0B78 B40225     814       cjne a, #2, state_3
0B7B C0E0       815            push acc
0B7D 7406       815            mov a, #6
0B7F 14         815            dec a
0B80 120167     815            lcall ?Set_Cursor_2 ; Select column and row
0B83 D0E0       815            pop acc
0B85 120905     816            lcall clearx
0B88 85393D     817            mov x, seconds 
0B8B 1201C2     818            lcall hex2bcd 
0B8E C000       819            push ar0
0B90 A849       819            mov r0, bcd
0B92 12016E     819            lcall ?Display_BCD
0B95 D000       819            pop ar0
0B97 753B14     820            mov pwm, #20
0B9A 120973     821            lcall check_secs_s2
0B9D 020B76     822            ljmp state_2_loop
0BA0            823   
0BA0            824   state_3:
0BA0 120728     825            lcall display_blank
0BA3 C0E0       826            push acc
0BA5 7401       826            mov a, #1
0BA7 14         826            dec a
0BA8 120169     826            lcall ?Set_Cursor_1 ; Select column and row
0BAB D0E0       826            pop acc
0BAD C083       827            push dph
0BAF C082       827            push dpl
0BB1 C0E0       827            push acc
0BB3 9000B0     827            mov dptr, #heating_to_r
0BB6 12015C     827            lcall ?Send_Constant_String
0BB9 D0E0       827            pop acc
0BBB D082       827            pop dpl
0BBD D083       827            pop dph
0BBF C0E0       828            push acc
0BC1 7401       828            mov a, #1
0BC3 14         828            dec a
0BC4 120167     828            lcall ?Set_Cursor_2 ; Select column and row
0BC7 D0E0       828            pop acc
0BC9 C083       829            push dph
0BCB C082       829            push dpl
0BCD C0E0       829            push acc
0BCF 90005E     829            mov dptr, #heating_temp
0BD2 12015C     829            lcall ?Send_Constant_String
0BD5 D0E0       829            pop acc
0BD7 D082       829            pop dpl
0BD9 D083       829            pop dph
0BDB            830   
0BDB            831   state_3_loop:
0BDB E530       832            mov a, STATE
0BDD B40317     833            cjne a, #3, state_4
0BE0 1206DB     834            lcall display_heating_r
0BE3 753B00     835            mov pwm, #0
0BE6 12079E     836            lcall outside_tmp
0BE9 120813     837            lcall oven_tmp
0BEC 120980     838            lcall check_temps_s3
0BEF 7AFA       839            mov R2, #250
0BF1 1204A8     840            lcall waitms
0BF4 020BDB     841            ljmp state_3_loop
0BF7            842   
0BF7            843   state_4:
0BF7 120728     844            lcall display_blank 
0BFA 753900     845            mov seconds, #0x00
0BFD C0E0       846            push acc
0BFF 7401       846            mov a, #1
0C01 14         846            dec a
0C02 120169     846            lcall ?Set_Cursor_1 ; Select column and row
0C05 D0E0       846            pop acc
0C07 C083       847            push dph
0C09 C082       847            push dpl
0C0B C0E0       847            push acc
0C0D 90009A     847            mov dptr, #reflow
0C10 12015C     847            lcall ?Send_Constant_String
0C13 D0E0       847            pop acc
0C15 D082       847            pop dpl
0C17 D083       847            pop dph
0C19 C0E0       848            push acc
0C1B 7401       848            mov a, #1
0C1D 14         848            dec a
0C1E 120167     848            lcall ?Set_Cursor_2 ; Select column and row
0C21 D0E0       848            pop acc
0C23 C083       849            push dph
0C25 C082       849            push dpl
0C27 C0E0       849            push acc
0C29 9000A7     849            mov dptr, #time
0C2C 12015C     849            lcall ?Send_Constant_String
0C2F D0E0       849            pop acc
0C31 D082       849            pop dpl
0C33 D083       849            pop dph
0C35 C0E0       850            push acc
0C37 740E       850            mov a, #14
0C39 14         850            dec a
0C3A 120169     850            lcall ?Set_Cursor_1 ; Select column and row
0C3D D0E0       850            pop acc
0C3F C000       851            push ar0
0C41 A834       851            mov r0, reflow_time
0C43 12016E     851            lcall ?Display_BCD
0C46 D000       851            pop ar0
0C48            852   
0C48            853   state_4_loop:
0C48 E530       854       mov a, STATE
0C4A B40422     855       cjne a, #4, state_5
0C4D C0E0       856            push acc
0C4F 7406       856            mov a, #6
0C51 14         856            dec a
0C52 120167     856            lcall ?Set_Cursor_2 ; Select column and row
0C55 D0E0       856            pop acc
0C57 85393D     857       mov x, seconds
0C5A 1201C2     858       lcall hex2bcd
0C5D C000       859            push ar0
0C5F A849       859            mov r0, bcd
0C61 12016E     859            lcall ?Display_BCD
0C64 D000       859            pop ar0
0C66 753B14     860       mov pwm, #20
0C69 1209AA     861       lcall check_secs_s4
0C6C 020C48     862       ljmp state_4_loop
0C6F            863   
0C6F            864   state_5:
0C6F 120728     865       lcall display_blank
0C72 C0E0       866            push acc
0C74 7401       866            mov a, #1
0C76 14         866            dec a
0C77 120169     866            lcall ?Set_Cursor_1 ; Select column and row
0C7A D0E0       866            pop acc
0C7C C083       867            push dph
0C7E C082       867            push dpl
0C80 C0E0       867            push acc
0C82 9000C0     867            mov dptr, #cooling
0C85 12015C     867            lcall ?Send_Constant_String
0C88 D0E0       867            pop acc
0C8A D082       867            pop dpl
0C8C D083       867            pop dph
0C8E C0E0       868            push acc
0C90 7401       868            mov a, #1
0C92 14         868            dec a
0C93 120167     868            lcall ?Set_Cursor_2 ; Select column and row
0C96 D0E0       868            pop acc
0C98 C083       869            push dph
0C9A C082       869            push dpl
0C9C C0E0       869            push acc
0C9E 90005E     869            mov dptr, #heating_temp
0CA1 12015C     869            lcall ?Send_Constant_String
0CA4 D0E0       869            pop acc
0CA6 D082       869            pop dpl
0CA8 D083       869            pop dph
0CAA            870       
0CAA            871   state_5_loop:
0CAA E530       872            mov a, STATE
0CAC B40527     873            cjne a, #5, state_0_jump
0CAF 753B64     874            mov pwm, #100
0CB2 C0E0       875            push acc
0CB4 7407       875            mov a, #7
0CB6 14         875            dec a
0CB7 120167     875            lcall ?Set_Cursor_2 ; Select column and row
0CBA D0E0       875            pop acc
0CBC C000       876            push ar0
0CBE A836       876            mov r0, current_temp
0CC0 12016E     876            lcall ?Display_BCD
0CC3 D000       876            pop ar0
0CC5 12079E     877            lcall outside_tmp
0CC8 120813     878            lcall oven_tmp
0CCB 1209B3     879            lcall check_temp_s5
0CCE 7AFA       880            mov R2, #250
0CD0 1204A8     881            lcall waitms
0CD3 020CAA     882            ljmp state_5_loop
0CD6            883   
0CD6            884   state_0_jump:
0CD6 020A38     885            ljmp state_0
0CD9            886   
0CD9            887   END
