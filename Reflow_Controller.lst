0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             27   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             28   
0000             29   ORG 0x0000
0000 0209DE      30            ljmp main
0023             31   org 0x0023
0023 32          32            reti
0024             33            ; Timer/Counter 2 overflow interrupt vector
002B             34   org 0x002B
002B 0204B2      35            ljmp Timer2_ISR
002E             36   
002E             37   START_BUTTON  equ P1.7
002E             38   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             39   
002E             40   
002E             41   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    42   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    43   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A78    44   heating_to_s:  db   'Ts:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
005E 54656D70    45   heating_temp:db    'Temp: xxxC', 0
     3A207878
     784300
0069 20202020    46   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
007A 4552524F    47   safety_message:db  'ERROR: ', 0
     523A2000
0082 43616E74    48   safety_message1:db  'Cant Read Temp'
     20526561
     64205465
     6D70
0090 536F616B    49   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009E 5265666C    50   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00AB 54696D65    51   time:db            'Time:xxs',0
     3A787873
     00
00B4 54723A78    52   heating_to_r:db    'Tr:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
00C4 436F6F6C    53   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D4             54   
00D4             55   cseg
00D4             56   ; These 'equ' must match the hardware wiring
00D4             57   LCD_RS equ P1.3
00D4             58   LCD_E  equ P1.4
00D4             59   LCD_D4 equ P0.0
00D4             60   LCD_D5 equ P0.1
00D4             61   LCD_D6 equ P0.2
00D4             62   LCD_D7 equ P0.3
00D4             63   ;ADC_pn equ P1.1
00D4             64   
00D4             65   
                 67   	$LIST
01C6             69   
0030             70   DSEG at 30h
0030             71   STATE: ds 1
0031             72   Soak_time: ds 1
0032             73   Soak_temp: ds 1
0033             74   soak_temp_hund: ds 1
0034             75   Reflow_time: ds 1
0035             76   Reflow_temp: ds 1
0036             77   current_temp: ds 1
0037             78   current_temp_hund: ds 1
0038             79   outside_temp: ds 1
0039             80   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             81   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             82   pwm: ds 1 ; pwm percentage
003C             83   reflow_temp_100:ds 1
003D             84   x: ds 4
0041             85   y: ds 4
0045             86   z: ds 4
0049             87   bcd: ds 5
004E             88   
004E             89   
0000             90   BSEG
0000             91   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000             92   PB0: dbit 1
0001             93   PB1: dbit 1
0002             94   PB2: dbit 1
0003             95   PB3: dbit 1
0004             96   PB4: dbit 1
0005             97   decrement1: dbit 1
0006             98   s_flag: dbit 1 ; set to 1 every time a second has passed
0007             99   mf: dbit 1
0008            100   temp_flag: dbit 1
0009            101   
                546   $LIST
                103   $LIST
0436            105   
0436            106   CSEG
0436            107   
0436            108   Init_All:
0436            109            ; Configure all the pins for biderectional I/O
0436 75AC00     110            mov     P3M1, #0x00
0439 75AD00     111            mov     P3M2, #0x00
043C 75B300     112            mov     P1M1, #0x00
043F 75B400     113            mov     P1M2, #0x00
0442 75B100     114            mov     P0M1, #0x00
0445 75B200     115            mov     P0M2, #0x00
0448            116            
0448 438E10     117            orl     CKCON, #0x10 ; CLK is the input for timer 1
044B 438780     118            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
044E 759852     119            mov     SCON, #0x52
0451 53C4DF     120            anl     T3CON, #0b11011111
0454 53890F     121            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0457 438920     122            orl     TMOD, #0x20 ; Timer 1 Mode 2
045A 758DF7     123            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
045D D28E       124            setb TR1
045F            125            
045F            126            ; Using timer 0 for delay functions.  Initialize here:
045F C28C       127            clr     TR0 ; Stop timer 0
0461 438E08     128            orl     CKCON,#0x08 ; CLK is the input for timer 0
0464 5389F0     129            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0467 438901     130            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
046A            131   
046A            132            ; Initialize timer 2 for periodic interrupts
046A 75C800     133            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
046D 75CDD7     134            mov TH2, #high(TIMER2_RELOAD)
0470 75CC79     135            mov TL2, #low(TIMER2_RELOAD)
0473            136            ; Set the reload value
0473 75C9A0     137            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0476 75CBD7     138            mov RCMP2H, #high(TIMER2_RELOAD)
0479 75CA79     139            mov RCMP2L, #low(TIMER2_RELOAD)
047C            140            ; Init the free running 10 ms counter to zero
047C 753A00     141            mov pwm_counter, #0
047F            142            ; Enable the timer and interrupts
047F 439B80     143            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0482 D2CA       144            setb TR2 ; Enable timer 2
0484 D2AF       145            setb EA ; Enable global interrupts
0486            146   
0486            147            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
0486 43B302     148            orl     P1M1, #0b00000010
0489 53B4FD     149            anl     P1M2, #0b11111101
048C            150            
048C            151       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
048C 43B110     152       orl  P0M1, #0b00010000
048F 53B2EF     153            anl     P0M2, #0b11101111
0492            154            
0492            155   
0492            156            ; Initialize and start the ADC-LM335:
0492            157            ;do these two when you are going to read from pin 14
0492            158       ;anl ADCCON0, #0xF0
0492            159            ;orl ADCCON0, #0x07 ; Select channel 7
0492            160            
0492            161       ; AINDIDS select if some pins are analog inputs or digital I/O:
0492 75F600     162            mov AINDIDS, #0x00 ; Disable all analog inputs
0495 43F690     163            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
0498 43E101     164            orl ADCCON1, #0x01 ; Enable ADC
049B            165   
049B            166   
049B 22         167   ret
049C            168            
049C            169   wait_1ms:
049C C28C       170            clr     TR0 ; Stop timer 0
049E C28D       171            clr     TF0 ; Clear overflow flag
04A0 758CBF     172            mov     TH0, #high(TIMER0_RELOAD_1MS)
04A3 758A28     173            mov     TL0,#low(TIMER0_RELOAD_1MS)
04A6 D28C       174            setb TR0
04A8 308DFD     175            jnb     TF0, $ ; Wait for overflow
04AB 22         176            ret
04AC            177   
04AC            178   ; Wait the number of miliseconds in R2
04AC            179   waitms:
04AC 12049C     180            lcall wait_1ms
04AF DAFB       181            djnz R2, waitms
04B1 22         182            ret
04B2            183   
04B2            184   Timer2_ISR:
04B2 C2CF       185            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04B4 C0D0       186            push psw
04B6 C0E0       187            push acc
04B8            188   
04B8 053A       189            inc pwm_counter
04BA C3         190            clr c
04BB E53B       191            mov a, pwm
04BD 953A       192            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04BF B3         193            cpl c
04C0 9290       194            mov PWM_OUT, c
04C2            195   
04C2 E53A       196            mov a, pwm_counter
04C4 B46407     197            cjne a, #100, Timer2_ISR_done
04C7 753A00     198            mov pwm_counter, #0
04CA 0539       199            inc seconds ; It is super easy to keep a seconds count here
04CC D206       200            setb s_flag
04CE            201   
04CE            202   Timer2_ISR_done:
04CE D0E0       203            pop acc
04D0 D0D0       204            pop psw
04D2 32         205            reti
04D3            206   
04D3            207   LCD_PB:
04D3            208            ; Set variables to 1: 'no push button pressed'
04D3 D200       209            setb PB0
04D5 D201       210            setb PB1
04D7 D202       211            setb PB2
04D9 D203       212            setb PB3
04DB D204       213            setb PB4
04DD            214            ; The input pin used to check set to '1'
04DD D295       215            setb P1.5
04DF            216            
04DF            217            ; Check if any push button is pressed
04DF C280       218            clr P0.0
04E1 C281       219            clr P0.1
04E3 C282       220            clr P0.2
04E5 C283       221            clr P0.3
04E7 C293       222            clr P1.3
04E9 209544     223            jb P1.5, LCD_PB_Done
04EC            224   
04EC            225            ; Debounce
04EC 209541     226            jb P1.5, LCD_PB_Done
04EF C002       227            push AR2
04F1 7A32       227            mov R2, #50
04F3 1200DE     227            lcall ?Wait_Milli_Seconds
04F6 D002       227            pop AR2
04F8 209535     228            jb P1.5, LCD_PB_Done
04FB 2095FD     229            jb P1.5, $
04FE            230   
04FE            231            ; Set the LCD data pins to logic 1
04FE D280       232            setb P0.0
0500 D281       233            setb P0.1
0502 D282       234            setb P0.2
0504 D283       235            setb P0.3
0506 D293       236            setb P1.3
0508            237            
0508            238            ; Check the push buttons one by one
0508 C293       239            clr P1.3
050A A295       240            mov c, P1.5
050C 9204       241            mov PB4, c
050E D293       242            setb P1.3
0510            243   
0510 C280       244            clr P0.0
0512 A295       245            mov c, P1.5
0514 9203       246            mov PB3, c
0516 D280       247            setb P0.0
0518            248            
0518 C281       249            clr P0.1
051A A295       250            mov c, P1.5
051C 9202       251            mov PB2, c
051E D281       252            setb P0.1
0520            253            
0520 C282       254            clr P0.2
0522 A295       255            mov c, P1.5
0524 9201       256            mov PB1, c
0526 D282       257            setb P0.2
0528            258            
0528 C283       259            clr P0.3
052A A295       260            mov c, P1.5
052C 9200       261            mov PB0, c
052E D283       262            setb P0.3
0530            263   
0530            264   LCD_PB_Done:             
0530 22         265            ret
0531            266   
0531            267   check_decrement: 
0531 200005     268            jb PB0, check_stime
0534 B205       269            cpl decrement1
0536 020539     270            ljmp check_stime
0539            271   
0539            272   check_stime:
0539 200117     273            jb PB1, check_stemp
053C 20050A     274            jb decrement1, Soak_time_decrement
053F E531       275            mov a, Soak_time
0541 2401       276            add a, #0x01
0543 D4         277            da a
0544 F531       278            mov Soak_time, a
0546 020553     279            ljmp check_stemp
0549            280   
0549            281   Soak_time_decrement: 
0549 E531       282            mov a, Soak_time
054B 2499       283            add a, #0x99
054D D4         284            da a
054E F531       285            mov Soak_time, a
0550 020553     286            ljmp check_stemp
0553            287   
0553            288   check_stemp:
0553 200259     289            jb PB2, check_rtime
0556 200530     290            jb decrement1, Soak_temp_decrement
0559 E532       291            mov a, Soak_temp
055B 2401       292            add a, #0x01
055D D4         293            da a
055E F532       294            mov Soak_temp, a
0560 B49903     295       cjne a, #0x99, cont_s
0563 02057D     296       ljmp add_hund_s
0566            297   
0566            298       cont_s:
0566 E533       299       mov a, soak_temp_hund
0568 B4200F     300            cjne a, #0x20, fini
056B E532       301       mov a, Soak_temp
056D B4503F     302       cjne a, #0x50, check_rtime
0570 7400       303            mov a, #0x00
0572 F532       304            mov Soak_temp, a
0574 E533       305       mov a, soak_temp_hund
0576 7400       306       mov a, #0x00
0578 F533       307       mov soak_temp_hund, a
057A            308   
057A            309       fini:
057A 0205AF     310            ljmp check_rtime
057D            311   
057D            312   add_hund_s:
057D E533       313       mov a, soak_temp_hund
057F 2410       314       add a, #0x10
0581 D4         315       da A
0582 F533       316       mov soak_temp_hund, A
0584 E532       317       mov a, Soak_temp
0586 020566     318       ljmp cont_s
0589            319   
0589            320   Soak_temp_decrement: 
0589 E532       321            mov a, Soak_temp
058B 2499       322            add a, #0x99
058D D4         323            da a
058E F532       324            mov Soak_temp, a
0590 B4001C     325       cjne a, #0x00, check_rtime
0593 0205A7     326       ljmp decrement_s_hund   
0596            327   
0596            328       continue_dec_s:
0596 753320     329       mov soak_temp_hund, #0x20
0599 753250     330       mov soak_temp, #0x50
059C 0205AF     331       ljmp check_rtime
059F            332   
059F            333       cont_s_dec:
059F 9410       334       SUBB a, #0x10
05A1 D4         335       da A
05A2 F533       336       mov soak_temp_hund, a 
05A4 0205AF     337            ljmp check_rtime
05A7            338   
05A7            339   decrement_s_hund:
05A7 E533       340       mov a, soak_temp_hund
05A9 B40069     341       cjne a , #0x00, cont_dec
05AC 020596     342       ljmp continue_dec_s
05AF            343   
05AF            344   check_rtime:
05AF 200317     345            jb PB3, check_rtemp 
05B2 20050A     346            jb decrement1, Reflow_time_decrement
05B5 E534       347            mov a, Reflow_time
05B7 2401       348            add a, #0x01
05B9 D4         349            da a
05BA F534       350            mov Reflow_time, a
05BC 0205C9     351            ljmp check_rtemp
05BF            352   
05BF            353   Reflow_time_decrement: 
05BF E534       354            mov a, Reflow_time
05C1 2499       355            add a, #0x99
05C3 D4         356            da a
05C4 F534       357            mov Reflow_time, a
05C6 0205C9     358            ljmp check_rtemp
05C9            359   
05C9            360   check_rtemp:
05C9 200459     361            jb PB4, skipp
05CC 200530     362            jb decrement1, Reflow_temp_decrement
05CF E535       363            mov a, Reflow_temp
05D1 2401       364            add a, #0x01
05D3 D4         365       da a
05D4 F535       366       mov Reflow_temp, a
05D6 B49903     367            cjne a, #0x99, cont_r
05D9 0205F3     368       ljmp add_hundreds_r
05DC            369   
05DC            370       cont_r:
05DC            371       ;check hundreds
05DC E53C       372       mov a, reflow_temp_100
05DE B4200F     373       cjne a, #0x20, cont_count ;make sure to check with 20 since the hundreds place value is multiplied by 10
05E1 E535       374            mov a, reflow_temp
05E3 B4503F     375       cjne a, #0x50, skipp
05E6 7400       376       mov a, #0x00
05E8 F535       377       mov reflow_temp, a
05EA E53C       378       mov a, reflow_temp_100
05EC 7400       379       mov a, #0x00
05EE F53C       380            mov Reflow_temp_100, a
05F0            381       cont_count:
05F0 020625     382            ljmp skipp
05F3            383   
05F3            384   add_hundreds_r:
05F3 E53C       385       mov a, reflow_temp_100
05F5 2410       386       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
05F7 D4         387       da A
05F8 F53C       388       mov reflow_temp_100, A
05FA E535       389       mov a, Reflow_temp
05FC 0205DC     390       ljmp cont_r
05FF            391   
05FF            392   
05FF            393   Reflow_temp_decrement: 
05FF E535       394            mov a, Reflow_temp
0601 2499       395            add a, #0x99
0603 D4         396            da a
0604 F535       397            mov Reflow_temp, a
0606 B4001C     398       cjne a, #0x00, skipp
0609 02061D     399       ljmp decrement_r_hund
060C            400   
060C            401       continue_dec_r:
060C            402            ;mov a, reflow_temp
060C            403       ;cjne a, #0x00, skipp
060C 753550     404       mov reflow_temp, #0x50
060F 753C20     405       mov reflow_temp_100, #0x20
0612 020625     406       ljmp skipp
0615            407   
0615            408       cont_dec:
0615 9410       409       SUBB a, #0x10
0617 D4         410       da a
0618 F53C       411       mov reflow_temp_100, a
061A 020625     412            ljmp skipp
061D            413   
061D            414       decrement_r_hund:
061D E53C       415       mov a, reflow_temp_100
061F B400F3     416       cjne a, #0x00, cont_dec
0622 02060C     417       ljmp continue_dec_r
0625            418   
0625            419   skipp:
0625 22         420            ret
0626            421   
0626            422   Check_start:
0626 209713     423            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0629 C002       424            push AR2
062B 7A32       424            mov R2, #50
062D 1200DE     424            lcall ?Wait_Milli_Seconds
0630 D002       424            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0632 209707     425            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0635 3097FD     426            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
0638 753001     427            mov STATE, #0x01
063B 22         428            ret
063C            429   
063C            430   smjmp:
063C 020625     431   ljmp skipp
063F            432   
063F            433   wait_for_ti:
063F 3099FD     434       jnb TI, wait_for_ti
0642 C299       435       clr TI
0644 22         436       ret
0645            437   
0645            438   display_menu:
0645 C0E0       439            push acc
0647 7407       439            mov a, #7
0649 14         439            dec a
064A 12016D     439            lcall ?Set_Cursor_1 ; Select column and row
064D D0E0       439            pop acc 
064F C000       440            push ar0
0651 A831       440            mov r0, Soak_time
0653 120172     440            lcall ?Display_BCD
0656 D000       440            pop ar0
0658 C0E0       441            push acc
065A 740B       441            mov a, #11
065C 14         441            dec a
065D 12016D     441            lcall ?Set_Cursor_1 ; Select column and row
0660 D0E0       441            pop acc
0662            441   
0662 C000       442            push ar0
0664 A833       442            mov r0, Soak_temp_hund
0666 120172     442            lcall ?Display_BCD
0669 D000       442            pop ar0
066B C0E0       443            push acc
066D 740C       443            mov a, #12
066F 14         443            dec a
0670 12016D     443            lcall ?Set_Cursor_1 ; Select column and row
0673 D0E0       443            pop acc
0675 C000       444            push ar0
0677 A832       444            mov r0, soak_temp
0679 120172     444            lcall ?Display_BCD
067C D000       444            pop ar0
067E C0E0       445            push acc
0680 7409       445            mov a, #9
0682 14         445            dec a
0683 12016B     445            lcall ?Set_Cursor_2 ; Select column and row
0686 D0E0       445            pop acc
0688 C000       446            push ar0
068A A834       446            mov r0, Reflow_time
068C 120172     446            lcall ?Display_BCD
068F D000       446            pop ar0
0691 C0E0       447            push acc
0693 740D       447            mov a, #13
0695 14         447            dec a
0696 12016B     447            lcall ?Set_Cursor_2 ; Select column and row
0699 D0E0       447            pop acc
069B C000       448            push ar0
069D A83C       448            mov r0, reflow_temp_100
069F 120172     448            lcall ?Display_BCD
06A2 D000       448            pop ar0
06A4 C0E0       449            push acc
06A6 740E       449            mov a, #14
06A8 14         449            dec a
06A9 12016B     449            lcall ?Set_Cursor_2 ; Select column and row
06AC D0E0       449            pop acc
06AE C000       450            push ar0
06B0 A835       450            mov r0, reflow_temp
06B2 120172     450            lcall ?Display_BCD
06B5 D000       450            pop ar0
06B7 22         451       ret
06B8            452   
06B8            453   display_heating_s:
06B8 C0E0       454            push acc
06BA 7404       454            mov a, #4
06BC 14         454            dec a
06BD 12016D     454            lcall ?Set_Cursor_1 ; Select column and row
06C0 D0E0       454            pop acc
06C2 C000       455            push ar0
06C4 A833       455            mov r0, Soak_temp_hund
06C6 120172     455            lcall ?Display_BCD
06C9 D000       455            pop ar0
06CB C0E0       456            push acc
06CD 7405       456            mov a, #5
06CF 14         456            dec a
06D0 12016D     456            lcall ?Set_Cursor_1 ; Select column and row
06D3 D0E0       456            pop acc
06D5 C000       457            push ar0
06D7 A832       457            mov r0, soak_temp
06D9 120172     457            lcall ?Display_BCD
06DC D000       457            pop ar0
06DE C0E0       458            push acc
06E0 740C       458            mov a, #12
06E2 14         458            dec a
06E3 12016D     458            lcall ?Set_Cursor_1 ; Select column and row
06E6 D0E0       458            pop acc
06E8 C000       459            push ar0
06EA A838       459            mov r0, outside_temp
06EC 120172     459            lcall ?Display_BCD
06EF D000       459            pop ar0
06F1 C0E0       460            push acc
06F3 7407       460            mov a, #7
06F5 14         460            dec a
06F6 12016B     460            lcall ?Set_Cursor_2 ; Select column and row
06F9 D0E0       460            pop acc
06FB C000       461            push ar0
06FD A836       461            mov r0, current_temp
06FF 120172     461            lcall ?Display_BCD
0702 D000       461            pop ar0
0704 22         462            ret
0705            463   
0705            464   display_heating_r:
0705 C0E0       465            push acc
0707 7404       465            mov a, #4
0709 14         465            dec a
070A 12016D     465            lcall ?Set_Cursor_1 ; Select column and row
070D D0E0       465            pop acc
070F C000       466            push ar0
0711 A83C       466            mov r0, reflow_temp_100
0713 120172     466            lcall ?Display_BCD
0716 D000       466            pop ar0
0718 C0E0       467            push acc
071A 7405       467            mov a, #5
071C 14         467            dec a
071D 12016D     467            lcall ?Set_Cursor_1 ; Select column and row
0720 D0E0       467            pop acc
0722 C000       468            push ar0
0724 A835       468            mov r0, reflow_temp
0726 120172     468            lcall ?Display_BCD
0729 D000       468            pop ar0
072B C0E0       469            push acc
072D 740C       469            mov a, #12
072F 14         469            dec a
0730 12016D     469            lcall ?Set_Cursor_1 ; Select column and row
0733 D0E0       469            pop acc
0735 C000       470            push ar0
0737 A838       470            mov r0, outside_temp
0739 120172     470            lcall ?Display_BCD
073C D000       470            pop ar0
073E C0E0       471            push acc
0740 7407       471            mov a, #7
0742 14         471            dec a
0743 12016B     471            lcall ?Set_Cursor_2 ; Select column and row
0746 D0E0       471            pop acc
0748 C000       472            push ar0
074A A836       472            mov r0, current_temp
074C 120172     472            lcall ?Display_BCD
074F D000       472            pop ar0
0751 22         473            ret
0752            474   
0752            475   display_blank:
0752 C0E0       476            push acc
0754 7401       476            mov a, #1
0756 14         476            dec a
0757 12016D     476            lcall ?Set_Cursor_1 ; Select column and row
075A D0E0       476            pop acc
075C C083       477            push dph
075E C082       477            push dpl
0760 C0E0       477            push acc
0762 900069     477            mov dptr, #blank
0765 120160     477            lcall ?Send_Constant_String
0768 D0E0       477            pop acc
076A D082       477            pop dpl
076C D083       477            pop dph
076E C0E0       478            push acc
0770 7401       478            mov a, #1
0772 14         478            dec a
0773 12016B     478            lcall ?Set_Cursor_2 ; Select column and row
0776 D0E0       478            pop acc
0778 C083       479            push dph
077A C082       479            push dpl
077C C0E0       479            push acc
077E 900069     479            mov dptr, #blank
0781 120160     479            lcall ?Send_Constant_String
0784 D0E0       479            pop acc
0786 D082       479            pop dpl
0788 D083       479            pop dph
078A 22         480            ret
078B            481   
078B            482   Display_formated_BCD:
078B C0E0       483            push acc
078D 740C       483            mov a, #12
078F 14         483            dec a
0790 12016D     483            lcall ?Set_Cursor_1 ; Select column and row
0793 D0E0       483            pop acc
0795 C000       484            push ar0
0797 A84B       484            mov r0, bcd+2
0799 120172     484            lcall ?Display_BCD
079C D000       484            pop ar0
079E C0E0       485            push acc
07A0 742E       485            mov a, #'.'
07A2 120123     485            lcall ?WriteData
07A5 D0E0       485            pop acc
07A7 C000       486            push ar0
07A9 A84A       486            mov r0, bcd+1
07AB 120172     486            lcall ?Display_BCD
07AE D000       486            pop ar0
07B0 22         487            ret
07B1            488   
07B1            489   conv_to_bcd_high:
07B1 C4         490       swap a
07B2 540F       491       anl a, #0x0f
07B4 F9         492       mov R1, a
07B5 22         493            ret
07B6            494   
07B6            495   conv_to_bcd_low:
07B6 540F       496       anl a, #0x0f
07B8 F8         497       mov R0, A
07B9 22         498            ret
07BA            499   
07BA            500   conv_to_bcd:
07BA 883D       501            mov x+0, R0
07BC 893E       502            mov x+1, R1
07BE 753F00     503            mov x+2, #0
07C1 754000     504            mov x+3, #0
07C4 1201C6     505       lcall hex2bcd
07C7 22         506            ret
07C8            507   
07C8            508   Outside_tmp:
07C8 53E8F0     509       anl ADCCON0, #0xF0
07CB 43E807     510            orl ADCCON0, #0x07 ; Select channel 7 
07CE            511   
07CE C2EF       512       clr ADCF
07D0 D2EE       513       setb ADCS
07D2 30EFFD     514       jnb ADCF, $
07D5            515   
07D5 E5C3       516       mov a, ADCRH
07D7 C4         517       swap a
07D8 C0E0       518       push acc
07DA 540F       519       anl a, #0x0f
07DC F9         520       mov R1, a
07DD D0E0       521       pop acc
07DF 54F0       522       anl a, #0xf0
07E1 45C2       523       orl a, ADCRL
07E3 F8         524       mov R0, A
07E4            525       
07E4            526       ; Convert to voltage
07E4 883D       527            mov x+0, R0
07E6 893E       528            mov x+1, R1
07E8 753F00     529            mov x+2, #0
07EB 754000     530            mov x+3, #0
07EE 75417C     531            mov y+0, #low (50300 % 0x10000) 
07F1 7542C4     531            mov y+1, #high(50300 % 0x10000) 
07F4 754300     531            mov y+2, #low (50300 / 0x10000) 
07F7 754400     531            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07FA 120340     532            lcall mul32
07FD 7541FF     533            mov y+0, #low (4095 % 0x10000) 
0800 75420F     533            mov y+1, #high(4095 % 0x10000) 
0803 754300     533            mov y+2, #low (4095 / 0x10000) 
0806 754400     533            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0809 1203CD     534            lcall div32
080C 7541A4     535            mov y+0, #low (27300 % 0x10000) 
080F 75426A     535            mov y+1, #high(27300 % 0x10000) 
0812 754300     535            mov y+2, #low (27300 / 0x10000) 
0815 754400     535            mov y+3, #high(27300 / 0x10000) 
0818 1202AC     536            lcall sub32
081B 754164     537            mov y+0, #low (100 % 0x10000) 
081E 754200     537            mov y+1, #high(100 % 0x10000) 
0821 754300     537            mov y+2, #low (100 / 0x10000) 
0824 754400     537            mov y+3, #high(100 / 0x10000) 
0827 120340     538            lcall mul32
082A            539       ;save outside temp to z to later add onto the oven temp
082A 853D45     540       mov z+0, x+0
082D 853E46     541       mov z+1, x+1
0830 853F47     542       mov z+2, x+2
0833 854048     543       mov z+3, x+3 
0836 1201C6     544       lcall hex2bcd
0839 12078B     545       lcall Display_formated_BCD
083C            546            
083C 22         547            ret
083D            548   
083D            549   oven_tmp:
083D 53E8F0     550       anl  ADCCON0, #0xF0  
0840 43E804     551       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0843            552   
0843 C2EF       553       clr ADCF
0845 D2EE       554       setb ADCS
0847 30EFFD     555       jnb ADCF, $
084A            556   
084A E5C3       557       mov a, ADCRH
084C C4         558       swap a
084D C0E0       559       push acc
084F 540F       560       anl a, #0x0f
0851 F9         561       mov R1, a
0852 D0E0       562       pop acc
0854 54F0       563       anl a, #0xf0
0856 45C2       564       orl a, ADCRL
0858 F8         565       mov R0, A
0859            566       
0859            567       ; Convert to voltage
0859 883D       568            mov x+0, R0
085B 893E       569            mov x+1, R1
085D 753F00     570            mov x+2, #0
0860 754000     571            mov x+3, #0
0863 75417C     572            mov y+0, #low (50300 % 0x10000) 
0866 7542C4     572            mov y+1, #high(50300 % 0x10000) 
0869 754300     572            mov y+2, #low (50300 / 0x10000) 
086C 754400     572            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
086F 120340     573            lcall mul32
0872 7541FF     574            mov y+0, #low (4095 % 0x10000) 
0875 75420F     574            mov y+1, #high(4095 % 0x10000) 
0878 754300     574            mov y+2, #low (4095 / 0x10000) 
087B 754400     574            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
087E 1203CD     575            lcall div32
0881            576   
0881            577            ;vout of opamp should now be in x
0881            578       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0881            579       ;first calculate vout*R2:
0881 7541BD     580            mov y+0, #low (1469 % 0x10000) 
0884 754205     580            mov y+1, #high(1469 % 0x10000) 
0887 754300     580            mov y+2, #low (1469 / 0x10000) 
088A 754400     580            mov y+3, #high(1469 / 0x10000) 
088D 120340     581       lcall mul32
0890            582       ;now vout*R2 ohm is in x
0890            583       ;next we will take 461 650V and divide
0890 754152     584            mov y+0, #low (461650 % 0x10000) 
0893 75420B     584            mov y+1, #high(461650 % 0x10000) 
0896 754307     584            mov y+2, #low (461650 / 0x10000) 
0899 754400     584            mov y+3, #high(461650 / 0x10000)  
089C 1203CD     585       lcall div32
089F            586       ;multiply by 100k and then divide by 41 to cancel units
089F 754140     587            mov y+0, #low (1000000 % 0x10000) 
08A2 754242     587            mov y+1, #high(1000000 % 0x10000) 
08A5 75430F     587            mov y+2, #low (1000000 / 0x10000) 
08A8 754400     587            mov y+3, #high(1000000 / 0x10000) 
08AB 120340     588       lcall mul32
08AE 754129     589            mov y+0, #low (41 % 0x10000) 
08B1 754200     589            mov y+1, #high(41 % 0x10000) 
08B4 754300     589            mov y+2, #low (41 / 0x10000) 
08B7 754400     589            mov y+3, #high(41 / 0x10000) 
08BA 1203CD     590       lcall div32
08BD            591       ;move the outside temp to y and add
08BD 854541     592       mov y+0, z+0
08C0 854642     593       mov y+1, z+1
08C3 854743     594       mov y+2, z+2
08C6 854844     595       mov y+3, z+3
08C9 12028B     596       lcall add32
08CC 1201C6     597       lcall hex2bcd
08CF 1208D9     598       lcall display_oven_tmp
08D2 854B36     599       mov current_temp, bcd+2
08D5 854C37     600       mov current_temp_hund, bcd+3
08D8            601       
08D8 22         602   ret
08D9            603   
08D9            604   display_oven_tmp:
08D9 C0E0       605            push acc
08DB 7406       605            mov a, #6
08DD 14         605            dec a
08DE 12016B     605            lcall ?Set_Cursor_2 ; Select column and row
08E1 D0E0       605            pop acc
08E3 C000       606            push ar0
08E5 A84C       606            mov r0, bcd+3
08E7 120172     606            lcall ?Display_BCD
08EA D000       606            pop ar0
08EC C000       607            push ar0
08EE A84B       607            mov r0, bcd+2
08F0 120172     607            lcall ?Display_BCD
08F3 D000       607            pop ar0
08F5 C0E0       608            push acc
08F7 742E       608            mov a, #'.'
08F9 120123     608            lcall ?WriteData
08FC D0E0       608            pop acc
08FE C000       609            push ar0
0900 A84A       609            mov r0, bcd+1
0902 120172     609            lcall ?Display_BCD
0905 D000       609            pop ar0
0907 22         610            ret
0908            611   
0908            612   skipp1:
0908 22         613            ret
0909            614   clearx:
0909 753D00     615            mov x+0, #0x00
090C 753E00     616            mov x+1, #0x00
090F 753F00     617            mov x+2, #0x00
0912 754000     618            mov x+3, #0x00
0915 22         619            ret 
0916            620   
0916            621   check_temps:
0916 E536       622            mov a, current_temp 
0918 B53200     623            cjne a, Soak_temp, next1 ; want to use carry bit from cjne so arbitrary jump
091B            624   next1:
091B 40EB       625            jc skipp1 ; skip if current_temp < soak_temp (carry bit set)
091D E537       626            mov a, current_temp_hund
091F 120909     627            lcall clearx
0922 85333D     628            mov x, soak_temp_hund 
0925 75410A     629            mov y+0, #low (10 % 0x10000) 
0928 754200     629            mov y+1, #high(10 % 0x10000) 
092B 754300     629            mov y+2, #low (10 / 0x10000) 
092E 754400     629            mov y+3, #high(10 / 0x10000) 
0931 1203CD     630            lcall div32 
0934 853D33     631            mov soak_temp_hund, x
0937 B53300     632            cjne a, soak_temp_hund, next2 ; want to use carry bit from cjne operation so arbitrary jump
093A            633   next2:
093A 40CC       634            jc skipp1 ; skip if soak_temp_hund < next2
093C 753002     635            mov STATE, #0x02
093F 22         636            ret
0940            637   
0940            638   check_currenttemp:
0940 E536       639            mov a, current_temp
0942 B460C3     640            cjne a, #0x60, skipp1
0945 D208       641            setb temp_flag
0947 22         642            ret
0948            643   
0948            644   safety_feature:
0948 E539       645            mov a, seconds
094A B43CBB     646            cjne a, #0x3C, skipp1
094D 2008B8     647            jb temp_flag, skipp1
0950 120752     648            lcall display_blank
0953 753B00     649            mov pwm, #0
0956 C0E0       650            push acc
0958 7401       650            mov a, #1
095A 14         650            dec a
095B 12016D     650            lcall ?Set_Cursor_1 ; Select column and row
095E D0E0       650            pop acc
0960 C083       651            push dph
0962 C082       651            push dpl
0964 C0E0       651            push acc
0966 90007A     651            mov dptr, #safety_message
0969 120160     651            lcall ?Send_Constant_String
096C D0E0       651            pop acc
096E D082       651            pop dpl
0970 D083       651            pop dph
0972 C0E0       652            push acc
0974 7401       652            mov a, #1
0976 14         652            dec a
0977 12016B     652            lcall ?Set_Cursor_2 ; Select column and row
097A D0E0       652            pop acc
097C C083       653            push dph
097E C082       653            push dpl
0980 C0E0       653            push acc
0982 900082     653            mov dptr, #safety_message1
0985 120160     653            lcall ?Send_Constant_String
0988 D0E0       653            pop acc
098A D082       653            pop dpl
098C D083       653            pop dph
098E            654   
098E            655   safety_feature_loop:
098E 02098E     656            ljmp safety_feature_loop
0991            657   
0991            658   skipp2:
0991 22         659            ret
0992            660   
0992            661   ; checks secs for state 2 -> 3
0992            662   check_secs_s2:
0992 E531       663       mov a, soak_time
0994 B53903     664       cjne a, seconds, skip_check_secs_s2
0997 753003     665       mov state, #3
099A            666   skip_check_secs_s2:
099A 22         667       ret
099B            668   
099B            669   ; checks temp for state 3 -> 4
099B            670   check_temps_s3:
099B E536       671            mov a, current_temp 
099D B535F1     672            cjne a, Reflow_temp, skipp2
09A0 E537       673            mov a, current_temp_hund
09A2 120909     674            lcall clearx
09A5 853C3D     675            mov x, reflow_temp_100 
09A8 75410A     676            mov y+0, #low (10 % 0x10000) 
09AB 754200     676            mov y+1, #high(10 % 0x10000) 
09AE 754300     676            mov y+2, #low (10 / 0x10000) 
09B1 754400     676            mov y+3, #high(10 / 0x10000)    
09B4 1203CD     677            lcall div32 
09B7 853D3C     678            mov reflow_temp_100, x
09BA B53CD4     679            cjne a, reflow_temp_100, skipp2
09BD 753004     680            mov STATE, #0x04
09C0 22         681            ret
09C1            682   
09C1            683   ; checks secs for state 4 -> 5
09C1            684   check_secs_s4:
09C1 E534       685       mov a, reflow_time
09C3 B53903     686       cjne a, seconds, skip_check_secs_s4
09C6 753005     687       mov state, #5
09C9            688   skip_check_secs_s4:
09C9 22         689       ret
09CA            690   
09CA            691   ; checks temp for state 5 -> 0
09CA            692   check_temp_s5:
09CA E536       693       mov a, current_temp      
09CC 75F03C     694       mov b, #60                 
09CF B5F003     695       cjne a, b, check_high       
09D2 0209DD     696       ljmp skip_s5_to_s0         
09D5            697   check_high:
09D5 5480       698       anl a, #0x80               ; mask msb (bit 7)
09D7 6004       699       jz skip_s5_to_s0           ; if msb = 0 skip to the end
09D9 753000     700       mov STATE, #0x00           ; set state to 0 (finished)
09DC 22         701       ret                        ; return
09DD            702   skip_s5_to_s0:
09DD 22         703       ret                        ; return without state change
09DE            704   
09DE            705   main:
09DE 75817F     706            mov sp, #0x7f
09E1 120436     707            lcall Init_All
09E4 12012D     708       lcall LCD_4BIT
09E7 1204B2     709            lcall Timer2_ISR
09EA            710       
09EA            711        ; initial messages in LCD
09EA 753000     712       mov STATE, #0x00
09ED 753100     713       mov Soak_time, #0x00
09F0 753200     714       mov Soak_temp, #0x00
09F3 753300     715       mov soak_temp_hund, #0x00
09F6 753400     716       mov Reflow_time, #0x00
09F9 753500     717       mov Reflow_temp, #0x00
09FC 753600     718       mov current_temp, #0x00
09FF 753700     719       mov current_temp_hund, #0x00
0A02 753900     720       mov seconds, #0x00
0A05 753A00     721       mov pwm_counter, #0x00
0A08 753B00     722       mov pwm, #0x00
0A0B 753C00     723       mov reflow_temp_100, #0x00
0A0E C205       724       clr decrement1
0A10 C206       725       clr s_flag 
0A12            726            
0A12            727   Forever:
0A12 120752     728            lcall display_blank
0A15            729   
0A15            730   state_0:
0A15 C0E0       731            push acc
0A17 7401       731            mov a, #1
0A19 14         731            dec a
0A1A 12016D     731            lcall ?Set_Cursor_1 ; Select column and row
0A1D D0E0       731            pop acc
0A1F C083       732            push dph
0A21 C082       732            push dpl
0A23 C0E0       732            push acc
0A25 90002E     732            mov dptr, #soak_param
0A28 120160     732            lcall ?Send_Constant_String
0A2B D0E0       732            pop acc
0A2D D082       732            pop dpl
0A2F D083       732            pop dph
0A31 C0E0       733            push acc
0A33 7401       733            mov a, #1
0A35 14         733            dec a
0A36 12016B     733            lcall ?Set_Cursor_2 ; Select column and row
0A39 D0E0       733            pop acc
0A3B C083       734            push dph
0A3D C082       734            push dpl
0A3F C0E0       734            push acc
0A41 90003D     734            mov dptr, #reflow_param
0A44 120160     734            lcall ?Send_Constant_String
0A47 D0E0       734            pop acc
0A49 D082       734            pop dpl
0A4B D083       734            pop dph
0A4D            735   
0A4D            736   state_0_loop:
0A4D E530       737            mov a, STATE
0A4F 753B64     738           mov pwm, #100
0A52 B4000F     739            cjne a, #0, state_1
0A55 1204D3     740            lcall LCD_PB
0A58 120531     741            lcall check_decrement
0A5B 120645     742            lcall display_menu
0A5E 120626     743            lcall Check_start
0A61 020A4D     744            ljmp state_0_loop
0A64            745   
0A64            746   state_1: 
0A64 120752     747            lcall display_blank
0A67 753900     748            mov seconds, #0x00
0A6A C0E0       749            push acc
0A6C 7401       749            mov a, #1
0A6E 14         749            dec a
0A6F 12016D     749            lcall ?Set_Cursor_1 ; Select column and row
0A72 D0E0       749            pop acc
0A74 C083       750            push dph
0A76 C082       750            push dpl
0A78 C0E0       750            push acc
0A7A 90004E     750            mov dptr, #heating_to_s
0A7D 120160     750            lcall ?Send_Constant_String
0A80 D0E0       750            pop acc
0A82 D082       750            pop dpl
0A84 D083       750            pop dph
0A86 C0E0       751            push acc
0A88 7401       751            mov a, #1
0A8A 14         751            dec a
0A8B 12016B     751            lcall ?Set_Cursor_2 ; Select column and row
0A8E D0E0       751            pop acc
0A90 C083       752            push dph
0A92 C082       752            push dpl
0A94 C0E0       752            push acc
0A96 90005E     752            mov dptr, #heating_temp
0A99 120160     752            lcall ?Send_Constant_String
0A9C D0E0       752            pop acc
0A9E D082       752            pop dpl
0AA0 D083       752            pop dph
0AA2            753   
0AA2            754   state_1_loop:
0AA2 E530       755            mov a, STATE
0AA4 B4011D     756            cjne a, #1, state_2
0AA7 1206B8     757            lcall display_heating_s
0AAA 753B00     758            mov pwm, #0
0AAD 1207C8     759            lcall outside_tmp
0AB0 12083D     760            lcall oven_tmp
0AB3 120940     761            lcall check_currenttemp
0AB6 120948     762            lcall safety_feature
0AB9 120916     763            lcall check_temps
0ABC 7AFA       764            mov R2, #250
0ABE 1204AC     765            lcall waitms
0AC1 020AA2     766            ljmp state_1_loop
0AC4            767   
0AC4            768   state_2:
0AC4 120752     769            lcall display_blank 
0AC7 753900     770            mov seconds, #0x00
0ACA C0E0       771            push acc
0ACC 7401       771            mov a, #1
0ACE 14         771            dec a
0ACF 12016D     771            lcall ?Set_Cursor_1 ; Select column and row
0AD2 D0E0       771            pop acc
0AD4 C083       772            push dph
0AD6 C082       772            push dpl
0AD8 C0E0       772            push acc
0ADA 900090     772            mov dptr, #soaking
0ADD 120160     772            lcall ?Send_Constant_String
0AE0 D0E0       772            pop acc
0AE2 D082       772            pop dpl
0AE4 D083       772            pop dph
0AE6 C0E0       773            push acc
0AE8 7401       773            mov a, #1
0AEA 14         773            dec a
0AEB 12016B     773            lcall ?Set_Cursor_2 ; Select column and row
0AEE D0E0       773            pop acc
0AF0 C083       774            push dph
0AF2 C082       774            push dpl
0AF4 C0E0       774            push acc
0AF6 9000AB     774            mov dptr, #time
0AF9 120160     774            lcall ?Send_Constant_String
0AFC D0E0       774            pop acc
0AFE D082       774            pop dpl
0B00 D083       774            pop dph
0B02 C0E0       775            push acc
0B04 740E       775            mov a, #14
0B06 14         775            dec a
0B07 12016D     775            lcall ?Set_Cursor_1 ; Select column and row
0B0A D0E0       775            pop acc
0B0C C000       776            push ar0
0B0E A831       776            mov r0, soak_time
0B10 120172     776            lcall ?Display_BCD
0B13 D000       776            pop ar0
0B15            777   
0B15            778   state_2_loop: 
0B15 E530       779            mov a, STATE
0B17 B40225     780       cjne a, #2, state_3
0B1A C0E0       781            push acc
0B1C 7406       781            mov a, #6
0B1E 14         781            dec a
0B1F 12016B     781            lcall ?Set_Cursor_2 ; Select column and row
0B22 D0E0       781            pop acc
0B24 120909     782            lcall clearx
0B27 85393D     783            mov x, seconds 
0B2A 1201C6     784            lcall hex2bcd 
0B2D C000       785            push ar0
0B2F A849       785            mov r0, bcd
0B31 120172     785            lcall ?Display_BCD
0B34 D000       785            pop ar0
0B36 753B14     786            mov pwm, #20
0B39 120992     787            lcall check_secs_s2
0B3C 020B15     788            ljmp state_2_loop
0B3F            789   
0B3F            790   state_3:
0B3F 120752     791            lcall display_blank
0B42 C0E0       792            push acc
0B44 7401       792            mov a, #1
0B46 14         792            dec a
0B47 12016D     792            lcall ?Set_Cursor_1 ; Select column and row
0B4A D0E0       792            pop acc
0B4C C083       793            push dph
0B4E C082       793            push dpl
0B50 C0E0       793            push acc
0B52 9000B4     793            mov dptr, #heating_to_r
0B55 120160     793            lcall ?Send_Constant_String
0B58 D0E0       793            pop acc
0B5A D082       793            pop dpl
0B5C D083       793            pop dph
0B5E C0E0       794            push acc
0B60 7401       794            mov a, #1
0B62 14         794            dec a
0B63 12016B     794            lcall ?Set_Cursor_2 ; Select column and row
0B66 D0E0       794            pop acc
0B68 C083       795            push dph
0B6A C082       795            push dpl
0B6C C0E0       795            push acc
0B6E 90005E     795            mov dptr, #heating_temp
0B71 120160     795            lcall ?Send_Constant_String
0B74 D0E0       795            pop acc
0B76 D082       795            pop dpl
0B78 D083       795            pop dph
0B7A            796   
0B7A            797   state_3_loop:
0B7A E530       798            mov a, STATE
0B7C B40317     799            cjne a, #3, state_4
0B7F 120705     800            lcall display_heating_r
0B82 753B00     801            mov pwm, #0
0B85 1207C8     802            lcall outside_tmp
0B88 12083D     803            lcall oven_tmp
0B8B 12099B     804            lcall check_temps_s3
0B8E 7AFA       805            mov R2, #250
0B90 1204AC     806            lcall waitms
0B93 020B7A     807            ljmp state_3_loop
0B96            808   
0B96            809   state_4:
0B96 120752     810            lcall display_blank 
0B99 753900     811            mov seconds, #0x00
0B9C C0E0       812            push acc
0B9E 7401       812            mov a, #1
0BA0 14         812            dec a
0BA1 12016D     812            lcall ?Set_Cursor_1 ; Select column and row
0BA4 D0E0       812            pop acc
0BA6 C083       813            push dph
0BA8 C082       813            push dpl
0BAA C0E0       813            push acc
0BAC 90009E     813            mov dptr, #reflow
0BAF 120160     813            lcall ?Send_Constant_String
0BB2 D0E0       813            pop acc
0BB4 D082       813            pop dpl
0BB6 D083       813            pop dph
0BB8 C0E0       814            push acc
0BBA 7401       814            mov a, #1
0BBC 14         814            dec a
0BBD 12016B     814            lcall ?Set_Cursor_2 ; Select column and row
0BC0 D0E0       814            pop acc
0BC2 C083       815            push dph
0BC4 C082       815            push dpl
0BC6 C0E0       815            push acc
0BC8 9000AB     815            mov dptr, #time
0BCB 120160     815            lcall ?Send_Constant_String
0BCE D0E0       815            pop acc
0BD0 D082       815            pop dpl
0BD2 D083       815            pop dph
0BD4 C0E0       816            push acc
0BD6 740E       816            mov a, #14
0BD8 14         816            dec a
0BD9 12016D     816            lcall ?Set_Cursor_1 ; Select column and row
0BDC D0E0       816            pop acc
0BDE C000       817            push ar0
0BE0 A831       817            mov r0, soak_time
0BE2 120172     817            lcall ?Display_BCD
0BE5 D000       817            pop ar0
0BE7            818   
0BE7            819   state_4_loop:
0BE7 E530       820       mov a, STATE
0BE9 B40422     821       cjne a, #4, state_5
0BEC C0E0       822            push acc
0BEE 7406       822            mov a, #6
0BF0 14         822            dec a
0BF1 12016B     822            lcall ?Set_Cursor_2 ; Select column and row
0BF4 D0E0       822            pop acc
0BF6 85393D     823       mov x, seconds
0BF9 1201C6     824       lcall hex2bcd
0BFC C000       825            push ar0
0BFE A849       825            mov r0, bcd
0C00 120172     825            lcall ?Display_BCD
0C03 D000       825            pop ar0
0C05 753B14     826       mov pwm, #20
0C08 1209C1     827       lcall check_secs_s4
0C0B 020BE7     828       ljmp state_4_loop
0C0E            829   
0C0E            830   state_5:
0C0E 120752     831       lcall display_blank
0C11 C0E0       832            push acc
0C13 7401       832            mov a, #1
0C15 14         832            dec a
0C16 12016D     832            lcall ?Set_Cursor_1 ; Select column and row
0C19 D0E0       832            pop acc
0C1B C083       833            push dph
0C1D C082       833            push dpl
0C1F C0E0       833            push acc
0C21 9000C4     833            mov dptr, #cooling
0C24 120160     833            lcall ?Send_Constant_String
0C27 D0E0       833            pop acc
0C29 D082       833            pop dpl
0C2B D083       833            pop dph
0C2D C0E0       834            push acc
0C2F 7401       834            mov a, #1
0C31 14         834            dec a
0C32 12016B     834            lcall ?Set_Cursor_2 ; Select column and row
0C35 D0E0       834            pop acc
0C37 C083       835            push dph
0C39 C082       835            push dpl
0C3B C0E0       835            push acc
0C3D 90005E     835            mov dptr, #heating_temp
0C40 120160     835            lcall ?Send_Constant_String
0C43 D0E0       835            pop acc
0C45 D082       835            pop dpl
0C47 D083       835            pop dph
0C49            836       
0C49            837   state_5_loop:
0C49 E530       838            mov a, STATE
0C4B B40527     839            cjne a, #5, state_0_jump
0C4E 753B64     840            mov pwm, #100
0C51 C0E0       841            push acc
0C53 7407       841            mov a, #7
0C55 14         841            dec a
0C56 12016B     841            lcall ?Set_Cursor_2 ; Select column and row
0C59 D0E0       841            pop acc
0C5B C000       842            push ar0
0C5D A836       842            mov r0, current_temp
0C5F 120172     842            lcall ?Display_BCD
0C62 D000       842            pop ar0
0C64 1207C8     843            lcall outside_tmp
0C67 12083D     844            lcall oven_tmp
0C6A 1209CA     845            lcall check_temp_s5
0C6D 7AFA       846            mov R2, #250
0C6F 1204AC     847            lcall waitms
0C72 020C49     848            ljmp state_5_loop
0C75            849   
0C75            850   state_0_jump:
0C75 020A15     851            ljmp state_0
0C78            852   
0C78            853   END
