0000              1   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             24   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             25   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             26   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             27   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             28   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             29   
0000             30   ORG 0x0000
0000 020FC4      31            ljmp main
0003             32   ; Timer/Counter 0 overflow interrupt vector
000B             33   org 0x000B
000B 0204CA      34            ljmp Timer0_ISR
0023             35   org 0x0023
0023 32          36            reti
0024             37            ; Timer/Counter 2 overflow interrupt vector
002B             38   org 0x002B
002B 0204D7      39            ljmp Timer2_ISR
002E             40   
002E             41   START_BUTTON  equ P1.7
002E             42   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             43   CONVERT equ P1.6
002E             44   SOUND_OUT equ P1.2
002E             45   MUTE_BUTTON equ P3.0
002E             46   
002E             47   
002E             48   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    49   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    50   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A20    51   heating_to_s:  db   'Ts:   C To:   C', 0
     20204320
     546F3A20
     20204300
005E 54656D70    52   heating_temp:db    'Temp:', 0
     3A00
0064 20202020    53   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
0075 4552524F    54   safety_message:db  'ERROR: ', 0
     523A2000
007D 43616E74    55   safety_message1:db  'Cant Read Temp',0
     20526561
     64205465
     6D7000
008C 536F616B    56   soaking:db         'Soaking time:', 0
     696E6720
     74696D65
     3A00
009A 5265666C    57   reflow:db          'Reflow Time:',0
     6F772054
     696D653A
     00
00A7 54696D65    58   time:db            'Time:  s',0
     3A202073
     00
00B0 54723A20    59   heating_to_r:db    'Tr:   C To:   C', 0
     20204320
     546F3A20
     20204300
00C0 436F6F6C    60   cooling:db         'Cooling down...', 0
     696E6720
     646F776E
     2E2E2E00
00D0 446F6E65    61   done:db            'Done',0
     00
00D5 506C7320    62   ready:db           'Pls Remove',0
     52656D6F
     766500
00E0 4300        63   celsius:db         'C',0
00E2 4600        64   fahrenheit:db      'F',0
00E4 4C00        65   low_1:db             'L',0
00E6 4800        66   high_1:db            'H',0
00E8 4700        67   good:db            'G',0
00EA 2000        68   blank_unit:db      ' ',0
00EC             69   
00EC             70   cseg
00EC             71   ; These 'equ' must match the hardware wiring
00EC             72   LCD_RS equ P1.3
00EC             73   LCD_E  equ P1.4
00EC             74   LCD_D4 equ P0.0
00EC             75   LCD_D5 equ P0.1
00EC             76   LCD_D6 equ P0.2
00EC             77   LCD_D7 equ P0.3
00EC             78   ;ADC_pn equ P1.1
00EC             79   
00EC             80   
                 82   	$LIST
01DE             84   
0030             85   DSEG at 30h
0030             86   STATE: ds 1
0031             87   Soak_time: ds 1
0032             88   Soak_temp: ds 1
0033             89   soak_temp_hund: ds 1
0034             90   Reflow_time: ds 1
0035             91   Reflow_temp: ds 1
0036             92   current_temp: ds 1
0037             93   current_temp_hund: ds 1
0038             94   outside_temp: ds 1
0039             95   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             96   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             97   pwm: ds 1 ; pwm percentage
003C             98   reflow_temp_100:ds 1
003D             99   x: ds 4
0041            100   y: ds 4
0045            101   z: ds 4
0049            102   bcd: ds 5
004E            103   
004E            104   
0000            105   BSEG
0000            106   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000            107   PB0: dbit 1
0001            108   PB1: dbit 1
0002            109   PB2: dbit 1
0003            110   PB3: dbit 1
0004            111   PB4: dbit 1
0005            112   decrement1: dbit 1
0006            113   s_flag: dbit 1 ; set to 1 every time a second has passed
0007            114   mf: dbit 1
0008            115   temp_flag: dbit 1
0009            116   fahrenheit_flag: dbit 1
000A            117   mute_flag: dbit 1
000B            118   
                546   $LIST
                120   $LIST
044E            122   
044E            123   CSEG
044E            124   
044E            125   Init_All:
044E            126            ; Configure all the pins for biderectional I/O
044E 75AC00     127            mov     P3M1, #0x00
0451 75AD00     128            mov     P3M2, #0x00
0454 75B300     129            mov     P1M1, #0x00
0457 75B400     130            mov     P1M2, #0x00
045A 75B100     131            mov     P0M1, #0x00
045D 75B200     132            mov     P0M2, #0x00
0460            133            
0460 438E10     134            orl     CKCON, #0x10 ; CLK is the input for timer 1
0463 438780     135            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0466 759852     136            mov     SCON, #0x52
0469 53C4DF     137            anl     T3CON, #0b11011111
046C 53890F     138            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
046F 438920     139            orl     TMOD, #0x20 ; Timer 1 Mode 2
0472 758DF7     140            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0475 D28E       141            setb TR1
0477            142            
0477            143            ; Using timer 0 for delay functions.  Initialize here:
0477 C28C       144            clr     TR0 ; Stop timer 0
0479 438E08     145            orl     CKCON,#0x08 ; CLK is the input for timer 0
047C 5389F0     146            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
047F 438901     147            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0482            148   
0482            149            ; Initialize timer 2 for periodic interrupts
0482 75C800     150            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
0485 75CDD7     151            mov TH2, #high(TIMER2_RELOAD)
0488 75CC79     152            mov TL2, #low(TIMER2_RELOAD)
048B            153            ; Set the reload value
048B 75C9A0     154            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
048E 75CBD7     155            mov RCMP2H, #high(TIMER2_RELOAD)
0491 75CA79     156            mov RCMP2L, #low(TIMER2_RELOAD)
0494            157            ; Init the free running 10 ms counter to zero
0494 753A00     158            mov pwm_counter, #0
0497            159            ; Enable the timer and interrupts
0497 439B80     160            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
049A D2CA       161            setb TR2 ; Enable timer 2
049C D2AF       162            setb EA ; Enable global interrupts
049E            163   
049E            164            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
049E 43B302     165            orl     P1M1, #0b00000010
04A1 53B4FD     166            anl     P1M2, #0b11111101
04A4            167            
04A4            168       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
04A4 43B110     169       orl  P0M1, #0b00010000
04A7 53B2EF     170            anl     P0M2, #0b11101111
04AA            171            
04AA            172   
04AA            173            ; Initialize and start the ADC-LM335:
04AA            174            ;do these two when you are going to read from pin 14
04AA            175       ;anl ADCCON0, #0xF0
04AA            176            ;orl ADCCON0, #0x07 ; Select channel 7
04AA            177            
04AA            178       ; AINDIDS select if some pins are analog inputs or digital I/O:
04AA 75F600     179            mov AINDIDS, #0x00 ; Disable all analog inputs
04AD 43F690     180            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
04B0 43E101     181            orl ADCCON1, #0x01 ; Enable ADC
04B3            182   
04B3            183   
04B3 22         184   ret
04B4            185            
04B4            186   Timer0_Init:
04B4 438E08     187            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04B7 E589       188            mov a, TMOD
04B9 54F0       189            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04BB 4401       190            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04BD F589       191            mov TMOD, a
04BF 758CF0     192            mov TH0, #high(TIMER0_RELOAD)
04C2 758A2C     193            mov TL0, #low(TIMER0_RELOAD)
04C5            194            ; Enable the timer and interrupts
04C5 D2A9       195       setb ET0  ; Enable timer 0 interrupt
04C7 D28C       196       setb TR0  ; Start timer 0
04C9 22         197            ret
04CA            198   
04CA            199   ;---------------------------------;
04CA            200   ; ISR for timer 0.  Set to execute;
04CA            201   ; every 1/4096Hz to generate a    ;
04CA            202   ; 2048 Hz wave at pin SOUND_OUT   ;
04CA            203   ;---------------------------------;
04CA            204   Timer0_ISR:
04CA            205            ;clr TF0  ; According to the data sheet this is done for us already.
04CA            206            ; Timer 0 doesn't have 16-bit auto-reload, so
04CA C28C       207            clr TR0
04CC 758CF0     208            mov TH0, #high(TIMER0_RELOAD)
04CF 758A2C     209            mov TL0, #low(TIMER0_RELOAD)
04D2 D28C       210            setb TR0
04D4 B292       211            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04D6 32         212            reti
04D7            213   
04D7            214   Timer2_ISR:
04D7 C2CF       215            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04D9 C0D0       216            push psw
04DB C0E0       217            push acc
04DD            218   
04DD 053A       219            inc pwm_counter
04DF C3         220            clr c
04E0 E53B       221            mov a, pwm
04E2 953A       222            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04E4 B3         223            cpl c
04E5 9290       224            mov PWM_OUT, c
04E7            225   
04E7 E53A       226            mov a, pwm_counter
04E9 B46407     227            cjne a, #100, Timer2_ISR_done
04EC 753A00     228            mov pwm_counter, #0
04EF 0539       229            inc seconds ; It is super easy to keep a seconds count here
04F1 D206       230            setb s_flag
04F3            231   
04F3            232   Timer2_ISR_done:
04F3 D0E0       233            pop acc
04F5 D0D0       234            pop psw
04F7 32         235            reti
04F8            236   
04F8            237   LCD_PB:
04F8            238            ; Set variables to 1: 'no push button pressed'
04F8 D200       239            setb PB0
04FA D201       240            setb PB1
04FC D202       241            setb PB2
04FE D203       242            setb PB3
0500 D204       243            setb PB4
0502            244            ; The input pin used to check set to '1'
0502 D295       245            setb P1.5
0504            246            
0504            247            ; Check if any push button is pressed
0504 C280       248            clr P0.0
0506 C281       249            clr P0.1
0508 C282       250            clr P0.2
050A C283       251            clr P0.3
050C C293       252            clr P1.3
050E 209544     253            jb P1.5, LCD_PB_Done
0511            254   
0511            255            ; Debounce
0511 209541     256            jb P1.5, LCD_PB_Done
0514 C002       257            push AR2
0516 7A32       257            mov R2, #50
0518 1200F6     257            lcall ?Wait_Milli_Seconds
051B D002       257            pop AR2
051D 209535     258            jb P1.5, LCD_PB_Done
0520 2095FD     259            jb P1.5, $
0523            260   
0523            261            ; Set the LCD data pins to logic 1
0523 D280       262            setb P0.0
0525 D281       263            setb P0.1
0527 D282       264            setb P0.2
0529 D283       265            setb P0.3
052B D293       266            setb P1.3
052D            267            
052D            268            ; Check the push buttons one by one
052D C293       269            clr P1.3
052F A295       270            mov c, P1.5
0531 9204       271            mov PB4, c
0533 D293       272            setb P1.3
0535            273   
0535 C280       274            clr P0.0
0537 A295       275            mov c, P1.5
0539 9203       276            mov PB3, c
053B D280       277            setb P0.0
053D            278            
053D C281       279            clr P0.1
053F A295       280            mov c, P1.5
0541 9202       281            mov PB2, c
0543 D281       282            setb P0.1
0545            283            
0545 C282       284            clr P0.2
0547 A295       285            mov c, P1.5
0549 9201       286            mov PB1, c
054B D282       287            setb P0.2
054D            288            
054D C283       289            clr P0.3
054F A295       290            mov c, P1.5
0551 9200       291            mov PB0, c
0553 D283       292            setb P0.3
0555            293   
0555            294   LCD_PB_Done:             
0555 22         295            ret
0556            296   
0556            297   check_decrement: 
0556 200005     298            jb PB0, check_stime
0559 B205       299            cpl decrement1
055B 02055E     300            ljmp check_stime
055E            301   
055E            302   check_stime:
055E 20042B     303            jb PB4, check_stemp_intr
0561 200514     304            jb decrement1, Soak_time_decrement
0564 E531       305            mov a, Soak_time
0566 2401       306            add a, #0x01
0568 D4         307            da a
0569 F531       308            mov Soak_time, a
056B 9460       309            subb a, #0x60
056D 4020       310            jc display_up_stime ;if soak_time < 60
056F E531       311            mov a, Soak_time
0571 9490       312            subb a, #0x90
0573 4059       313            jc display_check_stime
0575 02060D     314            ljmp display_down_stime 
0578            315   
0578            316   Soak_time_decrement: 
0578 E531       317            mov a, Soak_time
057A 2499       318            add a, #0x99
057C D4         319            da a
057D F531       320            mov Soak_time, a
057F 9460       321            subb a, #0x60
0581 400C       322            jc display_up_stime ; skip if soak_time < 60
0583 E531       323            mov a, Soak_time
0585 9490       324            subb a, #0x90
0587 4045       325            jc display_check_stime
0589 02060D     326            ljmp display_down_stime
058C            327   
058C            328   check_stemp_intr:
058C 02064C     329            ljmp check_stemp
058F            330            
058F            331   display_up_stime:
058F 7440       332            mov a, #0x40
0591 120140     332            lcall ?WriteCommand
0594 7400       333            mov a, #00000B
0596 12013B     333            lcall ?WriteData
0599 7404       334            mov a, #00100B
059B 12013B     334            lcall ?WriteData
059E 740E       335            mov a, #01110B
05A0 12013B     335            lcall ?WriteData
05A3 741F       336            mov a, #11111B
05A5 12013B     336            lcall ?WriteData
05A8 7404       337            mov a, #00100B
05AA 12013B     337            lcall ?WriteData
05AD 7404       338            mov a, #00100B
05AF 12013B     338            lcall ?WriteData
05B2 7404       339            mov a, #00100B
05B4 12013B     339            lcall ?WriteData
05B7 7404       340            mov a, #00100B
05B9 12013B     340            lcall ?WriteData
05BC C0E0       341            push acc
05BE 7406       341            mov a, #6
05C0 14         341            dec a
05C1 120185     341            lcall ?Set_Cursor_1 ; Select column and row
05C4 D0E0       341            pop acc
05C6 7400       342            mov a, #0
05C8 12013B     342            lcall ?WriteData
05CB 02064C     343            ljmp check_stemp
05CE            344   
05CE            345   display_check_stime:
05CE 7450       346            mov a, #0x50
05D0 120140     346            lcall ?WriteCommand
05D3 7400       347            mov a, #00000B
05D5 12013B     347            lcall ?WriteData
05D8 7400       348            mov a, #00000B
05DA 12013B     348            lcall ?WriteData
05DD 7401       349            mov a, #00001B
05DF 12013B     349            lcall ?WriteData
05E2 7401       350            mov a, #00001B
05E4 12013B     350            lcall ?WriteData
05E7 7412       351            mov a, #10010B
05E9 12013B     351            lcall ?WriteData
05EC 740A       352            mov a, #01010B
05EE 12013B     352            lcall ?WriteData
05F1 7404       353            mov a, #00100B
05F3 12013B     353            lcall ?WriteData
05F6 7400       354            mov a, #00000B
05F8 12013B     354            lcall ?WriteData
05FB C0E0       355            push acc
05FD 7406       355            mov a, #6
05FF 14         355            dec a
0600 120185     355            lcall ?Set_Cursor_1 ; Select column and row
0603 D0E0       355            pop acc
0605 7402       356            mov a, #2
0607 12013B     356            lcall ?WriteData
060A 02064C     357            ljmp check_stemp
060D            358   
060D            359   display_down_stime:
060D 7448       360            mov a, #0x48
060F 120140     360            lcall ?WriteCommand
0612 7400       361            mov a, #00000B
0614 12013B     361            lcall ?WriteData
0617 7404       362            mov a, #00100B
0619 12013B     362            lcall ?WriteData
061C 7404       363            mov a, #00100B
061E 12013B     363            lcall ?WriteData
0621 7404       364            mov a, #00100B
0623 12013B     364            lcall ?WriteData
0626 7404       365            mov a, #00100B
0628 12013B     365            lcall ?WriteData
062B 741F       366            mov a, #11111B
062D 12013B     366            lcall ?WriteData
0630 740E       367            mov a, #01110B
0632 12013B     367            lcall ?WriteData
0635 7404       368            mov a, #00100B
0637 12013B     368            lcall ?WriteData
063A C0E0       369            push acc
063C 7406       369            mov a, #6
063E 14         369            dec a
063F 120185     369            lcall ?Set_Cursor_1 ; Select column and row
0642 D0E0       369            pop acc
0644 7401       370            mov a, #1
0646 12013B     370            lcall ?WriteData
0649 02064C     371            ljmp check_stemp
064C            372   
064C            373   check_stemp:
064C 20037E     374            jb PB3, check_rtime_intr
064F 200555     375            jb decrement1, Soak_temp_decrement
0652 E532       376            mov a, Soak_temp
0654 B49903     377            cjne a, #0x99, continue_stemp
0657 020679     378            ljmp add_hund_s
065A            379   
065A            380   continue_stemp:
065A 2401       381            add a, #0x01
065C D4         382            da a
065D F532       383            mov Soak_temp, a
065F 020662     384       ljmp cont_s
0662            385   
0662            386       cont_s:
0662 E533       387       mov a, soak_temp_hund
0664 B42022     388            cjne a, #0x20, check_stemp_range_hund
0667 E532       389       mov a, Soak_temp
0669 B4501D     390       cjne a, #0x50, check_stemp_range_hund
066C 7400       391            mov a, #0x00
066E F532       392            mov Soak_temp, a
0670 E533       393       mov a, soak_temp_hund
0672 7400       394       mov a, #0x00
0674 F533       395       mov soak_temp_hund, a
0676 020689     396            ljmp check_stemp_range_hund
0679            397   
0679            398   add_hund_s:
0679 E533       399       mov a, soak_temp_hund
067B 2410       400       add a, #0x10
067D D4         401       da A
067E F533       402       mov soak_temp_hund, A
0680 E532       403       mov a, Soak_temp
0682 7400       404            mov a, #0x00
0684 F532       405            mov soak_temp, a
0686 020662     406       ljmp cont_s
0689            407   
0689            408   check_stemp_range_hund:
0689 E533       409            mov a, Soak_temp_hund
068B 9409       410            subb a, #0x09
068D 4044       411            jc display_up_stemp
068F E533       412            mov a, soak_temp_hund
0691 9419       413            subb a, #0x19
0693 4003       414            jc check_stemp_range
0695 0206D0     415            ljmp display_down_stemp_intr
0698            416   
0698            417   check_stemp_range:
0698 E532       418            mov a, soak_temp
069A 9430       419            subb a, #0x30 
069C 4035       420            jc display_up_stemp
069E E532       421            mov a, soak_temp
06A0 9471       422            subb a, #0x71
06A2 406E       423            jc display_check_stemp
06A4 0206D0     424            ljmp display_down_stemp_intr
06A7            425   
06A7            426   Soak_temp_decrement: 
06A7 E532       427            mov a, Soak_temp
06A9 2499       428            add a, #0x99
06AB D4         429            da a
06AC F532       430            mov Soak_temp, a
06AE B400D8     431       cjne a, #0x00, check_stemp_range_hund
06B1 0206C5     432       ljmp decrement_s_hund   
06B4            433   
06B4            434       continue_dec_s:
06B4 753320     435       mov soak_temp_hund, #0x20
06B7 753250     436       mov soak_temp, #0x50
06BA 020689     437       ljmp check_stemp_range_hund
06BD            438   
06BD            439       cont_s_dec:
06BD 9410       440       SUBB a, #0x10
06BF D4         441       da A
06C0 F533       442       mov soak_temp_hund, a 
06C2 020689     443            ljmp check_stemp_range_hund
06C5            444   
06C5            445   decrement_s_hund:
06C5 E533       446       mov a, soak_temp_hund
06C7 B400F3     447       cjne a , #0x00, cont_s_dec
06CA 0206B4     448       ljmp continue_dec_s
06CD            449   
06CD            450   check_rtime_intr:
06CD 020790     451            ljmp check_rtime
06D0            452   
06D0            453   display_down_stemp_intr:
06D0 020751     454            ljmp display_down_stemp
06D3            455   
06D3            456   display_up_stemp:
06D3 7440       457            mov a, #0x40
06D5 120140     457            lcall ?WriteCommand
06D8 7400       458            mov a, #00000B
06DA 12013B     458            lcall ?WriteData
06DD 7404       459            mov a, #00100B
06DF 12013B     459            lcall ?WriteData
06E2 740E       460            mov a, #01110B
06E4 12013B     460            lcall ?WriteData
06E7 741F       461            mov a, #11111B
06E9 12013B     461            lcall ?WriteData
06EC 7404       462            mov a, #00100B
06EE 12013B     462            lcall ?WriteData
06F1 7404       463            mov a, #00100B
06F3 12013B     463            lcall ?WriteData
06F6 7404       464            mov a, #00100B
06F8 12013B     464            lcall ?WriteData
06FB 7404       465            mov a, #00100B
06FD 12013B     465            lcall ?WriteData
0700 C0E0       466            push acc
0702 740A       466            mov a, #10
0704 14         466            dec a
0705 120185     466            lcall ?Set_Cursor_1 ; Select column and row
0708 D0E0       466            pop acc
070A 7400       467            mov a, #0
070C 12013B     467            lcall ?WriteData
070F            467   
070F 020790     468            ljmp check_rtime
0712            469   
0712            470   display_check_stemp:
0712 7450       471            mov a, #0x50
0714 120140     471            lcall ?WriteCommand
0717 7400       472            mov a, #00000B
0719 12013B     472            lcall ?WriteData
071C 7400       473            mov a, #00000B
071E 12013B     473            lcall ?WriteData
0721 7401       474            mov a, #00001B
0723 12013B     474            lcall ?WriteData
0726 7401       475            mov a, #00001B
0728 12013B     475            lcall ?WriteData
072B 7412       476            mov a, #10010B
072D 12013B     476            lcall ?WriteData
0730 740A       477            mov a, #01010B
0732 12013B     477            lcall ?WriteData
0735 7404       478            mov a, #00100B
0737 12013B     478            lcall ?WriteData
073A 7400       479            mov a, #00000B
073C 12013B     479            lcall ?WriteData
073F C0E0       480            push acc
0741 740A       480            mov a, #10
0743 14         480            dec a
0744 120185     480            lcall ?Set_Cursor_1 ; Select column and row
0747 D0E0       480            pop acc
0749 7402       481            mov a, #2
074B 12013B     481            lcall ?WriteData
074E            481   
074E 020790     482            ljmp check_rtime
0751            483   
0751            484   display_down_stemp:
0751 7448       485            mov a, #0x48
0753 120140     485            lcall ?WriteCommand
0756 7400       486            mov a, #00000B
0758 12013B     486            lcall ?WriteData
075B 7404       487            mov a, #00100B
075D 12013B     487            lcall ?WriteData
0760 7404       488            mov a, #00100B
0762 12013B     488            lcall ?WriteData
0765 7404       489            mov a, #00100B
0767 12013B     489            lcall ?WriteData
076A 7404       490            mov a, #00100B
076C 12013B     490            lcall ?WriteData
076F 741F       491            mov a, #11111B
0771 12013B     491            lcall ?WriteData
0774 740E       492            mov a, #01110B
0776 12013B     492            lcall ?WriteData
0779 7404       493            mov a, #00100B
077B 12013B     493            lcall ?WriteData
077E C0E0       494            push acc
0780 740A       494            mov a, #10
0782 14         494            dec a
0783 120185     494            lcall ?Set_Cursor_1 ; Select column and row
0786 D0E0       494            pop acc
0788 7401       495            mov a, #1
078A 12013B     495            lcall ?WriteData
078D            495   
078D 020790     496            ljmp check_rtime
0790            497   
0790            498   check_rtime:
0790 20026A     499            jb PB2, check_rtemp_intr
0793 200514     500            jb decrement1, Reflow_time_decrement
0796 E534       501            mov a, Reflow_time
0798 2401       502            add a, #0x01
079A D4         503            da a
079B F534       504            mov Reflow_time, a
079D 9430       505            subb a, #0x30
079F 401D       506            jc display_up_rtime ; skip if soak_time < 60
07A1 E534       507            mov a, Reflow_time
07A3 9490       508            subb a, #0x90
07A5 4059       509            jc display_check_rtime
07A7 02083F     510            ljmp display_down_rtime 
07AA            511   
07AA            512   Reflow_time_decrement: 
07AA E534       513            mov a, Reflow_time
07AC 2499       514            add a, #0x99
07AE D4         515            da a
07AF F534       516            mov Reflow_time, a
07B1 9430       517            subb a, #0x30
07B3 4009       518            jc display_up_rtime ; skip if soak_time < 60
07B5 E534       519            mov a, Reflow_time
07B7 9490       520            subb a, #0x90
07B9 4045       521            jc display_check_rtime
07BB 02083F     522            ljmp display_down_rtime 
07BE            523   
07BE            524   display_up_rtime:
07BE 7440       525            mov a, #0x40
07C0 120140     525            lcall ?WriteCommand
07C3 7400       526            mov a, #00000B
07C5 12013B     526            lcall ?WriteData
07C8 7404       527            mov a, #00100B
07CA 12013B     527            lcall ?WriteData
07CD 740E       528            mov a, #01110B
07CF 12013B     528            lcall ?WriteData
07D2 741F       529            mov a, #11111B
07D4 12013B     529            lcall ?WriteData
07D7 7404       530            mov a, #00100B
07D9 12013B     530            lcall ?WriteData
07DC 7404       531            mov a, #00100B
07DE 12013B     531            lcall ?WriteData
07E1 7404       532            mov a, #00100B
07E3 12013B     532            lcall ?WriteData
07E6 7404       533            mov a, #00100B
07E8 12013B     533            lcall ?WriteData
07EB C0E0       534            push acc
07ED 7408       534            mov a, #8
07EF 14         534            dec a
07F0 120183     534            lcall ?Set_Cursor_2 ; Select column and row
07F3 D0E0       534            pop acc
07F5 7400       535            mov a, #0
07F7 12013B     535            lcall ?WriteData
07FA 02087E     536            ljmp check_rtemp
07FD            537   
07FD            538   check_rtemp_intr:
07FD 02087E     539            ljmp check_rtemp
0800            540   
0800            541   display_check_rtime:
0800 7450       542            mov a, #0x50
0802 120140     542            lcall ?WriteCommand
0805 7400       543            mov a, #00000B
0807 12013B     543            lcall ?WriteData
080A 7400       544            mov a, #00000B
080C 12013B     544            lcall ?WriteData
080F 7401       545            mov a, #00001B
0811 12013B     545            lcall ?WriteData
0814 7401       546            mov a, #00001B
0816 12013B     546            lcall ?WriteData
0819 7412       547            mov a, #10010B
081B 12013B     547            lcall ?WriteData
081E 740A       548            mov a, #01010B
0820 12013B     548            lcall ?WriteData
0823 7404       549            mov a, #00100B
0825 12013B     549            lcall ?WriteData
0828 7400       550            mov a, #00000B
082A 12013B     550            lcall ?WriteData
082D C0E0       551            push acc
082F 7408       551            mov a, #8
0831 14         551            dec a
0832 120183     551            lcall ?Set_Cursor_2 ; Select column and row
0835 D0E0       551            pop acc
0837 7402       552            mov a, #2
0839 12013B     552            lcall ?WriteData
083C 02087E     553            ljmp check_rtemp
083F            554   
083F            555   display_down_rtime:
083F 7448       556            mov a, #0x48
0841 120140     556            lcall ?WriteCommand
0844 7400       557            mov a, #00000B
0846 12013B     557            lcall ?WriteData
0849 7404       558            mov a, #00100B
084B 12013B     558            lcall ?WriteData
084E 7404       559            mov a, #00100B
0850 12013B     559            lcall ?WriteData
0853 7404       560            mov a, #00100B
0855 12013B     560            lcall ?WriteData
0858 7404       561            mov a, #00100B
085A 12013B     561            lcall ?WriteData
085D 741F       562            mov a, #11111B
085F 12013B     562            lcall ?WriteData
0862 740E       563            mov a, #01110B
0864 12013B     563            lcall ?WriteData
0867 7404       564            mov a, #00100B
0869 12013B     564            lcall ?WriteData
086C C0E0       565            push acc
086E 7408       565            mov a, #8
0870 14         565            dec a
0871 120183     565            lcall ?Set_Cursor_2 ; Select column and row
0874 D0E0       565            pop acc
0876 7401       566            mov a, #1
0878 12013B     566            lcall ?WriteData
087B 02087E     567            ljmp check_rtemp
087E            568   
087E            569   check_rtemp:
087E 200178     570            jb PB1, skipp_intr
0881 20054C     571            jb decrement1, Reflow_temp_decrement
0884 E535       572            mov a, Reflow_temp
0886 B49903     573            cjne a, #0x99, continue_rtemp
0889 0208C0     574            ljmp add_hundreds_r
088C            575   
088C            576   continue_rtemp:
088C 2401       577            add a, #0x01
088E D4         578       da a
088F F535       579       mov Reflow_temp, a
0891 020894     580       ljmp cont_r
0894            581   
0894            582       cont_r:
0894            583       ;check hundreds
0894 E53C       584       mov a, reflow_temp_100
0896 B4200F     585       cjne a, #0x20, check_rtemp_range_hund ;make sure to check with 20 since the hundreds place value is multiplied by 10
0899 E535       586            mov a, reflow_temp
089B B4500A     587       cjne a, #0x50, check_rtemp_range_hund
089E 7400       588       mov a, #0x00
08A0 F535       589       mov reflow_temp, a
08A2 E53C       590       mov a, reflow_temp_100
08A4 7400       591       mov a, #0x00
08A6 F53C       592            mov Reflow_temp_100, a
08A8            593   
08A8            594            check_rtemp_range_hund:
08A8 E53C       595            mov a, reflow_temp_100
08AA 9419       596            subb a, #0x19
08AC 404E       597            jc display_up_rtemp
08AE 0208B1     598            ljmp check_rtemp_range
08B1            599   
08B1            600            check_rtemp_range:
08B1 E535       601            mov a, reflow_temp
08B3 9420       602            subb a, #0x20
08B5 4045       603            jc display_up_rtemp
08B7 E535       604            mov a, reflow_temp
08B9 9441       605            subb a, #0x41
08BB 407E       606            jc display_check_rtemp
08BD 02097A     607            ljmp display_down_rtemp
08C0            608   
08C0            609   add_hundreds_r:
08C0 E53C       610       mov a, reflow_temp_100
08C2 2410       611       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
08C4 D4         612       da A
08C5 F53C       613       mov reflow_temp_100, A
08C7 E535       614       mov a, Reflow_temp
08C9 7400       615            mov a, #0x00
08CB F535       616            mov reflow_temp, a
08CD 020894     617       ljmp cont_r
08D0            618   
08D0            619   
08D0            620   Reflow_temp_decrement: 
08D0 E535       621            mov a, Reflow_temp
08D2 2499       622            add a, #0x99
08D4 D4         623            da a
08D5 F535       624            mov Reflow_temp, a
08D7 B400CE     625       cjne a, #0x00, check_rtemp_range_hund
08DA 0208EE     626       ljmp decrement_r_hund
08DD            627   
08DD            628       continue_dec_r:
08DD            629            ;mov a, reflow_temp
08DD            630       ;cjne a, #0x00, skipp
08DD 753550     631       mov reflow_temp, #0x50
08E0 753C20     632       mov reflow_temp_100, #0x20
08E3 0208A8     633       ljmp check_rtemp_range_hund
08E6            634   
08E6            635       cont_dec:
08E6 9410       636       SUBB a, #0x10
08E8 D4         637       da a
08E9 F53C       638       mov reflow_temp_100, a
08EB 0208A8     639            ljmp check_rtemp_range_hund
08EE            640   
08EE            641       decrement_r_hund:
08EE E53C       642       mov a, reflow_temp_100
08F0 B400F3     643       cjne a, #0x00, cont_dec
08F3 0208DD     644       ljmp continue_dec_r
08F6            645   
08F6            646   display_down_rtemp_intr:
08F6 02097A     647            ljmp display_down_rtemp
08F9            648   
08F9            649   skipp_intr:
08F9 0209B9     650            ljmp skipp
08FC            651   
08FC            652   display_up_rtemp:
08FC 7440       653            mov a, #0x40
08FE 120140     653            lcall ?WriteCommand
0901 7400       654            mov a, #00000B
0903 12013B     654            lcall ?WriteData
0906 7404       655            mov a, #00100B
0908 12013B     655            lcall ?WriteData
090B 740E       656            mov a, #01110B
090D 12013B     656            lcall ?WriteData
0910 741F       657            mov a, #11111B
0912 12013B     657            lcall ?WriteData
0915 7404       658            mov a, #00100B
0917 12013B     658            lcall ?WriteData
091A 7404       659            mov a, #00100B
091C 12013B     659            lcall ?WriteData
091F 7404       660            mov a, #00100B
0921 12013B     660            lcall ?WriteData
0924 7404       661            mov a, #00100B
0926 12013B     661            lcall ?WriteData
0929 C0E0       662            push acc
092B 740C       662            mov a, #12
092D 14         662            dec a
092E 120183     662            lcall ?Set_Cursor_2 ; Select column and row
0931 D0E0       662            pop acc
0933 7400       663            mov a, #0
0935 12013B     663            lcall ?WriteData
0938            663   
0938 0209B9     664            ljmp skipp
093B            665   
093B            666   display_check_rtemp:
093B 7450       667            mov a, #0x50
093D 120140     667            lcall ?WriteCommand
0940 7400       668            mov a, #00000B
0942 12013B     668            lcall ?WriteData
0945 7400       669            mov a, #00000B
0947 12013B     669            lcall ?WriteData
094A 7401       670            mov a, #00001B
094C 12013B     670            lcall ?WriteData
094F 7401       671            mov a, #00001B
0951 12013B     671            lcall ?WriteData
0954 7412       672            mov a, #10010B
0956 12013B     672            lcall ?WriteData
0959 740A       673            mov a, #01010B
095B 12013B     673            lcall ?WriteData
095E 7404       674            mov a, #00100B
0960 12013B     674            lcall ?WriteData
0963 7400       675            mov a, #00000B
0965 12013B     675            lcall ?WriteData
0968 C0E0       676            push acc
096A 740C       676            mov a, #12
096C 14         676            dec a
096D 120183     676            lcall ?Set_Cursor_2 ; Select column and row
0970 D0E0       676            pop acc
0972 7402       677            mov a, #2
0974 12013B     677            lcall ?WriteData
0977            677   
0977 0209B9     678            ljmp skipp
097A            679   
097A            680   display_down_rtemp:
097A 7448       681            mov a, #0x48
097C 120140     681            lcall ?WriteCommand
097F 7400       682            mov a, #00000B
0981 12013B     682            lcall ?WriteData
0984 7404       683            mov a, #00100B
0986 12013B     683            lcall ?WriteData
0989 7404       684            mov a, #00100B
098B 12013B     684            lcall ?WriteData
098E 7404       685            mov a, #00100B
0990 12013B     685            lcall ?WriteData
0993 7404       686            mov a, #00100B
0995 12013B     686            lcall ?WriteData
0998 741F       687            mov a, #11111B
099A 12013B     687            lcall ?WriteData
099D 740E       688            mov a, #01110B
099F 12013B     688            lcall ?WriteData
09A2 7404       689            mov a, #00100B
09A4 12013B     689            lcall ?WriteData
09A7 C0E0       690            push acc
09A9 740C       690            mov a, #12
09AB 14         690            dec a
09AC 120183     690            lcall ?Set_Cursor_2 ; Select column and row
09AF D0E0       690            pop acc
09B1 7401       691            mov a, #1
09B3 12013B     691            lcall ?WriteData
09B6            691   
09B6 0209B9     692            ljmp skipp
09B9            693   
09B9            694   skipp:
09B9 22         695            ret
09BA            696   
09BA            697   Check_start:
09BA 20976C     698            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09BD C002       699            push AR2
09BF 7A32       699            mov R2, #50
09C1 1200F6     699            lcall ?Wait_Milli_Seconds
09C4 D002       699            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09C6 209760     700            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09C9 3097FD     701            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
09CC 753001     702            mov STATE, #0x01
09CF 22         703            ret
09D0            704   
09D0            705   check_convert: 
09D0 209656     706            jb CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09D3 C002       707            push AR2
09D5 7A32       707            mov R2, #50
09D7 1200F6     707            lcall ?Wait_Milli_Seconds
09DA D002       707            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09DC 20964A     708            jb  CONVERT, smjmp  ; if the 'Start' button is not pressed skip
09DF B209       709            cpl fahrenheit_flag 
09E1 22         710            ret 
09E2            711   
09E2            712   Check_mute:
09E2 20B044     713            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09E5 C002       714            push AR2
09E7 7A32       714            mov R2, #50
09E9 1200F6     714            lcall ?Wait_Milli_Seconds
09EC D002       714            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
09EE 20B038     715            jb MUTE_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
09F1 200A0F     716            jb mute_flag, muteset
09F4 D20A       717            setb mute_flag
09F6 C0E0       718            push acc
09F8 744D       718            mov a, #'M'
09FA 12013B     718            lcall ?WriteData
09FD D0E0       718            pop acc
09FF 30B0FD     719            jnb MUTE_BUTTON, $
0A02 22         720            ret
0A03            721   muteset:
0A03 C20A       722            clr mute_flag
0A05 C0E0       723            push acc
0A07 7420       723            mov a, #' '
0A09 12013B     723            lcall ?WriteData
0A0C D0E0       723            pop acc
0A0E 30B0FD     724            jnb MUTE_BUTTON, $
0A11 22         725            ret
0A12            726   
0A12            727   display_mute:
0A12 200A0A     728            jb mute_flag, muted
0A15 C0E0       729            push acc
0A17 7420       729            mov a, #' '
0A19 12013B     729            lcall ?WriteData
0A1C D0E0       729            pop acc
0A1E 22         730            ret
0A1F            731   muted:
0A1F C0E0       732            push acc
0A21 744D       732            mov a, #'M'
0A23 12013B     732            lcall ?WriteData
0A26 D0E0       732            pop acc
0A28 22         733            ret
0A29            734   
0A29            735   smjmp:
0A29 0209B9     736   ljmp skipp
0A2C            737   
0A2C            738   wait_for_ti:
0A2C 3099FD     739       jnb TI, wait_for_ti
0A2F C299       740       clr TI
0A31 22         741       ret
0A32            742   
0A32            743   display_menu:
0A32 C0E0       744            push acc
0A34 7407       744            mov a, #7
0A36 14         744            dec a
0A37 120185     744            lcall ?Set_Cursor_1 ; Select column and row
0A3A D0E0       744            pop acc 
0A3C C000       745            push ar0
0A3E A831       745            mov r0, Soak_time
0A40 12018A     745            lcall ?Display_BCD
0A43 D000       745            pop ar0
0A45 C0E0       746            push acc
0A47 740B       746            mov a, #11
0A49 14         746            dec a
0A4A 120185     746            lcall ?Set_Cursor_1 ; Select column and row
0A4D D0E0       746            pop acc
0A4F C000       747            push ar0
0A51 A833       747            mov r0, Soak_temp_hund
0A53 12018A     747            lcall ?Display_BCD
0A56 D000       747            pop ar0
0A58 C0E0       748            push acc
0A5A 740C       748            mov a, #12
0A5C 14         748            dec a
0A5D 120185     748            lcall ?Set_Cursor_1 ; Select column and row
0A60 D0E0       748            pop acc
0A62 C000       749            push ar0
0A64 A832       749            mov r0, soak_temp
0A66 12018A     749            lcall ?Display_BCD
0A69 D000       749            pop ar0
0A6B C0E0       750            push acc
0A6D 7409       750            mov a, #9
0A6F 14         750            dec a
0A70 120183     750            lcall ?Set_Cursor_2 ; Select column and row
0A73 D0E0       750            pop acc
0A75 C000       751            push ar0
0A77 A834       751            mov r0, Reflow_time
0A79 12018A     751            lcall ?Display_BCD
0A7C D000       751            pop ar0
0A7E C0E0       752            push acc
0A80 740D       752            mov a, #13
0A82 14         752            dec a
0A83 120183     752            lcall ?Set_Cursor_2 ; Select column and row
0A86 D0E0       752            pop acc
0A88 C000       753            push ar0
0A8A A83C       753            mov r0, reflow_temp_100
0A8C 12018A     753            lcall ?Display_BCD
0A8F D000       753            pop ar0
0A91 C0E0       754            push acc
0A93 740E       754            mov a, #14
0A95 14         754            dec a
0A96 120183     754            lcall ?Set_Cursor_2 ; Select column and row
0A99 D0E0       754            pop acc
0A9B C000       755            push ar0
0A9D A835       755            mov r0, reflow_temp
0A9F 12018A     755            lcall ?Display_BCD
0AA2 D000       755            pop ar0
0AA4 22         756       ret
0AA5            757   
0AA5            758   display_heating_s:
0AA5            759            ;Set_Cursor(1,4)
0AA5            760            ;Display_BCD(Soak_temp_hund)
0AA5            761            ;set_cursor(1,5)
0AA5            762            ;display_bcd(soak_temp)
0AA5 C0E0       763            push acc
0AA7 740C       763            mov a, #12
0AA9 14         763            dec a
0AAA 120185     763            lcall ?Set_Cursor_1 ; Select column and row
0AAD D0E0       763            pop acc
0AAF C000       764            push ar0
0AB1 A838       764            mov r0, outside_temp
0AB3 12018A     764            lcall ?Display_BCD
0AB6 D000       764            pop ar0
0AB8 C0E0       765            push acc
0ABA 7407       765            mov a, #7
0ABC 14         765            dec a
0ABD 120183     765            lcall ?Set_Cursor_2 ; Select column and row
0AC0 D0E0       765            pop acc
0AC2 C000       766            push ar0
0AC4 A836       766            mov r0, current_temp
0AC6 12018A     766            lcall ?Display_BCD
0AC9 D000       766            pop ar0
0ACB 22         767            ret
0ACC            768   
0ACC            769   display_heating_r:
0ACC            770            ;Set_Cursor(1,4)
0ACC            771            ;Display_BCD(reflow_temp_100)
0ACC            772            ;set_cursor(1,5)
0ACC            773            ;display_bcd(reflow_temp)
0ACC C0E0       774            push acc
0ACE 740C       774            mov a, #12
0AD0 14         774            dec a
0AD1 120185     774            lcall ?Set_Cursor_1 ; Select column and row
0AD4 D0E0       774            pop acc
0AD6 C000       775            push ar0
0AD8 A838       775            mov r0, outside_temp
0ADA 12018A     775            lcall ?Display_BCD
0ADD D000       775            pop ar0
0ADF C0E0       776            push acc
0AE1 7407       776            mov a, #7
0AE3 14         776            dec a
0AE4 120183     776            lcall ?Set_Cursor_2 ; Select column and row
0AE7 D0E0       776            pop acc
0AE9 C000       777            push ar0
0AEB A836       777            mov r0, current_temp
0AED 12018A     777            lcall ?Display_BCD
0AF0 D000       777            pop ar0
0AF2 22         778            ret
0AF3            779   
0AF3            780   display_blank:
0AF3 C0E0       781            push acc
0AF5 7401       781            mov a, #1
0AF7 14         781            dec a
0AF8 120185     781            lcall ?Set_Cursor_1 ; Select column and row
0AFB D0E0       781            pop acc
0AFD C083       782            push dph
0AFF C082       782            push dpl
0B01 C0E0       782            push acc
0B03 900064     782            mov dptr, #blank
0B06 120178     782            lcall ?Send_Constant_String
0B09 D0E0       782            pop acc
0B0B D082       782            pop dpl
0B0D D083       782            pop dph
0B0F C0E0       783            push acc
0B11 7401       783            mov a, #1
0B13 14         783            dec a
0B14 120183     783            lcall ?Set_Cursor_2 ; Select column and row
0B17 D0E0       783            pop acc
0B19 C083       784            push dph
0B1B C082       784            push dpl
0B1D C0E0       784            push acc
0B1F 900064     784            mov dptr, #blank
0B22 120178     784            lcall ?Send_Constant_String
0B25 D0E0       784            pop acc
0B27 D082       784            pop dpl
0B29 D083       784            pop dph
0B2B 22         785            ret
0B2C            786   
0B2C            787   Display_formated_BCD:
0B2C C0E0       788            push acc
0B2E 740C       788            mov a, #12
0B30 14         788            dec a
0B31 120185     788            lcall ?Set_Cursor_1 ; Select column and row
0B34 D0E0       788            pop acc
0B36 C000       789            push ar0
0B38 A84B       789            mov r0, bcd+2
0B3A 12018A     789            lcall ?Display_BCD
0B3D D000       789            pop ar0
0B3F C0E0       790            push acc
0B41 742E       790            mov a, #'.'
0B43 12013B     790            lcall ?WriteData
0B46 D0E0       790            pop acc
0B48 C000       791            push ar0
0B4A A84A       791            mov r0, bcd+1
0B4C 12018A     791            lcall ?Display_BCD
0B4F D000       791            pop ar0
0B51 22         792            ret
0B52            793   
0B52            794   conv_to_bcd_high:
0B52 C4         795       swap a
0B53 540F       796       anl a, #0x0f
0B55 F9         797       mov R1, a
0B56 22         798            ret
0B57            799   
0B57            800   conv_to_bcd_low:
0B57 540F       801       anl a, #0x0f
0B59 F8         802       mov R0, A
0B5A 22         803            ret
0B5B            804   
0B5B            805   conv_to_bcd:
0B5B 883D       806            mov x+0, R0
0B5D 893E       807            mov x+1, R1
0B5F 753F00     808            mov x+2, #0
0B62 754000     809            mov x+3, #0
0B65 1201DE     810       lcall hex2bcd
0B68 22         811            ret
0B69            812   String: 
0B69 0D0A00     813            DB '\r', '\n', 0
0B6C            814   
0B6C            815   Outside_tmp:
0B6C 53E8F0     816       anl ADCCON0, #0xF0
0B6F 43E807     817       orl ADCCON0, #0x07 ; Select channel 7 
0B72            818   
0B72 C2EF       819       clr ADCF
0B74 D2EE       820       setb ADCS
0B76 30EFFD     821       jnb ADCF, $
0B79            822   
0B79 E5C3       823       mov a, ADCRH
0B7B C4         824       swap a
0B7C C0E0       825       push acc
0B7E 540F       826       anl a, #0x0f
0B80 F9         827       mov R1, a
0B81 D0E0       828       pop acc
0B83 54F0       829       anl a, #0xf0
0B85 45C2       830       orl a, ADCRL
0B87 F8         831       mov R0, A
0B88            832       
0B88            833       ; Convert to voltage
0B88 883D       834            mov x+0, R0
0B8A 893E       835            mov x+1, R1
0B8C 753F00     836            mov x+2, #0
0B8F 754000     837            mov x+3, #0
0B92 75417C     838            mov y+0, #low (50300 % 0x10000) 
0B95 7542C4     838            mov y+1, #high(50300 % 0x10000) 
0B98 754300     838            mov y+2, #low (50300 / 0x10000) 
0B9B 754400     838            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0B9E 120358     839            lcall mul32
0BA1 7541FF     840            mov y+0, #low (4095 % 0x10000) 
0BA4 75420F     840            mov y+1, #high(4095 % 0x10000) 
0BA7 754300     840            mov y+2, #low (4095 / 0x10000) 
0BAA 754400     840            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0BAD 1203E5     841            lcall div32
0BB0 7541A4     842            mov y+0, #low (27300 % 0x10000) 
0BB3 75426A     842            mov y+1, #high(27300 % 0x10000) 
0BB6 754300     842            mov y+2, #low (27300 / 0x10000) 
0BB9 754400     842            mov y+3, #high(27300 / 0x10000) 
0BBC 1202C4     843            lcall sub32
0BBF 754164     844            mov y+0, #low (100 % 0x10000) 
0BC2 754200     844            mov y+1, #high(100 % 0x10000) 
0BC5 754300     844            mov y+2, #low (100 / 0x10000) 
0BC8 754400     844            mov y+3, #high(100 / 0x10000) 
0BCB 120358     845            lcall mul32
0BCE            846       ;save outside temp to z to later add onto the oven temp
0BCE 853D45     847       mov z+0, x+0
0BD1 853E46     848       mov z+1, x+1
0BD4 853F47     849       mov z+2, x+2
0BD7 854048     850       mov z+3, x+3 
0BDA            851   
0BDA 1201DE     852       lcall hex2bcd
0BDD E530       853       mov a, STATE
0BDF B40501     854       cjne a, #5, display
0BE2 22         855       ret
0BE3            856   
0BE3            857   display:
0BE3 120B2C     858       lcall Display_formated_BCD
0BE6 22         859       ret
0BE7            860   
0BE7            861   oven_tmp:
0BE7 53E8F0     862       anl  ADCCON0, #0xF0  
0BEA 43E804     863       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0BED            864   
0BED C2EF       865       clr ADCF
0BEF D2EE       866       setb ADCS
0BF1 30EFFD     867       jnb ADCF, $
0BF4            868   
0BF4 E5C3       869       mov a, ADCRH
0BF6 C4         870       swap a
0BF7 C0E0       871       push acc
0BF9 540F       872       anl a, #0x0f
0BFB F9         873       mov R1, a
0BFC D0E0       874       pop acc
0BFE 54F0       875       anl a, #0xf0
0C00 45C2       876       orl a, ADCRL
0C02 F8         877       mov R0, A
0C03            878       
0C03            879       ; Convert to voltage
0C03 883D       880            mov x+0, R0
0C05 893E       881            mov x+1, R1
0C07 753F00     882            mov x+2, #0
0C0A 754000     883            mov x+3, #0
0C0D 75417C     884            mov y+0, #low (50300 % 0x10000) 
0C10 7542C4     884            mov y+1, #high(50300 % 0x10000) 
0C13 754300     884            mov y+2, #low (50300 / 0x10000) 
0C16 754400     884            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0C19 120358     885            lcall mul32
0C1C 7541FF     886            mov y+0, #low (4095 % 0x10000) 
0C1F 75420F     886            mov y+1, #high(4095 % 0x10000) 
0C22 754300     886            mov y+2, #low (4095 / 0x10000) 
0C25 754400     886            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0C28 1203E5     887            lcall div32
0C2B            888   
0C2B            889            ;vout of opamp should now be in x
0C2B            890       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0C2B            891       ;first calculate vout*R2:
0C2B 7541BD     892            mov y+0, #low (1469 % 0x10000) 
0C2E 754205     892            mov y+1, #high(1469 % 0x10000) 
0C31 754300     892            mov y+2, #low (1469 / 0x10000) 
0C34 754400     892            mov y+3, #high(1469 / 0x10000) 
0C37 120358     893       lcall mul32
0C3A            894       ;now vout*R2 ohm is in x
0C3A            895       ;next we will take 461 650V and divide
0C3A 754152     896            mov y+0, #low (461650 % 0x10000) 
0C3D 75420B     896            mov y+1, #high(461650 % 0x10000) 
0C40 754307     896            mov y+2, #low (461650 / 0x10000) 
0C43 754400     896            mov y+3, #high(461650 / 0x10000)  
0C46 1203E5     897       lcall div32
0C49            898       ;multiply by 100k and then divide by 41 to cancel units
0C49 754140     899            mov y+0, #low (1000000 % 0x10000) 
0C4C 754242     899            mov y+1, #high(1000000 % 0x10000) 
0C4F 75430F     899            mov y+2, #low (1000000 / 0x10000) 
0C52 754400     899            mov y+3, #high(1000000 / 0x10000) 
0C55 120358     900       lcall mul32
0C58 754129     901            mov y+0, #low (41 % 0x10000) 
0C5B 754200     901            mov y+1, #high(41 % 0x10000) 
0C5E 754300     901            mov y+2, #low (41 / 0x10000) 
0C61 754400     901            mov y+3, #high(41 / 0x10000) 
0C64 1203E5     902       lcall div32
0C67            903       ;move the outside temp to y and add
0C67 854541     904       mov y+0, z+0
0C6A 854642     905       mov y+1, z+1
0C6D 854743     906       mov y+2, z+2
0C70 854844     907       mov y+3, z+3
0C73 1202A3     908       lcall add32
0C76 1201DE     909       lcall hex2bcd
0C79            910   
0C79 854B36     911            mov current_temp, bcd+2
0C7C 854C37     912       mov current_temp_hund, bcd+3
0C7F            913   
0C7F C000       914   push ar0
0C81 A84C       914   mov r0, bcd+3
0C83 1201C0     914   lcall ?Send_BCD
0C86 D000       914   pop ar0
0C88 C000       915   push ar0
0C8A A84B       915   mov r0, bcd+2
0C8C 1201C0     915   lcall ?Send_BCD
0C8F D000       915   pop ar0
0C91            916       put_decimal:
0C91 3099FD     917       jnb TI, put_decimal ; Wait for transmission to complete
0C94 C299       918       clr TI
0C96 75992E     919       mov SBUF, #'.'
0C99 C000       920   push ar0
0C9B A84A       920   mov r0, bcd+1
0C9D 1201C0     920   lcall ?Send_BCD
0CA0 D000       920   pop ar0
0CA2 C000       921   push ar0
0CA4 A849       921   mov r0, bcd+0
0CA6 1201C0     921   lcall ?Send_BCD
0CA9 D000       921   pop ar0
0CAB            922       put_r:
0CAB 3099FD     923       jnb TI, put_r ; Wait for transmission to complete
0CAE C299       924       clr TI
0CB0 75990D     925       mov SBUF, #'\r'
0CB3            926       put_n:
0CB3 3099FD     927       jnb TI, put_n ; Wait for transmission to complete
0CB6 C299       928       clr TI
0CB8 75990A     929       mov SBUF, #'\n'
0CBB            930   
0CBB 300936     931       jnb fahrenheit_flag, display_oven_tmp
0CBE 120267     932            lcall bcd2hex
0CC1 754109     933            mov y+0, #low (9 % 0x10000) 
0CC4 754200     933            mov y+1, #high(9 % 0x10000) 
0CC7 754300     933            mov y+2, #low (9 / 0x10000) 
0CCA 754400     933            mov y+3, #high(9 / 0x10000) 
0CCD 120358     934            lcall mul32
0CD0 754105     935            mov y+0, #low (5 % 0x10000) 
0CD3 754200     935            mov y+1, #high(5 % 0x10000) 
0CD6 754300     935            mov y+2, #low (5 / 0x10000) 
0CD9 754400     935            mov y+3, #high(5 / 0x10000) 
0CDC 1203E5     936            lcall div32 
0CDF 754100     937            mov y+0, #low (320000 % 0x10000) 
0CE2 7542E2     937            mov y+1, #high(320000 % 0x10000) 
0CE5 754304     937            mov y+2, #low (320000 / 0x10000) 
0CE8 754400     937            mov y+3, #high(320000 / 0x10000) 
0CEB 1202A3     938            lcall add32 
0CEE 1201DE     939            lcall hex2bcd 
0CF1 020CF4     940            ljmp display_oven_tmp
0CF4            941   
0CF4            942   display_oven_tmp:
0CF4 C0E0       943            push acc
0CF6 7406       943            mov a, #6
0CF8 14         943            dec a
0CF9 120183     943            lcall ?Set_Cursor_2 ; Select column and row
0CFC D0E0       943            pop acc
0CFE C000       944            push ar0
0D00 A84C       944            mov r0, bcd+3
0D02 12018A     944            lcall ?Display_BCD
0D05 D000       944            pop ar0
0D07 C000       945            push ar0
0D09 A84B       945            mov r0, bcd+2
0D0B 12018A     945            lcall ?Display_BCD
0D0E D000       945            pop ar0
0D10 C0E0       946            push acc
0D12 742E       946            mov a, #'.'
0D14 12013B     946            lcall ?WriteData
0D17 D0E0       946            pop acc
0D19 C000       947            push ar0
0D1B A84A       947            mov r0, bcd+1
0D1D 12018A     947            lcall ?Display_BCD
0D20 D000       947            pop ar0
0D22 22         948            ret
0D23            949   
0D23            950   skipp1:
0D23 22         951            ret
0D24            952   
0D24            953   
0D24            954   stage_temp:
0D24 53E8F0     955       anl ADCCON0, #0xF0
0D27 43E807     956       orl ADCCON0, #0x07 ; Select channel 7 
0D2A            957   
0D2A C2EF       958       clr ADCF
0D2C D2EE       959       setb ADCS
0D2E 30EFFD     960       jnb ADCF, $
0D31            961   
0D31 E5C3       962       mov a, ADCRH
0D33 C4         963       swap a
0D34 C0E0       964       push acc
0D36 540F       965       anl a, #0x0f
0D38 F9         966       mov R1, a
0D39 D0E0       967       pop acc
0D3B 54F0       968       anl a, #0xf0
0D3D 45C2       969       orl a, ADCRL
0D3F F8         970       mov R0, A
0D40            971       
0D40            972       ; Convert to voltage
0D40 883D       973            mov x+0, R0
0D42 893E       974            mov x+1, R1
0D44 753F00     975            mov x+2, #0
0D47 754000     976            mov x+3, #0
0D4A 75417C     977            mov y+0, #low (50300 % 0x10000) 
0D4D 7542C4     977            mov y+1, #high(50300 % 0x10000) 
0D50 754300     977            mov y+2, #low (50300 / 0x10000) 
0D53 754400     977            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0D56 120358     978            lcall mul32
0D59 7541FF     979            mov y+0, #low (4095 % 0x10000) 
0D5C 75420F     979            mov y+1, #high(4095 % 0x10000) 
0D5F 754300     979            mov y+2, #low (4095 / 0x10000) 
0D62 754400     979            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0D65 1203E5     980            lcall div32
0D68 7541A4     981            mov y+0, #low (27300 % 0x10000) 
0D6B 75426A     981            mov y+1, #high(27300 % 0x10000) 
0D6E 754300     981            mov y+2, #low (27300 / 0x10000) 
0D71 754400     981            mov y+3, #high(27300 / 0x10000) 
0D74 1202C4     982            lcall sub32
0D77 754164     983            mov y+0, #low (100 % 0x10000) 
0D7A 754200     983            mov y+1, #high(100 % 0x10000) 
0D7D 754300     983            mov y+2, #low (100 / 0x10000) 
0D80 754400     983            mov y+3, #high(100 / 0x10000) 
0D83 120358     984            lcall mul32
0D86            985       ;save outside temp to z to later add onto the oven temp
0D86 853D45     986       mov z+0, x+0
0D89 853E46     987       mov z+1, x+1
0D8C 853F47     988       mov z+2, x+2
0D8F 854048     989       mov z+3, x+3 
0D92            990   
0D92 53E8F0     991            anl  ADCCON0, #0xF0  
0D95 43E804     992       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
0D98            993   
0D98 C2EF       994       clr ADCF
0D9A D2EE       995       setb ADCS
0D9C 30EFFD     996       jnb ADCF, $
0D9F            997   
0D9F E5C3       998       mov a, ADCRH
0DA1 C4         999       swap a
0DA2 C0E0      1000       push acc
0DA4 540F      1001       anl a, #0x0f
0DA6 F9        1002       mov R1, a
0DA7 D0E0      1003       pop acc
0DA9 54F0      1004       anl a, #0xf0
0DAB 45C2      1005       orl a, ADCRL
0DAD F8        1006       mov R0, A
0DAE           1007       
0DAE           1008       ; Convert to voltage
0DAE 883D      1009            mov x+0, R0
0DB0 893E      1010            mov x+1, R1
0DB2 753F00    1011            mov x+2, #0
0DB5 754000    1012            mov x+3, #0
0DB8 75417C    1013            mov y+0, #low (50300 % 0x10000) 
0DBB 7542C4    1013            mov y+1, #high(50300 % 0x10000) 
0DBE 754300    1013            mov y+2, #low (50300 / 0x10000) 
0DC1 754400    1013            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0DC4 120358    1014            lcall mul32
0DC7 7541FF    1015            mov y+0, #low (4095 % 0x10000) 
0DCA 75420F    1015            mov y+1, #high(4095 % 0x10000) 
0DCD 754300    1015            mov y+2, #low (4095 / 0x10000) 
0DD0 754400    1015            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0DD3 1203E5    1016            lcall div32
0DD6           1017   
0DD6           1018            ;vout of opamp should now be in x
0DD6           1019       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0DD6           1020       ;first calculate vout*R2:
0DD6 7541BD    1021            mov y+0, #low (1469 % 0x10000) 
0DD9 754205    1021            mov y+1, #high(1469 % 0x10000) 
0DDC 754300    1021            mov y+2, #low (1469 / 0x10000) 
0DDF 754400    1021            mov y+3, #high(1469 / 0x10000) 
0DE2 120358    1022       lcall mul32
0DE5           1023       ;now vout*R2 ohm is in x
0DE5           1024       ;next we will take 461 650V and divide
0DE5 754152    1025            mov y+0, #low (461650 % 0x10000) 
0DE8 75420B    1025            mov y+1, #high(461650 % 0x10000) 
0DEB 754307    1025            mov y+2, #low (461650 / 0x10000) 
0DEE 754400    1025            mov y+3, #high(461650 / 0x10000)  
0DF1 1203E5    1026       lcall div32
0DF4           1027       ;multiply by 100k and then divide by 41 to cancel units
0DF4 754140    1028            mov y+0, #low (1000000 % 0x10000) 
0DF7 754242    1028            mov y+1, #high(1000000 % 0x10000) 
0DFA 75430F    1028            mov y+2, #low (1000000 / 0x10000) 
0DFD 754400    1028            mov y+3, #high(1000000 / 0x10000) 
0E00 120358    1029       lcall mul32
0E03 754129    1030            mov y+0, #low (41 % 0x10000) 
0E06 754200    1030            mov y+1, #high(41 % 0x10000) 
0E09 754300    1030            mov y+2, #low (41 / 0x10000) 
0E0C 754400    1030            mov y+3, #high(41 / 0x10000) 
0E0F 1203E5    1031       lcall div32
0E12           1032       ;move the outside temp to y and add
0E12 854541    1033       mov y+0, z+0
0E15 854642    1034       mov y+1, z+1
0E18 854743    1035       mov y+2, z+2
0E1B 854844    1036       mov y+3, z+3
0E1E 1202A3    1037       lcall add32
0E21 1201DE    1038       lcall hex2bcd
0E24           1039   
0E24 C000      1040   push ar0
0E26 A84C      1040   mov r0, bcd+3
0E28 1201C0    1040   lcall ?Send_BCD
0E2B D000      1040   pop ar0
0E2D C000      1041   push ar0
0E2F A84B      1041   mov r0, bcd+2
0E31 1201C0    1041   lcall ?Send_BCD
0E34 D000      1041   pop ar0
0E36           1042       put_decimal_1:
0E36 3099FD    1043       jnb TI, put_decimal_1 ; Wait for transmission to complete
0E39 C299      1044       clr TI
0E3B 75992E    1045       mov SBUF, #'.'
0E3E C000      1046   push ar0
0E40 A84A      1046   mov r0, bcd+1
0E42 1201C0    1046   lcall ?Send_BCD
0E45 D000      1046   pop ar0
0E47 C000      1047   push ar0
0E49 A849      1047   mov r0, bcd+0
0E4B 1201C0    1047   lcall ?Send_BCD
0E4E D000      1047   pop ar0
0E50           1048       put_r_1:
0E50 3099FD    1049       jnb TI, put_r_1 ; Wait for transmission to complete
0E53 C299      1050       clr TI
0E55 75990D    1051       mov SBUF, #'\r'
0E58           1052       put_n_1:
0E58 3099FD    1053       jnb TI, put_n_1 ; Wait for transmission to complete
0E5B C299      1054       clr TI
0E5D 75990A    1055       mov SBUF, #'\n'
0E60           1056   
0E60 22        1057            ret
0E61           1058   
0E61           1059   clearx:
0E61 753D00    1060            mov x+0, #0x00
0E64 753E00    1061            mov x+1, #0x00
0E67 753F00    1062            mov x+2, #0x00
0E6A 754000    1063            mov x+3, #0x00
0E6D 22        1064            ret 
0E6E           1065   
0E6E           1066   check_temps:
0E6E E536      1067            mov a, current_temp 
0E70 9532      1068            subb a, Soak_temp ; subb sets carry flag if a borrow is needed (current_temp < soaktemp)
0E72           1069            ;soak temp is 10 for 100, current temp is 1 for 100 
0E72 4025      1070            jc skipp2 ; skip if current_temp < soak_temp (carry bit set)
0E74 E537      1071            mov a, current_temp_hund
0E76 B53303    1072            cjne a, soak_temp_hund, next2 ; hundreds place moves relatively slowly so can we can just use cjne
0E79 753002    1073            mov STATE, #0x02
0E7C           1074   next2:
0E7C 22        1075            ret
0E7D           1076   
0E7D           1077   check_currenttemp:
0E7D E536      1078            mov a, current_temp
0E7F 754900    1079            mov bcd+0, #0x00
0E82 754A00    1080            mov bcd+1, #0x00
0E85 754B00    1081            mov bcd+2, #0x00
0E88 754C00    1082            mov bcd+3, #0x00
0E8B F549      1083            mov bcd, a
0E8D 120267    1084            lcall bcd2hex
0E90 E53D      1085            mov a, x
0E92 9450      1086            subb a, #0x50
0E94 4003      1087            jc skipp2
0E96 D208      1088            setb temp_flag ; set safety flag if temp >=50
0E98 22        1089            ret
0E99           1090            
0E99           1091   skipp2:
0E99 22        1092            ret
0E9A           1093            
0E9A           1094   safety_feature:
0E9A E539      1095            mov a, seconds
0E9C B43CFA    1096            cjne a, #0x3C, skipp2 ; skip if current time is not 60
0E9F 2008F7    1097            jb temp_flag, skipp2 ; skip if temperature checks passed
0EA2 120AF3    1098            lcall display_blank
0EA5 753B00    1099            mov pwm, #0
0EA8 C0E0      1100            push acc
0EAA 7401      1100            mov a, #1
0EAC 14        1100            dec a
0EAD 120185    1100            lcall ?Set_Cursor_1 ; Select column and row
0EB0 D0E0      1100            pop acc
0EB2 C083      1101            push dph
0EB4 C082      1101            push dpl
0EB6 C0E0      1101            push acc
0EB8 900075    1101            mov dptr, #safety_message
0EBB 120178    1101            lcall ?Send_Constant_String
0EBE D0E0      1101            pop acc
0EC0 D082      1101            pop dpl
0EC2 D083      1101            pop dph
0EC4 C0E0      1102            push acc
0EC6 7401      1102            mov a, #1
0EC8 14        1102            dec a
0EC9 120183    1102            lcall ?Set_Cursor_2 ; Select column and row
0ECC D0E0      1102            pop acc
0ECE C083      1103            push dph
0ED0 C082      1103            push dpl
0ED2 C0E0      1103            push acc
0ED4 90007D    1103            mov dptr, #safety_message1
0ED7 120178    1103            lcall ?Send_Constant_String
0EDA D0E0      1103            pop acc
0EDC D082      1103            pop dpl
0EDE D083      1103            pop dph
0EE0           1104   
0EE0           1105   safety_feature_loop:
0EE0 C0E0      1106            push acc
0EE2 7408      1106            mov a, #8
0EE4 14        1106            dec a
0EE5 120185    1106            lcall ?Set_Cursor_1 ; Select column and row
0EE8 D0E0      1106            pop acc
0EEA C0E0      1107            push acc
0EEC 7421      1107            mov a, #'!'
0EEE 12013B    1107            lcall ?WriteData
0EF1 D0E0      1107            pop acc
0EF3 C002      1108            push AR2
0EF5 7AFA      1108            mov R2, #250
0EF7 1200F6    1108            lcall ?Wait_Milli_Seconds
0EFA D002      1108            pop AR2
0EFC C0E0      1109            push acc
0EFE 7408      1109            mov a, #8
0F00 14        1109            dec a
0F01 120185    1109            lcall ?Set_Cursor_1 ; Select column and row
0F04 D0E0      1109            pop acc
0F06 C0E0      1110            push acc
0F08 7420      1110            mov a, #' '
0F0A 12013B    1110            lcall ?WriteData
0F0D D0E0      1110            pop acc
0F0F C002      1111            push AR2
0F11 7AFA      1111            mov R2, #250
0F13 1200F6    1111            lcall ?Wait_Milli_Seconds
0F16 D002      1111            pop AR2
0F18 020EE0    1112            ljmp safety_feature_loop
0F1B           1113   
0F1B           1114   
0F1B           1115   
0F1B           1116   ; checks secs for state 2 -> 3
0F1B           1117   check_secs_s2:
0F1B 853149    1118            mov bcd, soak_time                      ; soak_time stored as bcd
0F1E 120267    1119            lcall bcd2hex
0F21 E53D      1120       mov a, x
0F23 B53903    1121       cjne a, seconds, skip_check_secs_s2
0F26           1122            ;lcall debug_display
0F26 753003    1123       mov state, #3
0F29           1124   skip_check_secs_s2:
0F29 22        1125       ret
0F2A           1126   
0F2A           1127   skipp3:
0F2A 22        1128            ret
0F2B           1129   
0F2B           1130   ; checks temp for state 3 -> 4
0F2B           1131   check_temps_s3:
0F2B E536      1132            mov a, current_temp 
0F2D 9535      1133            subb a, Reflow_temp
0F2F 40F9      1134            jc skipp3
0F31 E537      1135            mov a, current_temp_hund
0F33 B53C03    1136            cjne a, reflow_temp_100, nxt2
0F36 753004    1137            mov STATe, #0x04
0F39           1138   nxt2:
0F39 22        1139            ret
0F3A           1140   
0F3A           1141   ; checks secs for state 4 -> 5
0F3A           1142   check_secs_s4:
0F3A 853449    1143            mov bcd, reflow_time ; reflow_time stored as bcd
0F3D 120267    1144            lcall bcd2hex
0F40 E53D      1145       mov a, x
0F42 B53903    1146       cjne a, seconds, skip_check_secs_s4
0F45 753005    1147       mov state, #5
0F48           1148   skip_check_secs_s4:
0F48 22        1149       ret
0F49           1150   
0F49           1151   ; checks temp for state 5 -> 0
0F49           1152   check_temp_s5:
0F49 7460      1153       mov a, #0x60
0F4B 9536      1154            subb a, current_temp
0F4D 40DB      1155            jc skipp3
0F4F E537      1156            mov a, current_temp_hund
0F51 B40003    1157            cjne a, #0, nx2
0F54 753000    1158            mov STATE, #0x00
0F57           1159   nx2:
0F57 22        1160            ret
0F58 22        1161   ret
0F59           1162   
0F59           1163   reset_seconds:
0F59 E539      1164            mov a, seconds
0F5B 7400      1165            mov a, #0x00
0F5D F539      1166            mov seconds, a
0F5F           1167            ;lcall clearx
0F5F           1168            ;mov x, soak_time
0F5F           1169            ;lcall bcd2hex
0F5F           1170            ;mov soak_time, x
0F5F           1171   
0F5F           1172            ;mov a, seconds
0F5F           1173            ;SUBB a, soak_time
0F5F           1174            ;mov seconds, a
0F5F 22        1175   ret
0F60           1176   
0F60           1177   check_fahrenheit:
0F60 200903    1178            jb fahrenheit_flag, fahrenheit_display
0F63 020F95    1179            ljmp celsius_display
0F66           1180   
0F66           1181   fahrenheit_display:
0F66 C0E0      1182            push acc
0F68 740D      1182            mov a, #13
0F6A 14        1182            dec a
0F6B 120183    1182            lcall ?Set_Cursor_2 ; Select column and row
0F6E D0E0      1182            pop acc
0F70 C083      1183            push dph
0F72 C082      1183            push dpl
0F74 C0E0      1183            push acc
0F76 9000EA    1183            mov dptr, #blank_unit
0F79 120178    1183            lcall ?Send_Constant_String
0F7C D0E0      1183            pop acc
0F7E D082      1183            pop dpl
0F80 D083      1183            pop dph
0F82 C083      1184            push dph
0F84 C082      1184            push dpl
0F86 C0E0      1184            push acc
0F88 9000E2    1184            mov dptr, #fahrenheit
0F8B 120178    1184            lcall ?Send_Constant_String
0F8E D0E0      1184            pop acc
0F90 D082      1184            pop dpl
0F92 D083      1184            pop dph
0F94 22        1185            ret 
0F95           1186   
0F95           1187   celsius_display:
0F95 C0E0      1188            push acc
0F97 740D      1188            mov a, #13
0F99 14        1188            dec a
0F9A 120183    1188            lcall ?Set_Cursor_2 ; Select column and row
0F9D D0E0      1188            pop acc
0F9F C083      1189            push dph
0FA1 C082      1189            push dpl
0FA3 C0E0      1189            push acc
0FA5 9000EA    1189            mov dptr, #blank_unit
0FA8 120178    1189            lcall ?Send_Constant_String
0FAB D0E0      1189            pop acc
0FAD D082      1189            pop dpl
0FAF D083      1189            pop dph
0FB1 C083      1190            push dph
0FB3 C082      1190            push dpl
0FB5 C0E0      1190            push acc
0FB7 9000E0    1190            mov dptr, #celsius
0FBA 120178    1190            lcall ?Send_Constant_String
0FBD D0E0      1190            pop acc
0FBF D082      1190            pop dpl
0FC1 D083      1190            pop dph
0FC3 22        1191            ret 
0FC4           1192   
0FC4           1193   main:
0FC4 75817F    1194            mov sp, #0x7f
0FC7           1195   
0FC7 75B100    1196            mov P0M1, #0x00
0FCA 75B200    1197       mov P0M2, #0x00
0FCD 75B300    1198       mov P1M1, #0x00
0FD0 75B400    1199       mov P1M2, #0x00
0FD3 75AD00    1200       mov P3M2, #0x00
0FD6 75AD00    1201       mov P3M2, #0x00
0FD9           1202   
0FD9 12044E    1203            lcall Init_All
0FDC 120145    1204       lcall LCD_4BIT
0FDF 1204D7    1205            lcall Timer2_ISR
0FE2 1204B4    1206            lcall Timer0_Init
0FE5           1207       
0FE5           1208        ; initial messages in LCD
0FE5 753000    1209       mov STATE, #0x00
0FE8 753100    1210       mov Soak_time, #0x00
0FEB 753200    1211       mov Soak_temp, #0x00
0FEE 753300    1212       mov soak_temp_hund, #0x00
0FF1 753400    1213       mov Reflow_time, #0x00
0FF4 753500    1214       mov Reflow_temp, #0x00
0FF7 753600    1215       mov current_temp, #0x00
0FFA 753700    1216       mov current_temp_hund, #0x00
0FFD 753900    1217       mov seconds, #0x00
1000 753A00    1218       mov pwm_counter, #0x00
1003 753B00    1219       mov pwm, #0x00
1006 753C00    1220       mov reflow_temp_100, #0x00
1009 C205      1221       clr decrement1
100B C206      1222       clr s_flag 
100D C209      1223       clr fahrenheit_flag
100F C28C      1224            clr TR0
1011 C20A      1225            clr mute_flag
1013           1226            
1013           1227   Forever:
1013 120AF3    1228            lcall display_blank
1016           1229   
1016           1230   state_0:
1016 C0E0      1231            push acc
1018 7401      1231            mov a, #1
101A 14        1231            dec a
101B 120185    1231            lcall ?Set_Cursor_1 ; Select column and row
101E D0E0      1231            pop acc
1020 C083      1232            push dph
1022 C082      1232            push dpl
1024 C0E0      1232            push acc
1026 90002E    1232            mov dptr, #soak_param
1029 120178    1232            lcall ?Send_Constant_String
102C D0E0      1232            pop acc
102E D082      1232            pop dpl
1030 D083      1232            pop dph
1032 C0E0      1233            push acc
1034 7401      1233            mov a, #1
1036 14        1233            dec a
1037 120183    1233            lcall ?Set_Cursor_2 ; Select column and row
103A D0E0      1233            pop acc
103C C083      1234            push dph
103E C082      1234            push dpl
1040 C0E0      1234            push acc
1042 90003D    1234            mov dptr, #reflow_param
1045 120178    1234            lcall ?Send_Constant_String
1048 D0E0      1234            pop acc
104A D082      1234            pop dpl
104C D083      1234            pop dph
104E           1235   
104E           1236   state_0_loop:
104E E530      1237            mov a, STATE
1050 753B64    1238       mov pwm, #100
1053 B4001C    1239            cjne a, #0, state_1
1056 1204F8    1240            lcall LCD_PB
1059 120556    1241            lcall check_decrement
105C 120A32    1242            lcall display_menu
105F 1209BA    1243            lcall Check_start
1062 C0E0      1244            push acc
1064 7410      1244            mov a, #16
1066 14        1244            dec a
1067 120185    1244            lcall ?Set_Cursor_1 ; Select column and row
106A D0E0      1244            pop acc
106C           1244   
106C 1209E2    1245            lcall check_mute
106F 02104E    1246            ljmp state_0_loop
1072           1247   
1072           1248   state_1: 
1072 120AF3    1249            lcall display_blank
1075 C0E0      1250            push acc
1077 7410      1250            mov a, #16
1079 14        1250            dec a
107A 120183    1250            lcall ?Set_Cursor_2 ; Select column and row
107D D0E0      1250            pop acc
107F 120A12    1251            lcall display_mute
1082 1209E2    1252            lcall check_mute
1085 753900    1253            mov seconds, #0x00
1088 C0E0      1254            push acc
108A 7401      1254            mov a, #1
108C 14        1254            dec a
108D 120185    1254            lcall ?Set_Cursor_1 ; Select column and row
1090 D0E0      1254            pop acc
1092 C083      1255            push dph
1094 C082      1255            push dpl
1096 C0E0      1255            push acc
1098 90004E    1255            mov dptr, #heating_to_s
109B 120178    1255            lcall ?Send_Constant_String
109E D0E0      1255            pop acc
10A0 D082      1255            pop dpl
10A2 D083      1255            pop dph
10A4 C0E0      1256            push acc
10A6 7401      1256            mov a, #1
10A8 14        1256            dec a
10A9 120183    1256            lcall ?Set_Cursor_2 ; Select column and row
10AC D0E0      1256            pop acc
10AE C083      1257            push dph
10B0 C082      1257            push dpl
10B2 C0E0      1257            push acc
10B4 90005E    1257            mov dptr, #heating_temp
10B7 120178    1257            lcall ?Send_Constant_String
10BA D0E0      1257            pop acc
10BC D082      1257            pop dpl
10BE D083      1257            pop dph
10C0           1258   
10C0 C0E0      1259            push acc
10C2 7404      1259            mov a, #4
10C4 14        1259            dec a
10C5 120185    1259            lcall ?Set_Cursor_1 ; Select column and row
10C8 D0E0      1259            pop acc
10CA C000      1260            push ar0
10CC A833      1260            mov r0, Soak_temp_hund
10CE 12018A    1260            lcall ?Display_BCD
10D1 D000      1260            pop ar0
10D3 C0E0      1261            push acc
10D5 7405      1261            mov a, #5
10D7 14        1261            dec a
10D8 120185    1261            lcall ?Set_Cursor_1 ; Select column and row
10DB D0E0      1261            pop acc
10DD C000      1262            push ar0
10DF A832      1262            mov r0, soak_temp
10E1 12018A    1262            lcall ?Display_BCD
10E4 D000      1262            pop ar0
10E6           1263   
10E6 120E61    1264            lcall clearx
10E9 754900    1265            mov bcd+0, #0x00
10EC 754A00    1266            mov bcd+1, #0x00
10EF 754B00    1267            mov bcd+2, #0x00
10F2 754C00    1268            mov bcd+3, #0x00
10F5 853349    1269            mov bcd, soak_temp_hund
10F8 120267    1270            lcall bcd2hex
10FB 75410A    1271            mov y+0, #low (10 % 0x10000) 
10FE 754200    1271            mov y+1, #high(10 % 0x10000) 
1101 754300    1271            mov y+2, #low (10 / 0x10000) 
1104 754400    1271            mov y+3, #high(10 / 0x10000) 
1107 1203E5    1272            lcall div32
110A 1201DE    1273            lcall hex2bcd
110D 854933    1274            mov soak_temp_hund, bcd
1110 200A16    1275            jb mute_flag, state_1_loop
1113 D28C      1276            setb TR0
1115 C002      1277            push AR2
1117 7AFA      1277            mov R2, #250
1119 1200F6    1277            lcall ?Wait_Milli_Seconds
111C D002      1277            pop AR2
111E C002      1278            push AR2
1120 7AFA      1278            mov R2, #250
1122 1200F6    1278            lcall ?Wait_Milli_Seconds
1125 D002      1278            pop AR2
1127 C28C      1279       clr TR0
1129           1280            
1129           1281   state_1_loop:
1129 E530      1282            mov a, STATE
112B B40134    1283            cjne a, #1, state_2
112E 120AA5    1284            lcall display_heating_s
1131 753B00    1285            mov pwm, #0
1134 1209D0    1286            lcall check_convert
1137 120B6C    1287            lcall outside_tmp
113A 120BE7    1288            lcall oven_tmp
113D 120E7D    1289            lcall check_currenttemp
1140 120E9A    1290            lcall safety_feature
1143 120E6E    1291            lcall check_temps
1146 120F60    1292            lcall check_fahrenheit
1149 C0E0      1293            push acc
114B 7410      1293            mov a, #16
114D 14        1293            dec a
114E 120183    1293            lcall ?Set_Cursor_2 ; Select column and row
1151 D0E0      1293            pop acc
1153 1209E2    1294            lcall check_mute
1156 C002      1295            push AR2
1158 7AFA      1295            mov R2, #250
115A 1200F6    1295            lcall ?Wait_Milli_Seconds
115D D002      1295            pop AR2
115F 021129    1296            ljmp state_1_loop
1162           1297   
1162           1298   state_2:
1162 120AF3    1299            lcall display_blank
1165 C0E0      1300            push acc
1167 7410      1300            mov a, #16
1169 14        1300            dec a
116A 120183    1300            lcall ?Set_Cursor_2 ; Select column and row
116D D0E0      1300            pop acc
116F 120A12    1301            lcall display_mute
1172 1209E2    1302            lcall check_mute
1175 753900    1303            mov seconds, #0
1178 C0E0      1304            push acc
117A 7401      1304            mov a, #1
117C 14        1304            dec a
117D 120185    1304            lcall ?Set_Cursor_1 ; Select column and row
1180 D0E0      1304            pop acc
1182 C083      1305            push dph
1184 C082      1305            push dpl
1186 C0E0      1305            push acc
1188 90008C    1305            mov dptr, #soaking
118B 120178    1305            lcall ?Send_Constant_String
118E D0E0      1305            pop acc
1190 D082      1305            pop dpl
1192 D083      1305            pop dph
1194 C0E0      1306            push acc
1196 7401      1306            mov a, #1
1198 14        1306            dec a
1199 120183    1306            lcall ?Set_Cursor_2 ; Select column and row
119C D0E0      1306            pop acc
119E C083      1307            push dph
11A0 C082      1307            push dpl
11A2 C0E0      1307            push acc
11A4 9000A7    1307            mov dptr, #time
11A7 120178    1307            lcall ?Send_Constant_String
11AA D0E0      1307            pop acc
11AC D082      1307            pop dpl
11AE D083      1307            pop dph
11B0 C0E0      1308            push acc
11B2 740E      1308            mov a, #14
11B4 14        1308            dec a
11B5 120185    1308            lcall ?Set_Cursor_1 ; Select column and row
11B8 D0E0      1308            pop acc
11BA C000      1309            push ar0
11BC A831      1309            mov r0, soak_time
11BE 12018A    1309            lcall ?Display_BCD
11C1 D000      1309            pop ar0
11C3 200A16    1310            jb mute_flag, state_2_loop
11C6 D28C      1311            setb TR0
11C8 C002      1312            push AR2
11CA 7AFA      1312            mov R2, #250
11CC 1200F6    1312            lcall ?Wait_Milli_Seconds
11CF D002      1312            pop AR2
11D1 C002      1313            push AR2
11D3 7AFA      1313            mov R2, #250
11D5 1200F6    1313            lcall ?Wait_Milli_Seconds
11D8 D002      1313            pop AR2
11DA C28C      1314       clr TR0
11DC           1315   
11DC           1316   
11DC           1317   state_2_loop: 
11DC E530      1318            mov a, STATE
11DE B40241    1319       cjne a, #2, state_3
11E1 C0E0      1320            push acc
11E3 7406      1320            mov a, #6
11E5 14        1320            dec a
11E6 120183    1320            lcall ?Set_Cursor_2 ; Select column and row
11E9 D0E0      1320            pop acc
11EB 120E61    1321            lcall clearx
11EE 85393D    1322            mov x, seconds 
11F1 1201DE    1323            lcall hex2bcd 
11F4 C000      1324            push ar0
11F6 A849      1324            mov r0, bcd
11F8 12018A    1324            lcall ?Display_BCD
11FB D000      1324            pop ar0
11FD 120E61    1325            lcall clearx
1200 753B50    1326            mov pwm, #80
1203 120F1B    1327            lcall check_secs_s2
1206 120D24    1328            lcall stage_temp
1209 C0E0      1329            push acc
120B 7410      1329            mov a, #16
120D 14        1329            dec a
120E 120183    1329            lcall ?Set_Cursor_2 ; Select column and row
1211 D0E0      1329            pop acc
1213 1209E2    1330            lcall check_mute
1216 C002      1331            push AR2
1218 7AFA      1331            mov R2, #250
121A 1200F6    1331            lcall ?Wait_Milli_Seconds
121D D002      1331            pop AR2
121F 0211DC    1332            ljmp state_2_loop
1222           1333   
1222           1334   state_3:
1222 753900    1335            mov seconds, #0
1225 120F59    1336            lcall reset_seconds
1228 120AF3    1337            lcall display_blank
122B C0E0      1338            push acc
122D 7401      1338            mov a, #1
122F 14        1338            dec a
1230 120185    1338            lcall ?Set_Cursor_1 ; Select column and row
1233 D0E0      1338            pop acc
1235 C083      1339            push dph
1237 C082      1339            push dpl
1239 C0E0      1339            push acc
123B 9000B0    1339            mov dptr, #heating_to_r
123E 120178    1339            lcall ?Send_Constant_String
1241 D0E0      1339            pop acc
1243 D082      1339            pop dpl
1245 D083      1339            pop dph
1247 C0E0      1340            push acc
1249 7401      1340            mov a, #1
124B 14        1340            dec a
124C 120183    1340            lcall ?Set_Cursor_2 ; Select column and row
124F D0E0      1340            pop acc
1251 C083      1341            push dph
1253 C082      1341            push dpl
1255 C0E0      1341            push acc
1257 90005E    1341            mov dptr, #heating_temp
125A 120178    1341            lcall ?Send_Constant_String
125D D0E0      1341            pop acc
125F D082      1341            pop dpl
1261 D083      1341            pop dph
1263 C0E0      1342            push acc
1265 7410      1342            mov a, #16
1267 14        1342            dec a
1268 120183    1342            lcall ?Set_Cursor_2 ; Select column and row
126B D0E0      1342            pop acc
126D           1342   
126D 120A12    1343            lcall display_mute
1270 1209E2    1344            lcall check_mute
1273           1345            
1273 C0E0      1346            push acc
1275 7404      1346            mov a, #4
1277 14        1346            dec a
1278 120185    1346            lcall ?Set_Cursor_1 ; Select column and row
127B D0E0      1346            pop acc
127D           1346   
127D C000      1347            push ar0
127F A83C      1347            mov r0, reflow_temp_100
1281 12018A    1347            lcall ?Display_BCD
1284 D000      1347            pop ar0
1286 C0E0      1348            push acc
1288 7405      1348            mov a, #5
128A 14        1348            dec a
128B 120185    1348            lcall ?Set_Cursor_1 ; Select column and row
128E D0E0      1348            pop acc
1290 C000      1349            push ar0
1292 A835      1349            mov r0, reflow_temp
1294 12018A    1349            lcall ?Display_BCD
1297 D000      1349            pop ar0
1299           1350   
1299 120E61    1351            lcall clearx
129C 754900    1352            mov bcd+0, #0x00
129F 754A00    1353            mov bcd+1, #0x00
12A2 754B00    1354            mov bcd+2, #0x00
12A5 754C00    1355            mov bcd+3, #0x00
12A8 853C49    1356            mov bcd, reflow_temp_100
12AB 120267    1357            lcall bcd2hex
12AE 75410A    1358            mov y+0, #low (10 % 0x10000) 
12B1 754200    1358            mov y+1, #high(10 % 0x10000) 
12B4 754300    1358            mov y+2, #low (10 / 0x10000) 
12B7 754400    1358            mov y+3, #high(10 / 0x10000) 
12BA 1203E5    1359            lcall div32
12BD 1201DE    1360            lcall hex2bcd
12C0 85493C    1361            mov reflow_temp_100, bcd
12C3 200A16    1362            jb mute_flag, state_3_loop
12C6 D28C      1363            setb TR0
12C8 C002      1364            push AR2
12CA 7AFA      1364            mov R2, #250
12CC 1200F6    1364            lcall ?Wait_Milli_Seconds
12CF D002      1364            pop AR2
12D1 C002      1365            push AR2
12D3 7AFA      1365            mov R2, #250
12D5 1200F6    1365            lcall ?Wait_Milli_Seconds
12D8 D002      1365            pop AR2
12DA C28C      1366       clr TR0
12DC           1367   
12DC           1368   state_3_loop:
12DC E530      1369            mov a, STATE
12DE B4032E    1370            cjne a, #3, state_4
12E1 120ACC    1371            lcall display_heating_r
12E4 753B00    1372            mov pwm, #0
12E7 1209D0    1373            lcall check_convert
12EA 120B6C    1374            lcall outside_tmp
12ED 120BE7    1375            lcall oven_tmp
12F0 120F2B    1376            lcall check_temps_s3
12F3 120F60    1377            lcall check_fahrenheit
12F6 C0E0      1378            push acc
12F8 7410      1378            mov a, #16
12FA 14        1378            dec a
12FB 120183    1378            lcall ?Set_Cursor_2 ; Select column and row
12FE D0E0      1378            pop acc
1300 1209E2    1379            lcall check_mute
1303 C002      1380            push AR2
1305 7AFA      1380            mov R2, #250
1307 1200F6    1380            lcall ?Wait_Milli_Seconds
130A D002      1380            pop AR2
130C 0212DC    1381            ljmp state_3_loop
130F           1382   
130F           1383   state_4:
130F 120AF3    1384            lcall display_blank
1312 753900    1385            mov seconds, #0
1315 C0E0      1386            push acc
1317 7401      1386            mov a, #1
1319 14        1386            dec a
131A 120185    1386            lcall ?Set_Cursor_1 ; Select column and row
131D D0E0      1386            pop acc
131F C083      1387            push dph
1321 C082      1387            push dpl
1323 C0E0      1387            push acc
1325 90009A    1387            mov dptr, #reflow
1328 120178    1387            lcall ?Send_Constant_String
132B D0E0      1387            pop acc
132D D082      1387            pop dpl
132F D083      1387            pop dph
1331 C0E0      1388            push acc
1333 7401      1388            mov a, #1
1335 14        1388            dec a
1336 120183    1388            lcall ?Set_Cursor_2 ; Select column and row
1339 D0E0      1388            pop acc
133B C083      1389            push dph
133D C082      1389            push dpl
133F C0E0      1389            push acc
1341 9000A7    1389            mov dptr, #time
1344 120178    1389            lcall ?Send_Constant_String
1347 D0E0      1389            pop acc
1349 D082      1389            pop dpl
134B D083      1389            pop dph
134D C0E0      1390            push acc
134F 740E      1390            mov a, #14
1351 14        1390            dec a
1352 120185    1390            lcall ?Set_Cursor_1 ; Select column and row
1355 D0E0      1390            pop acc
1357 C000      1391            push ar0
1359 A834      1391            mov r0, reflow_time
135B 12018A    1391            lcall ?Display_BCD
135E D000      1391            pop ar0
1360 C0E0      1392            push acc
1362 7410      1392            mov a, #16
1364 14        1392            dec a
1365 120183    1392            lcall ?Set_Cursor_2 ; Select column and row
1368 D0E0      1392            pop acc
136A 120A12    1393            lcall display_mute
136D 1209E2    1394            lcall check_mute
1370 200A16    1395            jb mute_flag, state_4_loop
1373 D28C      1396            setb TR0
1375 C002      1397            push AR2
1377 7AFA      1397            mov R2, #250
1379 1200F6    1397            lcall ?Wait_Milli_Seconds
137C D002      1397            pop AR2
137E C002      1398            push AR2
1380 7AFA      1398            mov R2, #250
1382 1200F6    1398            lcall ?Wait_Milli_Seconds
1385 D002      1398            pop AR2
1387 C28C      1399       clr TR0
1389           1400   
1389           1401   state_4_loop:
1389 E530      1402       mov a, STATE
138B B40441    1403       cjne a, #4, state_5
138E C0E0      1404            push acc
1390 7406      1404            mov a, #6
1392 14        1404            dec a
1393 120183    1404            lcall ?Set_Cursor_2 ; Select column and row
1396 D0E0      1404            pop acc
1398 120E61    1405       lcall clearx
139B 85393D    1406       mov x, seconds
139E 1201DE    1407       lcall hex2bcd
13A1 C000      1408            push ar0
13A3 A849      1408            mov r0, bcd
13A5 12018A    1408            lcall ?Display_BCD
13A8 D000      1408            pop ar0
13AA 120E61    1409       lcall clearx
13AD 753B50    1410       mov pwm, #80
13B0 120F3A    1411       lcall check_secs_s4
13B3 120D24    1412            lcall stage_temp
13B6 C0E0      1413            push acc
13B8 7410      1413            mov a, #16
13BA 14        1413            dec a
13BB 120183    1413            lcall ?Set_Cursor_2 ; Select column and row
13BE D0E0      1413            pop acc
13C0 1209E2    1414            lcall check_mute
13C3 C002      1415            push AR2
13C5 7AFA      1415            mov R2, #250
13C7 1200F6    1415            lcall ?Wait_Milli_Seconds
13CA D002      1415            pop AR2
13CC 021389    1416       ljmp state_4_loop
13CF           1417   
13CF           1418   state_5:
13CF 120AF3    1419       lcall display_blank
13D2 C0E0      1420            push acc
13D4 7401      1420            mov a, #1
13D6 14        1420            dec a
13D7 120185    1420            lcall ?Set_Cursor_1 ; Select column and row
13DA D0E0      1420            pop acc
13DC C083      1421            push dph
13DE C082      1421            push dpl
13E0 C0E0      1421            push acc
13E2 9000C0    1421            mov dptr, #cooling
13E5 120178    1421            lcall ?Send_Constant_String
13E8 D0E0      1421            pop acc
13EA D082      1421            pop dpl
13EC D083      1421            pop dph
13EE C0E0      1422            push acc
13F0 7401      1422            mov a, #1
13F2 14        1422            dec a
13F3 120183    1422            lcall ?Set_Cursor_2 ; Select column and row
13F6 D0E0      1422            pop acc
13F8 C083      1423            push dph
13FA C082      1423            push dpl
13FC C0E0      1423            push acc
13FE 90005E    1423            mov dptr, #heating_temp
1401 120178    1423            lcall ?Send_Constant_String
1404 D0E0      1423            pop acc
1406 D082      1423            pop dpl
1408 D083      1423            pop dph
140A C0E0      1424            push acc
140C 7410      1424            mov a, #16
140E 14        1424            dec a
140F 120183    1424            lcall ?Set_Cursor_2 ; Select column and row
1412 D0E0      1424            pop acc
1414           1424   
1414 120A12    1425            lcall display_mute
1417 1209E2    1426            lcall check_mute
141A 200A16    1427            jb mute_flag, state_5_loop
141D D28C      1428            setb TR0
141F C002      1429            push AR2
1421 7AFA      1429            mov R2, #250
1423 1200F6    1429            lcall ?Wait_Milli_Seconds
1426 D002      1429            pop AR2
1428 C002      1430            push AR2
142A 7AFA      1430            mov R2, #250
142C 1200F6    1430            lcall ?Wait_Milli_Seconds
142F D002      1430            pop AR2
1431 C28C      1431       clr TR0
1433           1432       
1433           1433   state_5_loop:
1433 E530      1434            mov a, STATE
1435 B4053E    1435            cjne a, #5, state_6
1438 753B64    1436            mov pwm, #100
143B C0E0      1437            push acc
143D 7407      1437            mov a, #7
143F 14        1437            dec a
1440 120183    1437            lcall ?Set_Cursor_2 ; Select column and row
1443 D0E0      1437            pop acc
1445           1437   
1445 C000      1438            push ar0
1447 A836      1438            mov r0, current_temp
1449 12018A    1438            lcall ?Display_BCD
144C D000      1438            pop ar0
144E 1209D0    1439            lcall check_convert
1451 120B6C    1440            lcall outside_tmp
1454 120BE7    1441            lcall oven_tmp
1457 120F49    1442            lcall check_temp_s5
145A 120F60    1443            lcall check_fahrenheit
145D C0E0      1444            push acc
145F 7410      1444            mov a, #16
1461 14        1444            dec a
1462 120183    1444            lcall ?Set_Cursor_2 ; Select column and row
1465 D0E0      1444            pop acc
1467 1209E2    1445            lcall check_mute
146A C002      1446            push AR2
146C 7AFA      1446            mov R2, #250
146E 1200F6    1446            lcall ?Wait_Milli_Seconds
1471 D002      1446            pop AR2
1473 021433    1447            ljmp state_5_loop
1476           1448   
1476           1449   state_6:
1476 120AF3    1450            lcall display_blank
1479 C0E0      1451            push acc
147B 7401      1451            mov a, #1
147D 14        1451            dec a
147E 120185    1451            lcall ?Set_Cursor_1 ; Select column and row
1481 D0E0      1451            pop acc
1483 C083      1452            push dph
1485 C082      1452            push dpl
1487 C0E0      1452            push acc
1489 9000D0    1452            mov dptr, #done
148C 120178    1452            lcall ?Send_Constant_String
148F D0E0      1452            pop acc
1491 D082      1452            pop dpl
1493 D083      1452            pop dph
1495 C0E0      1453            push acc
1497 7401      1453            mov a, #1
1499 14        1453            dec a
149A 120183    1453            lcall ?Set_Cursor_2 ; Select column and row
149D D0E0      1453            pop acc
149F C083      1454            push dph
14A1 C082      1454            push dpl
14A3 C0E0      1454            push acc
14A5 9000D5    1454            mov dptr, #ready
14A8 120178    1454            lcall ?Send_Constant_String
14AB D0E0      1454            pop acc
14AD D082      1454            pop dpl
14AF D083      1454            pop dph
14B1 C0E0      1455            push acc
14B3 7410      1455            mov a, #16
14B5 14        1455            dec a
14B6 120183    1455            lcall ?Set_Cursor_2 ; Select column and row
14B9 D0E0      1455            pop acc
14BB 120A12    1456            lcall display_mute
14BE 1209E2    1457            lcall check_mute
14C1 200A66    1458            jb mute_flag, state_6_loop
14C4 B28C      1459            cpl TR0
14C6 C002      1460            push AR2
14C8 7AFA      1460            mov R2, #250
14CA 1200F6    1460            lcall ?Wait_Milli_Seconds
14CD D002      1460            pop AR2
14CF C002      1461            push AR2
14D1 7AFA      1461            mov R2, #250
14D3 1200F6    1461            lcall ?Wait_Milli_Seconds
14D6 D002      1461            pop AR2
14D8 B28C      1462       cpl TR0
14DA C002      1463            push AR2
14DC 7AFA      1463            mov R2, #250
14DE 1200F6    1463            lcall ?Wait_Milli_Seconds
14E1 D002      1463            pop AR2
14E3 C002      1464            push AR2
14E5 7AFA      1464            mov R2, #250
14E7 1200F6    1464            lcall ?Wait_Milli_Seconds
14EA D002      1464            pop AR2
14EC B28C      1465       cpl TR0
14EE C002      1466            push AR2
14F0 7AFA      1466            mov R2, #250
14F2 1200F6    1466            lcall ?Wait_Milli_Seconds
14F5 D002      1466            pop AR2
14F7 C002      1467            push AR2
14F9 7AFA      1467            mov R2, #250
14FB 1200F6    1467            lcall ?Wait_Milli_Seconds
14FE D002      1467            pop AR2
1500 B28C      1468       cpl TR0
1502 C002      1469            push AR2
1504 7AFA      1469            mov R2, #250
1506 1200F6    1469            lcall ?Wait_Milli_Seconds
1509 D002      1469            pop AR2
150B C002      1470            push AR2
150D 7AFA      1470            mov R2, #250
150F 1200F6    1470            lcall ?Wait_Milli_Seconds
1512 D002      1470            pop AR2
1514 B28C      1471       cpl TR0
1516 C002      1472            push AR2
1518 7AFA      1472            mov R2, #250
151A 1200F6    1472            lcall ?Wait_Milli_Seconds
151D D002      1472            pop AR2
151F C002      1473            push AR2
1521 7AFA      1473            mov R2, #250
1523 1200F6    1473            lcall ?Wait_Milli_Seconds
1526 D002      1473            pop AR2
1528 B28C      1474       cpl TR0
152A           1475   
152A           1476   state_6_loop:
152A 7458      1477            mov a, #0x58
152C 120140    1477            lcall ?WriteCommand
152F 740E      1478            mov a, #01110B
1531 12013B    1478            lcall ?WriteData
1534 7409      1479            mov a, #01001B
1536 12013B    1479            lcall ?WriteData
1539 7409      1480            mov a, #01001B
153B 12013B    1480            lcall ?WriteData
153E 7409      1481            mov a, #01001B
1540 12013B    1481            lcall ?WriteData
1543 7409      1482            mov a, #01001B
1545 12013B    1482            lcall ?WriteData
1548 7409      1483            mov a, #01001B
154A 12013B    1483            lcall ?WriteData
154D 7408      1484            mov a, #01000B
154F 12013B    1484            lcall ?WriteData
1552 7410      1485            mov a, #10000B
1554 12013B    1485            lcall ?WriteData
1557 C0E0      1486            push acc
1559 740D      1486            mov a, #13
155B 14        1486            dec a
155C 120185    1486            lcall ?Set_Cursor_1 ; Select column and row
155F D0E0      1486            pop acc
1561 7403      1487            mov a, #3
1563 12013B    1487            lcall ?WriteData
1566           1487   
1566           1488   
1566 7460      1489            mov a, #0x60
1568 120140    1489            lcall ?WriteCommand
156B 7400      1490            mov a, #00000B
156D 12013B    1490            lcall ?WriteData
1570 7400      1491            mov a, #00000B
1572 12013B    1491            lcall ?WriteData
1575 7400      1492            mov a, #00000B
1577 12013B    1492            lcall ?WriteData
157A 7400      1493            mov a, #00000B
157C 12013B    1493            lcall ?WriteData
157F 7400      1494            mov a, #00000B
1581 12013B    1494            lcall ?WriteData
1584 7400      1495            mov a, #00000B
1586 12013B    1495            lcall ?WriteData
1589 741E      1496            mov a, #11110B
158B 12013B    1496            lcall ?WriteData
158E 7401      1497            mov a, #00001B
1590 12013B    1497            lcall ?WriteData
1593 C0E0      1498            push acc
1595 740E      1498            mov a, #14
1597 14        1498            dec a
1598 120185    1498            lcall ?Set_Cursor_1 ; Select column and row
159B D0E0      1498            pop acc
159D 7404      1499            mov a, #4
159F 12013B    1499            lcall ?WriteData
15A2           1499   
15A2           1500   
15A2 7468      1501            mov a, #0x68
15A4 120140    1501            lcall ?WriteCommand
15A7 7410      1502            mov a, #10000B
15A9 12013B    1502            lcall ?WriteData
15AC 7410      1503            mov a, #10000B
15AE 12013B    1503            lcall ?WriteData
15B1 7410      1504            mov a, #10000B
15B3 12013B    1504            lcall ?WriteData
15B6 7410      1505            mov a, #10000B
15B8 12013B    1505            lcall ?WriteData
15BB 7418      1506            mov a, #11000B
15BD 12013B    1506            lcall ?WriteData
15C0 7406      1507            mov a, #00110B
15C2 12013B    1507            lcall ?WriteData
15C5 7401      1508            mov a, #00001B
15C7 12013B    1508            lcall ?WriteData
15CA 7400      1509            mov a, #00000B
15CC 12013B    1509            lcall ?WriteData
15CF C0E0      1510            push acc
15D1 740D      1510            mov a, #13
15D3 14        1510            dec a
15D4 120183    1510            lcall ?Set_Cursor_2 ; Select column and row
15D7 D0E0      1510            pop acc
15D9 7405      1511            mov a, #5
15DB 12013B    1511            lcall ?WriteData
15DE           1511   
15DE           1512   
15DE 7470      1513            mov a, #0x70
15E0 120140    1513            lcall ?WriteCommand
15E3 741E      1514            mov a, #11110B
15E5 12013B    1514            lcall ?WriteData
15E8 7401      1515            mov a, #00001B
15EA 12013B    1515            lcall ?WriteData
15ED 741E      1516            mov a, #11110B
15EF 12013B    1516            lcall ?WriteData
15F2 7401      1517            mov a, #00001B
15F4 12013B    1517            lcall ?WriteData
15F7 741E      1518            mov a, #11110B
15F9 12013B    1518            lcall ?WriteData
15FC 7401      1519            mov a, #00001B
15FE 12013B    1519            lcall ?WriteData
1601 741E      1520            mov a, #11110B
1603 12013B    1520            lcall ?WriteData
1606 7400      1521            mov a, #00000B
1608 12013B    1521            lcall ?WriteData
160B C0E0      1522            push acc
160D 740E      1522            mov a, #14
160F 14        1522            dec a
1610 120183    1522            lcall ?Set_Cursor_2 ; Select column and row
1613 D0E0      1522            pop acc
1615 7406      1523            mov a, #6
1617 12013B    1523            lcall ?WriteData
161A           1523   
161A           1524   
161A C002      1525            push AR2
161C 7AFA      1525            mov R2, #250
161E 1200F6    1525            lcall ?Wait_Milli_Seconds
1621 D002      1525            pop AR2
1623 C002      1526            push AR2
1625 7AFA      1526            mov R2, #250
1627 1200F6    1526            lcall ?Wait_Milli_Seconds
162A D002      1526            pop AR2
162C           1527   
162C 7478      1528            mov a, #0x78
162E 120140    1528            lcall ?WriteCommand
1631 7400      1529            mov a, #00000B
1633 12013B    1529            lcall ?WriteData
1636 7400      1530            mov a, #00000B
1638 12013B    1530            lcall ?WriteData
163B 7400      1531            mov a, #00000B
163D 12013B    1531            lcall ?WriteData
1640 7400      1532            mov a, #00000B
1642 12013B    1532            lcall ?WriteData
1645 7400      1533            mov a, #00000B
1647 12013B    1533            lcall ?WriteData
164A 7407      1534            mov a, #00111B
164C 12013B    1534            lcall ?WriteData
164F 7408      1535            mov a, #01000B
1651 12013B    1535            lcall ?WriteData
1654 7410      1536            mov a, #10000B
1656 12013B    1536            lcall ?WriteData
1659 C0E0      1537            push acc
165B 740D      1537            mov a, #13
165D 14        1537            dec a
165E 120185    1537            lcall ?Set_Cursor_1 ; Select column and row
1661 D0E0      1537            pop acc
1663 7407      1538            mov a, #7
1665 12013B    1538            lcall ?WriteData
1668           1538   
1668           1539            
1668           1540   
1668 C002      1541            push AR2
166A 7AFA      1541            mov R2, #250
166C 1200F6    1541            lcall ?Wait_Milli_Seconds
166F D002      1541            pop AR2
1671 C002      1542            push AR2
1673 7AFA      1542            mov R2, #250
1675 1200F6    1542            lcall ?Wait_Milli_Seconds
1678 D002      1542            pop AR2
167A           1543   
167A 02152A    1544            ljmp state_6_loop
167D           1545   
167D           1546   EN
