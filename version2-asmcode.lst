0000              1   ; *****TODO*****
0000              2   ; link state 2 -> 3
0000              3   ; state 2 -> 3, 4 -> 5 check secs
0000              4   ; state 3 -> 4, 5 -> 0 check temp
0000              5   
0000              6   ; ******BONUS*******
0000              7   ; add button to change C <-> F
0000              8   ; python !!
0000              9   
0000             10   
0000             11   
0000             12   ; N76E003 LCD_Pushbuttons.asm: Reads muxed push buttons using one input
0000             13   
                 15   $LIST
0000             17   
0000             18   ;  N76E003 pinout:
0000             19   ;                               -------
0000             20   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             21   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             22   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             23   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             24   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             25   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             26   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             27   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             28   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             29   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             30   ;                               -------
0000             31   ;
0000             32   
0000             33   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             34   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             35   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             36   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             37   TIMER2_RATE EQU 100 ; 100Hz or 10ms
0000             38   TIMER2_RELOAD EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             39   
0000             40   ORG 0x0000
0000 020950      41            ljmp main
0023             42   org 0x0023
0023 32          43            reti
0024             44            ; Timer/Counter 2 overflow interrupt vector
002B             45   org 0x002B
002B 0204BF      46            ljmp Timer2_ISR
002E             47   
002E             48   START_BUTTON  equ P1.7
002E             49   PWM_OUT equ P1.0 ;logic 1 = oven on
002E             50   
002E             51   
002E             52   ;                   1234567890123456    <- This helps determine the location of the counter
002E 536F616B    53   soak_param: db     'Soak: xxs xxxC', 0
     3A207878
     73207878
     784300
003D 5265666C    54   reflow_param:db    'Reflow: xxs xxxC', 0
     6F773A20
     78787320
     78787843
     00
004E 54733A78    55   heating_to:  db    'Ts:xxxC To:xxxC', 0
     78784320
     546F3A78
     78784300
005E 54656D70    56   heating_temp:db    'Temp: xxxC', 0
     3A207878
     784300
0069 20202020    57   blank: db          '                ', 0 
     20202020
     20202020
     20202020
     00
007A 43616E74    58   safety_message:db  'Cant Read Temp', 0
     20526561
     64205465
     6D7000
0089 536F616B    59   soaking:db         'Soaking time', 0
     696E6720
     74696D65
     00
0096 54696D65    60   time:db            'Time:xxs',0
     3A787873
     00
009F             61   
009F             62   cseg
009F             63   ; These 'equ' must match the hardware wiring
009F             64   LCD_RS equ P1.3
009F             65   LCD_E  equ P1.4
009F             66   LCD_D4 equ P0.0
009F             67   LCD_D5 equ P0.1
009F             68   LCD_D6 equ P0.2
009F             69   LCD_D7 equ P0.3
009F             70   ;ADC_pn equ P1.1
009F             71   
009F             72   ; new variables
009F 5265666C    73   reflowing:         db    'Reflowing...', 0
     6F77696E
     672E2E2E
     00
00AC 436F6F6C    74   cooling:           db    'Cooling...', 0
     696E672E
     2E2E00
00B7 436F6F6C    75   cooling_time:      db    'Cool Time:xxs', 0
     2054696D
     653A7878
     7300
00C5 436F6F6C    76   cooldown_complete: db    'Cooldown Done', 0
     646F776E
     20446F6E
     6500
00D3 52656164    77   ready_to_open:     db    'Ready to Open', 0
     7920746F
     204F7065
     6E00
00E1             78   
00E1             79   
                 81   	$LIST
01D3             83   
0030             84   DSEG at 30h
0030             85   STATE: ds 1
0031             86   Soak_time: ds 1
0032             87   Soak_temp: ds 1
0033             88   soak_temp_hund: ds 1
0034             89   Reflow_time: ds 1
0035             90   Reflow_temp: ds 1
0036             91   current_temp: ds 1
0037             92   current_temp_hund: ds 1
0038             93   outside_temp: ds 1
0039             94   seconds: ds 1 ;seconds counter attached to timer 2 ISR
003A             95   pwm_counter: ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
003B             96   pwm: ds 1 ; pwm percentage
003C             97   reflow_temp_100:ds 1
003D             98   x: ds 4
0041             99   y: ds 4
0045            100   z: ds 4
0049            101   bcd: ds 5
004E            102   
004E            103   
0000            104   BSEG
0000            105   ; These five bit variables store the value of the pushbuttons after calling 'LCD_PB' below
0000            106   PB0: dbit 1
0001            107   PB1: dbit 1
0002            108   PB2: dbit 1
0003            109   PB3: dbit 1
0004            110   PB4: dbit 1
0005            111   decrement1: dbit 1
0006            112   s_flag: dbit 1 ; set to 1 every time a second has passed
0007            113   mf: dbit 1
0008            114   temp_flag: dbit 1
0009            115   
                546   $LIST
                117   $LIST
0443            119   
0443            120   CSEG
0443            121   
0443            122   Init_All:
0443            123            ; Configure all the pins for biderectional I/O
0443 75AC00     124            mov     P3M1, #0x00
0446 75AD00     125            mov     P3M2, #0x00
0449 75B300     126            mov     P1M1, #0x00
044C 75B400     127            mov     P1M2, #0x00
044F 75B100     128            mov     P0M1, #0x00
0452 75B200     129            mov     P0M2, #0x00
0455            130            
0455 438E10     131            orl     CKCON, #0x10 ; CLK is the input for timer 1
0458 438780     132            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
045B 759852     133            mov     SCON, #0x52
045E 53C4DF     134            anl     T3CON, #0b11011111
0461 53890F     135            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0464 438920     136            orl     TMOD, #0x20 ; Timer 1 Mode 2
0467 758DF7     137            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
046A D28E       138            setb TR1
046C            139            
046C            140            ; Using timer 0 for delay functions.  Initialize here:
046C C28C       141            clr     TR0 ; Stop timer 0
046E 438E08     142            orl     CKCON,#0x08 ; CLK is the input for timer 0
0471 5389F0     143            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0474 438901     144            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0477            145   
0477            146            ; Initialize timer 2 for periodic interrupts
0477 75C800     147            mov T2CON, #0 ; Stop timer/counter. Autoreload mode.
047A 75CDD7     148            mov TH2, #high(TIMER2_RELOAD)
047D 75CC79     149            mov TL2, #low(TIMER2_RELOAD)
0480            150            ; Set the reload value
0480 75C9A0     151            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0483 75CBD7     152            mov RCMP2H, #high(TIMER2_RELOAD)
0486 75CA79     153            mov RCMP2L, #low(TIMER2_RELOAD)
0489            154            ; Init the free running 10 ms counter to zero
0489 753A00     155            mov pwm_counter, #0
048C            156            ; Enable the timer and interrupts
048C 439B80     157            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
048F D2CA       158            setb TR2 ; Enable timer 2
0491 D2AF       159            setb EA ; Enable global interrupts
0493            160   
0493            161            ; Initialize the pin used by the ADC-LM335 (P1.1) as input.
0493 43B302     162            orl     P1M1, #0b00000010
0496 53B4FD     163            anl     P1M2, #0b11111101
0499            164            
0499            165       ;initialize the pint used by ADC-opamp output as input pin 1 (P0.5) AIN4
0499 43B110     166       orl  P0M1, #0b00010000
049C 53B2EF     167            anl     P0M2, #0b11101111
049F            168            
049F            169   
049F            170            ; Initialize and start the ADC-LM335:
049F            171            ;do these two when you are going to read from pin 14
049F            172       ;anl ADCCON0, #0xF0
049F            173            ;orl ADCCON0, #0x07 ; Select channel 7
049F            174            
049F            175       ; AINDIDS select if some pins are analog inputs or digital I/O:
049F 75F600     176            mov AINDIDS, #0x00 ; Disable all analog inputs
04A2 43F690     177            orl AINDIDS, #0b10010000 ; P1.1 and P0.5 is analog input
04A5 43E101     178            orl ADCCON1, #0x01 ; Enable ADC
04A8            179   
04A8            180   
04A8 22         181   ret
04A9            182            
04A9            183   wait_1ms:
04A9 C28C       184            clr     TR0 ; Stop timer 0
04AB C28D       185            clr     TF0 ; Clear overflow flag
04AD 758CBF     186            mov     TH0, #high(TIMER0_RELOAD_1MS)
04B0 758A28     187            mov     TL0,#low(TIMER0_RELOAD_1MS)
04B3 D28C       188            setb TR0
04B5 308DFD     189            jnb     TF0, $ ; Wait for overflow
04B8 22         190            ret
04B9            191   
04B9            192   ; Wait the number of miliseconds in R2
04B9            193   waitms:
04B9 1204A9     194            lcall wait_1ms
04BC DAFB       195            djnz R2, waitms
04BE 22         196            ret
04BF            197   Timer2_ISR:
04BF C2CF       198            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
04C1 C0D0       199            push psw
04C3 C0E0       200            push acc
04C5            201   
04C5 053A       202            inc pwm_counter
04C7 C3         203            clr c
04C8 E53B       204            mov a, pwm
04CA 953A       205            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
04CC B3         206            cpl c
04CD 9290       207            mov PWM_OUT, c
04CF            208   
04CF E53A       209            mov a, pwm_counter
04D1 B46407     210            cjne a, #100, Timer2_ISR_done
04D4 753A00     211            mov pwm_counter, #0
04D7 0539       212            inc seconds ; It is super easy to keep a seconds count here
04D9 D206       213            setb s_flag
04DB            214   
04DB            215   Timer2_ISR_done:
04DB D0E0       216            pop acc
04DD D0D0       217            pop psw
04DF 32         218            reti
04E0            219   
04E0            220   LCD_PB:
04E0            221            ; Set variables to 1: 'no push button pressed'
04E0 D200       222            setb PB0
04E2 D201       223            setb PB1
04E4 D202       224            setb PB2
04E6 D203       225            setb PB3
04E8 D204       226            setb PB4
04EA            227            ; The input pin used to check set to '1'
04EA D295       228            setb P1.5
04EC            229            
04EC            230            ; Check if any push button is pressed
04EC C280       231            clr P0.0
04EE C281       232            clr P0.1
04F0 C282       233            clr P0.2
04F2 C283       234            clr P0.3
04F4 C293       235            clr P1.3
04F6 20953A     236            jb P1.5, LCD_PB_Done
04F9            237   
04F9            238            ; Debounce
04F9 7A32       239            mov R2, #50
04FB 1204B9     240            lcall waitms
04FE 209532     241            jb P1.5, LCD_PB_Done
0501            242   
0501            243            ; Set the LCD data pins to logic 1
0501 D280       244            setb P0.0
0503 D281       245            setb P0.1
0505 D282       246            setb P0.2
0507 D283       247            setb P0.3
0509 D293       248            setb P1.3
050B            249            
050B            250            ; Check the push buttons one by one
050B C293       251            clr P1.3
050D A295       252            mov c, P1.5
050F 9204       253            mov PB4, c
0511 D293       254            setb P1.3
0513            255   
0513 C280       256            clr P0.0
0515 A295       257            mov c, P1.5
0517 9203       258            mov PB3, c
0519 D280       259            setb P0.0
051B            260            
051B C281       261            clr P0.1
051D A295       262            mov c, P1.5
051F 9202       263            mov PB2, c
0521 D281       264            setb P0.1
0523            265            
0523 C282       266            clr P0.2
0525 A295       267            mov c, P1.5
0527 9201       268            mov PB1, c
0529 D282       269            setb P0.2
052B            270            
052B C283       271            clr P0.3
052D A295       272            mov c, P1.5
052F 9200       273            mov PB0, c
0531 D283       274            setb P0.3
0533            275   
0533            276   LCD_PB_Done:             
0533 22         277            ret
0534            278   
0534            279   check_decrement: 
0534 200005     280            jb PB0, check_stime
0537 B205       281            cpl decrement1
0539 02053C     282            ljmp check_stime
053C            283   
053C            284   check_stime:
053C 200117     285            jb PB1, check_stemp
053F 20050A     286            jb decrement1, Soak_time_decrement
0542 E531       287            mov a, Soak_time
0544 2401       288            add a, #0x01
0546 D4         289            da a
0547 F531       290            mov Soak_time, a
0549 020556     291            ljmp check_stemp
054C            292   
054C            293   Soak_time_decrement: 
054C E531       294            mov a, Soak_time
054E 2499       295            add a, #0x99
0550 D4         296            da a
0551 F531       297            mov Soak_time, a
0553 020556     298            ljmp check_stemp
0556            299   
0556            300   check_stemp:
0556 200259     301            jb PB2, check_rtime
0559 200530     302            jb decrement1, Soak_temp_decrement
055C E532       303            mov a, Soak_temp
055E 2401       304            add a, #0x01
0560 D4         305            da a
0561 F532       306            mov Soak_temp, a
0563 B49903     307       cjne a, #0x99, cont_s
0566 020580     308       ljmp add_hund_s
0569            309       cont_s:
0569 E533       310       mov a, soak_temp_hund
056B B4200F     311            cjne a, #0x20, fini
056E E532       312       mov a, Soak_temp
0570 B4503F     313       cjne a, #0x50, check_rtime
0573 7400       314            mov a, #0x00
0575 F532       315            mov Soak_temp, a
0577 E533       316       mov a, soak_temp_hund
0579 7400       317       mov a, #0x00
057B F533       318       mov soak_temp_hund, a
057D            319       fini:
057D 0205B2     320            ljmp check_rtime
0580            321   
0580            322   add_hund_s:
0580 E533       323       mov a, soak_temp_hund
0582 2410       324       add a, #0x10
0584 D4         325       da A
0585 F533       326       mov soak_temp_hund, A
0587 E532       327       mov a, Soak_temp
0589 020569     328       ljmp cont_s
058C            329   
058C            330   Soak_temp_decrement: 
058C E532       331            mov a, Soak_temp
058E 2499       332            add a, #0x99
0590 D4         333            da a
0591 F532       334            mov Soak_temp, a
0593 B4001C     335       cjne a, #0x00, check_rtime
0596 0205AA     336       ljmp decrement_s_hund    
0599            337       continue_dec_s:
0599 753320     338       mov soak_temp_hund, #0x20
059C 753250     339       mov soak_temp, #0x50
059F 0205B2     340       ljmp check_rtime
05A2            341       cont_s_dec:
05A2 9410       342       SUBB a, #0x10
05A4 D4         343       da A
05A5 F533       344       mov soak_temp_hund, a 
05A7 0205B2     345            ljmp check_rtime
05AA            346   
05AA            347   decrement_s_hund:
05AA E533       348       mov a, soak_temp_hund
05AC B40069     349       cjne a , #0x00, cont_dec
05AF 020599     350       ljmp continue_dec_s
05B2            351   
05B2            352   check_rtime:
05B2 200317     353            jb PB3, check_rtemp 
05B5 20050A     354            jb decrement1, Reflow_time_decrement
05B8 E534       355            mov a, Reflow_time
05BA 2401       356            add a, #0x01
05BC D4         357            da a
05BD F534       358            mov Reflow_time, a
05BF 0205CC     359            ljmp check_rtemp
05C2            360   
05C2            361   Reflow_time_decrement: 
05C2 E534       362            mov a, Reflow_time
05C4 2499       363            add a, #0x99
05C6 D4         364            da a
05C7 F534       365            mov Reflow_time, a
05C9 0205CC     366            ljmp check_rtemp
05CC            367   
05CC            368   check_rtemp:
05CC 200459     369            jb PB4, skipp
05CF 200530     370            jb decrement1, Reflow_temp_decrement
05D2 E535       371            mov a, Reflow_temp
05D4 2401       372            add a, #0x01
05D6 D4         373       da a
05D7 F535       374       mov Reflow_temp, a
05D9 B49903     375            cjne a, #0x99, cont_r
05DC 0205F6     376       ljmp add_hundreds_r
05DF            377       cont_r:
05DF            378       ;check hundreds
05DF E53C       379       mov a, reflow_temp_100
05E1 B4200F     380       cjne a, #0x20, cont_count ;make sure to check with 20 since the hundreds place value is multiplied by 10
05E4 E535       381            mov a, reflow_temp
05E6 B4503F     382       cjne a, #0x50, skipp
05E9 7400       383       mov a, #0x00
05EB F535       384       mov reflow_temp, a
05ED E53C       385       mov a, reflow_temp_100
05EF 7400       386       mov a, #0x00
05F1 F53C       387            mov Reflow_temp_100, a
05F3            388       cont_count:
05F3 020628     389            ljmp skipp
05F6            390   
05F6            391   add_hundreds_r:
05F6 E53C       392       mov a, reflow_temp_100
05F8 2410       393       add a, #0x10 ;add by ten bc in display it is 2 digit numbers so instead of showing 0120 for 120 itll show 120
05FA D4         394       da A
05FB F53C       395       mov reflow_temp_100, A
05FD E535       396       mov a, Reflow_temp
05FF 0205DF     397       ljmp cont_r
0602            398   
0602            399   
0602            400   Reflow_temp_decrement: 
0602 E535       401            mov a, Reflow_temp
0604 2499       402            add a, #0x99
0606 D4         403            da a
0607 F535       404            mov Reflow_temp, a
0609 B4001C     405       cjne a, #0x00, skipp
060C 020620     406       ljmp decrement_r_hund
060F            407       continue_dec_r:
060F            408            ;mov a, reflow_temp
060F            409       ;cjne a, #0x00, skipp
060F 753550     410       mov reflow_temp, #0x50
0612 753C20     411       mov reflow_temp_100, #0x20
0615 020628     412       ljmp skipp
0618            413       cont_dec:
0618 9410       414       SUBB a, #0x10
061A D4         415       da a
061B F53C       416       mov reflow_temp_100, a
061D 020628     417            ljmp skipp
0620            418   
0620            419       decrement_r_hund:
0620 E53C       420       mov a, reflow_temp_100
0622 B400F3     421       cjne a, #0x00, cont_dec
0625 02060F     422       ljmp continue_dec_r
0628            423   
0628            424   skipp:
0628 22         425            ret
0629            426   
0629            427   Check_start:
0629 209713     428            jb START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
062C C002       429            push AR2
062E 7A32       429            mov R2, #50
0630 1200EB     429            lcall ?Wait_Milli_Seconds
0633 D002       429            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0635 209707     430            jb  START_BUTTON, smjmp  ; if the 'Start' button is not pressed skip
0638 3097FD     431            jnb START_BUTTON, $             ; Wait for button release.  The '$' means: jump to same instruction.
063B 753001     432            mov STATE, #0x01
063E 22         433            ret
063F            434   smjmp:
063F 020628     435   ljmp skipp
0642            436   
0642            437   wait_for_ti:
0642 3099FD     438       jnb TI, wait_for_ti
0645 C299       439       clr TI
0647 22         440       ret
0648            441   
0648            442   display_menu:
0648 C0E0       443            push acc
064A 7407       443            mov a, #7
064C 14         443            dec a
064D 12017A     443            lcall ?Set_Cursor_1 ; Select column and row
0650 D0E0       443            pop acc 
0652 C000       444            push ar0
0654 A831       444            mov r0, Soak_time
0656 12017F     444            lcall ?Display_BCD
0659 D000       444            pop ar0
065B C0E0       445            push acc
065D 740B       445            mov a, #11
065F 14         445            dec a
0660 12017A     445            lcall ?Set_Cursor_1 ; Select column and row
0663 D0E0       445            pop acc
0665 C000       446            push ar0
0667 A833       446            mov r0, Soak_temp_hund
0669 12017F     446            lcall ?Display_BCD
066C D000       446            pop ar0
066E C0E0       447            push acc
0670 740C       447            mov a, #12
0672 14         447            dec a
0673 12017A     447            lcall ?Set_Cursor_1 ; Select column and row
0676 D0E0       447            pop acc
0678 C000       448            push ar0
067A A832       448            mov r0, soak_temp
067C 12017F     448            lcall ?Display_BCD
067F D000       448            pop ar0
0681 C0E0       449            push acc
0683 7409       449            mov a, #9
0685 14         449            dec a
0686 120178     449            lcall ?Set_Cursor_2 ; Select column and row
0689 D0E0       449            pop acc
068B C000       450            push ar0
068D A834       450            mov r0, Reflow_time
068F 12017F     450            lcall ?Display_BCD
0692 D000       450            pop ar0
0694 C0E0       451            push acc
0696 740D       451            mov a, #13
0698 14         451            dec a
0699 120178     451            lcall ?Set_Cursor_2 ; Select column and row
069C D0E0       451            pop acc
069E C000       452            push ar0
06A0 A83C       452            mov r0, reflow_temp_100
06A2 12017F     452            lcall ?Display_BCD
06A5 D000       452            pop ar0
06A7 C0E0       453            push acc
06A9 740E       453            mov a, #14
06AB 14         453            dec a
06AC 120178     453            lcall ?Set_Cursor_2 ; Select column and row
06AF D0E0       453            pop acc
06B1 C000       454            push ar0
06B3 A835       454            mov r0, reflow_temp
06B5 12017F     454            lcall ?Display_BCD
06B8 D000       454            pop ar0
06BA 22         455       ret
06BB            456   
06BB            457   display_heating:
06BB C0E0       458            push acc
06BD 7404       458            mov a, #4
06BF 14         458            dec a
06C0 12017A     458            lcall ?Set_Cursor_1 ; Select column and row
06C3 D0E0       458            pop acc
06C5 C000       459            push ar0
06C7 A833       459            mov r0, Soak_temp_hund
06C9 12017F     459            lcall ?Display_BCD
06CC D000       459            pop ar0; change this one****
06CE C0E0       460            push acc
06D0 7405       460            mov a, #5
06D2 14         460            dec a
06D3 12017A     460            lcall ?Set_Cursor_1 ; Select column and row
06D6 D0E0       460            pop acc
06D8 C000       461            push ar0
06DA A832       461            mov r0, soak_temp
06DC 12017F     461            lcall ?Display_BCD
06DF D000       461            pop ar0
06E1 C0E0       462            push acc
06E3 740C       462            mov a, #12
06E5 14         462            dec a
06E6 12017A     462            lcall ?Set_Cursor_1 ; Select column and row
06E9 D0E0       462            pop acc
06EB C000       463            push ar0
06ED A838       463            mov r0, outside_temp
06EF 12017F     463            lcall ?Display_BCD
06F2 D000       463            pop ar0
06F4 C0E0       464            push acc
06F6 7407       464            mov a, #7
06F8 14         464            dec a
06F9 120178     464            lcall ?Set_Cursor_2 ; Select column and row
06FC D0E0       464            pop acc
06FE C000       465       push ar0
0700 A836       465       mov r0, current_temp             ; Load the 16-bit value to display
0702 120195     465       lcall ?Display_BCD3
0705 D000       465       pop ar0; change this one****
0707 22         466            ret
0708            467   
0708            468   display_blank:
0708 C0E0       469            push acc
070A 7401       469            mov a, #1
070C 14         469            dec a
070D 12017A     469            lcall ?Set_Cursor_1 ; Select column and row
0710 D0E0       469            pop acc
0712 C083       470            push dph
0714 C082       470            push dpl
0716 C0E0       470            push acc
0718 900069     470            mov dptr, #blank
071B 12016D     470            lcall ?Send_Constant_String
071E D0E0       470            pop acc
0720 D082       470            pop dpl
0722 D083       470            pop dph
0724 C0E0       471            push acc
0726 7401       471            mov a, #1
0728 14         471            dec a
0729 120178     471            lcall ?Set_Cursor_2 ; Select column and row
072C D0E0       471            pop acc
072E C083       472            push dph
0730 C082       472            push dpl
0732 C0E0       472            push acc
0734 900069     472            mov dptr, #blank
0737 12016D     472            lcall ?Send_Constant_String
073A D0E0       472            pop acc
073C D082       472            pop dpl
073E D083       472            pop dph
0740 22         473            ret
0741            474   
0741            475   Display_formated_BCD:
0741 C0E0       476            push acc
0743 740C       476            mov a, #12
0745 14         476            dec a
0746 12017A     476            lcall ?Set_Cursor_1 ; Select column and row
0749 D0E0       476            pop acc
074B C000       477            push ar0
074D A84B       477            mov r0, bcd+2
074F 12017F     477            lcall ?Display_BCD
0752 D000       477            pop ar0
0754 C0E0       478            push acc
0756 742E       478            mov a, #'.'
0758 120130     478            lcall ?WriteData
075B D0E0       478            pop acc
075D C000       479            push ar0
075F A84A       479            mov r0, bcd+1
0761 12017F     479            lcall ?Display_BCD
0764 D000       479            pop ar0
0766 22         480            ret
0767            481   
0767            482   conv_to_bcd_high:
0767 C4         483       swap a
0768 540F       484       anl a, #0x0f
076A F9         485       mov R1, a
076B 22         486   ret
076C            487   conv_to_bcd_low:
076C 540F       488       anl a, #0x0f
076E F8         489       mov R0, A
076F 22         490   ret
0770            491   conv_to_bcd:
0770 883D       492            mov x+0, R0
0772 893E       493            mov x+1, R1
0774 753F00     494            mov x+2, #0
0777 754000     495            mov x+3, #0
077A 1201D3     496       lcall hex2bcd
077D 22         497   ret
077E            498   Outside_tmp:
077E 53E8F0     499       anl ADCCON0, #0xF0
0781 43E807     500            orl ADCCON0, #0x07 ; Select channel 7 
0784            501   
0784 C2EF       502       clr ADCF
0786 D2EE       503       setb ADCS
0788 30EFFD     504       jnb ADCF, $
078B            505   
078B E5C3       506       mov a, ADCRH
078D C4         507       swap a
078E C0E0       508       push acc
0790 540F       509       anl a, #0x0f
0792 F9         510       mov R1, a
0793 D0E0       511       pop acc
0795 54F0       512       anl a, #0xf0
0797 45C2       513       orl a, ADCRL
0799 F8         514       mov R0, A
079A            515       
079A            516       ; Convert to voltage
079A 883D       517            mov x+0, R0
079C 893E       518            mov x+1, R1
079E 753F00     519            mov x+2, #0
07A1 754000     520            mov x+3, #0
07A4 75417C     521            mov y+0, #low (50300 % 0x10000) 
07A7 7542C4     521            mov y+1, #high(50300 % 0x10000) 
07AA 754300     521            mov y+2, #low (50300 / 0x10000) 
07AD 754400     521            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07B0 12034D     522            lcall mul32
07B3 7541FF     523            mov y+0, #low (4095 % 0x10000) 
07B6 75420F     523            mov y+1, #high(4095 % 0x10000) 
07B9 754300     523            mov y+2, #low (4095 / 0x10000) 
07BC 754400     523            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07BF 1203DA     524            lcall div32
07C2 7541A4     525            mov y+0, #low (27300 % 0x10000) 
07C5 75426A     525            mov y+1, #high(27300 % 0x10000) 
07C8 754300     525            mov y+2, #low (27300 / 0x10000) 
07CB 754400     525            mov y+3, #high(27300 / 0x10000) 
07CE 1202B9     526            lcall sub32
07D1 754164     527            mov y+0, #low (100 % 0x10000) 
07D4 754200     527            mov y+1, #high(100 % 0x10000) 
07D7 754300     527            mov y+2, #low (100 / 0x10000) 
07DA 754400     527            mov y+3, #high(100 / 0x10000) 
07DD 12034D     528            lcall mul32
07E0            529       ;save outside temp to z to later add onto the oven temp
07E0 853D45     530       mov z+0, x+0
07E3 853E46     531       mov z+1, x+1
07E6 853F47     532       mov z+2, x+2
07E9 854048     533       mov z+3, x+3 
07EC 1201D3     534       lcall hex2bcd
07EF 120741     535       lcall Display_formated_BCD
07F2            536            
07F2 22         537            ret
07F3            538   
07F3            539   oven_tmp:
07F3 53E8F0     540       anl  ADCCON0, #0xF0  
07F6 43E804     541       orl  ADCCON0, #0x04  ; Select AIN4 (P0.5)
07F9            542   
07F9 C2EF       543       clr ADCF
07FB D2EE       544       setb ADCS
07FD 30EFFD     545       jnb ADCF, $
0800            546   
0800 E5C3       547       mov a, ADCRH
0802 C4         548       swap a
0803 C0E0       549       push acc
0805 540F       550       anl a, #0x0f
0807 F9         551       mov R1, a
0808 D0E0       552       pop acc
080A 54F0       553       anl a, #0xf0
080C 45C2       554       orl a, ADCRL
080E F8         555       mov R0, A
080F            556       
080F            557       ; Convert to voltage
080F 883D       558            mov x+0, R0
0811 893E       559            mov x+1, R1
0813 753F00     560            mov x+2, #0
0816 754000     561            mov x+3, #0
0819 75417C     562            mov y+0, #low (50300 % 0x10000) 
081C 7542C4     562            mov y+1, #high(50300 % 0x10000) 
081F 754300     562            mov y+2, #low (50300 / 0x10000) 
0822 754400     562            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0825 12034D     563            lcall mul32
0828 7541FF     564            mov y+0, #low (4095 % 0x10000) 
082B 75420F     564            mov y+1, #high(4095 % 0x10000) 
082E 754300     564            mov y+2, #low (4095 / 0x10000) 
0831 754400     564            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0834 1203DA     565            lcall div32
0837            566   
0837            567            ;vout of opamp should now be in x
0837            568       ;use formula vout=41uV/degC * R1/R2 --> degC = (vout*R2)/41*r1
0837            569       ;first calculate vout*R2:
0837 7541BD     570            mov y+0, #low (1469 % 0x10000) 
083A 754205     570            mov y+1, #high(1469 % 0x10000) 
083D 754300     570            mov y+2, #low (1469 / 0x10000) 
0840 754400     570            mov y+3, #high(1469 / 0x10000) 
0843 12034D     571       lcall mul32
0846            572       ;now vout*R2 ohm is in x
0846            573       ;next we will take 461 650V and divide
0846 754152     574            mov y+0, #low (461650 % 0x10000) 
0849 75420B     574            mov y+1, #high(461650 % 0x10000) 
084C 754307     574            mov y+2, #low (461650 / 0x10000) 
084F 754400     574            mov y+3, #high(461650 / 0x10000)  
0852 1203DA     575       lcall div32
0855            576       ;multiply by 100k and then divide by 41 to cancel units
0855 754140     577            mov y+0, #low (1000000 % 0x10000) 
0858 754242     577            mov y+1, #high(1000000 % 0x10000) 
085B 75430F     577            mov y+2, #low (1000000 / 0x10000) 
085E 754400     577            mov y+3, #high(1000000 / 0x10000) 
0861 12034D     578       lcall mul32
0864 754129     579            mov y+0, #low (41 % 0x10000) 
0867 754200     579            mov y+1, #high(41 % 0x10000) 
086A 754300     579            mov y+2, #low (41 / 0x10000) 
086D 754400     579            mov y+3, #high(41 / 0x10000) 
0870 1203DA     580       lcall div32
0873            581       ;move the outside temp to y and add
0873 854541     582       mov y+0, z+0
0876 854642     583       mov y+1, z+1
0879 854743     584       mov y+2, z+2
087C 854844     585       mov y+3, z+3
087F 120298     586       lcall add32
0882 1201D3     587       lcall hex2bcd
0885 12088F     588       lcall display_oven_tmp
0888 854B36     589       mov current_temp, bcd+2
088B 854C37     590       mov current_temp_hund, bcd+3
088E            591       
088E 22         592   ret
088F            593   
088F            594   display_oven_tmp:
088F C0E0       595            push acc
0891 7406       595            mov a, #6
0893 14         595            dec a
0894 120178     595            lcall ?Set_Cursor_2 ; Select column and row
0897 D0E0       595            pop acc
0899 C000       596            push ar0
089B A84C       596            mov r0, bcd+3
089D 12017F     596            lcall ?Display_BCD
08A0 D000       596            pop ar0
08A2 C000       597            push ar0
08A4 A84B       597            mov r0, bcd+2
08A6 12017F     597            lcall ?Display_BCD
08A9 D000       597            pop ar0
08AB C0E0       598            push acc
08AD 742E       598            mov a, #'.'
08AF 120130     598            lcall ?WriteData
08B2 D0E0       598            pop acc
08B4 C000       599            push ar0
08B6 A84A       599            mov r0, bcd+1
08B8 12017F     599            lcall ?Display_BCD
08BB D000       599            pop ar0
08BD 22         600            ret
08BE            601   skipp1:
08BE 22         602            ret
08BF            603   
08BF            604   check_temps:
08BF E536       605            mov a, current_temp 
08C1 B532FA     606            cjne a, Soak_temp, skipp1
08C4 E537       607            mov a, current_temp_hund
08C6 85333D     608            mov x, soak_temp_hund 
08C9 75410A     609            mov y+0, #low (10 % 0x10000) 
08CC 754200     609            mov y+1, #high(10 % 0x10000) 
08CF 754300     609            mov y+2, #low (10 / 0x10000) 
08D2 754400     609            mov y+3, #high(10 / 0x10000) 
08D5 1203DA     610            lcall div32 
08D8 853D33     611            mov soak_temp_hund, x
08DB B533E0     612            cjne a, soak_temp_hund, skipp1
08DE 753002     613            mov STATE, #0x02
08E1 22         614            ret
08E2            615   check_currenttemp:
08E2 E536       616            mov a, current_temp
08E4 B460D7     617            cjne a, #0x60, skipp1
08E7 D208       618            setb temp_flag
08E9 22         619            ret
08EA            620   safety_feature:
08EA E539       621            mov a, seconds
08EC B460CF     622            cjne a, #0x60, skipp1
08EF 2008CC     623            jb temp_flag, skipp1
08F2 120708     624            lcall display_blank
08F5 753B00     625            mov pwm, #0
08F8 C0E0       626            push acc
08FA 7401       626            mov a, #1
08FC 14         626            dec a
08FD 12017A     626            lcall ?Set_Cursor_1 ; Select column and row
0900 D0E0       626            pop acc
0902 C083       627            push dph
0904 C082       627            push dpl
0906 C0E0       627            push acc
0908 90007A     627            mov dptr, #safety_message
090B 12016D     627            lcall ?Send_Constant_String
090E D0E0       627            pop acc
0910 D082       627            pop dpl
0912 D083       627            pop dph
0914            628   safety_feature_loop:
0914 020914     629            ljmp safety_feature_loop
0917            630            
0917            631   ; new function
0917            632   display_ready:
0917 C0E0       633            push acc
0919 7401       633            mov a, #1
091B 14         633            dec a
091C 12017A     633            lcall ?Set_Cursor_1 ; Select column and row
091F D0E0       633            pop acc
0921 C083       634            push dph
0923 C082       634            push dpl
0925 C0E0       634            push acc
0927 9000C5     634            mov dptr, #cooldown_complete
092A 12016D     634            lcall ?Send_Constant_String
092D D0E0       634            pop acc
092F D082       634            pop dpl
0931 D083       634            pop dph
0933 C0E0       635            push acc
0935 7401       635            mov a, #1
0937 14         635            dec a
0938 120178     635            lcall ?Set_Cursor_2 ; Select column and row
093B D0E0       635            pop acc
093D C083       636            push dph
093F C082       636            push dpl
0941 C0E0       636            push acc
0943 9000D3     636            mov dptr, #ready_to_open
0946 12016D     636            lcall ?Send_Constant_String
0949 D0E0       636            pop acc
094B D082       636            pop dpl
094D D083       636            pop dph
094F 22         637       ret
0950            638   
0950            639   main:
0950 75817F     640            mov sp, #0x7f
0953 120443     641            lcall Init_All
0956 12013A     642       lcall LCD_4BIT
0959 1204BF     643            lcall Timer2_ISR
095C            644       
095C            645        ; initial messages in LCD
095C 753000     646       mov STATE, #0x00
095F 753100     647       mov Soak_time, #0x00
0962 753200     648       mov Soak_temp, #0x00
0965 753300     649       mov soak_temp_hund, #0x00
0968 753400     650       mov Reflow_time, #0x00
096B 753500     651       mov Reflow_temp, #0x00
096E 753600     652       mov current_temp, #0x00
0971 753700     653       mov current_temp_hund, #0x00
0974 753900     654       mov seconds, #0x00
0977 753A00     655       mov pwm_counter, #0x00
097A 753B00     656       mov pwm, #0x00
097D 753C00     657       mov reflow_temp_100, #0x00
0980 753300     658       mov soak_temp_hund, #0x00
0983 C205       659       clr decrement1
0985 C206       660       clr s_flag 
0987            661            
0987            662   Forever:
0987 120708     663            lcall display_blank
098A            664            
098A            665   state_0:
098A C0E0       666            push acc
098C 7401       666            mov a, #1
098E 14         666            dec a
098F 12017A     666            lcall ?Set_Cursor_1 ; Select column and row
0992 D0E0       666            pop acc
0994 C083       667            push dph
0996 C082       667            push dpl
0998 C0E0       667            push acc
099A 90002E     667            mov dptr, #soak_param
099D 12016D     667            lcall ?Send_Constant_String
09A0 D0E0       667            pop acc
09A2 D082       667            pop dpl
09A4 D083       667            pop dph
09A6 C0E0       668            push acc
09A8 7401       668            mov a, #1
09AA 14         668            dec a
09AB 120178     668            lcall ?Set_Cursor_2 ; Select column and row
09AE D0E0       668            pop acc
09B0 C083       669            push dph
09B2 C082       669            push dpl
09B4 C0E0       669            push acc
09B6 90003D     669            mov dptr, #reflow_param
09B9 12016D     669            lcall ?Send_Constant_String
09BC D0E0       669            pop acc
09BE D082       669            pop dpl
09C0 D083       669            pop dph
09C2            670   
09C2            671   state_0_loop:
09C2 E530       672            mov a, STATE
09C4 753B64     673           mov pwm, #100
09C7 B4000F     674            cjne a, #0, state_1
09CA 1204E0     675            lcall LCD_PB
09CD 120534     676            lcall check_decrement
09D0 120648     677            lcall display_menu
09D3 120629     678            lcall Check_start
09D6 0209C2     679            ljmp state_0_loop
09D9            680   
09D9            681   state_1: 
09D9 120708     682            lcall display_blank
09DC E539       683            mov a, seconds
09DE 7400       684            mov a, #0x00
09E0 F539       685            mov seconds, a
09E2 C0E0       686            push acc
09E4 7401       686            mov a, #1
09E6 14         686            dec a
09E7 12017A     686            lcall ?Set_Cursor_1 ; Select column and row
09EA D0E0       686            pop acc
09EC C083       687            push dph
09EE C082       687            push dpl
09F0 C0E0       687            push acc
09F2 90004E     687            mov dptr, #heating_to
09F5 12016D     687            lcall ?Send_Constant_String
09F8 D0E0       687            pop acc
09FA D082       687            pop dpl
09FC D083       687            pop dph
09FE C0E0       688            push acc
0A00 7401       688            mov a, #1
0A02 14         688            dec a
0A03 120178     688            lcall ?Set_Cursor_2 ; Select column and row
0A06 D0E0       688            pop acc
0A08 C083       689            push dph
0A0A C082       689            push dpl
0A0C C0E0       689            push acc
0A0E 90005E     689            mov dptr, #heating_temp
0A11 12016D     689            lcall ?Send_Constant_String
0A14 D0E0       689            pop acc
0A16 D082       689            pop dpl
0A18 D083       689            pop dph
0A1A            690   
0A1A            691   state_1_loop:
0A1A E530       692            mov a, STATE
0A1C B40122     693            cjne a, #1, state_2
0A1F 1206BB     694            lcall display_heating
0A22 753B00     695            mov pwm, #0
0A25 12077E     696            lcall outside_tmp
0A28 1207F3     697            lcall oven_tmp
0A2B 1208E2     698            lcall check_currenttemp
0A2E 1208EA     699            lcall safety_feature
0A31 1208BF     700            lcall check_temps
0A34 7AFA       701            mov R2, #250
0A36 1204B9     702            lcall waitms
0A39 7AFA       703            mov R2, #250
0A3B 1204B9     704            lcall waitms
0A3E 020A1A     705            ljmp state_1_loop
0A41            706   
0A41            707   state_2:
0A41 120708     708            lcall display_blank 
0A44 753900     709            mov seconds, #0x00
0A47 C0E0       710            push acc
0A49 7401       710            mov a, #1
0A4B 14         710            dec a
0A4C 12017A     710            lcall ?Set_Cursor_1 ; Select column and row
0A4F D0E0       710            pop acc
0A51 C083       711            push dph
0A53 C082       711            push dpl
0A55 C0E0       711            push acc
0A57 900089     711            mov dptr, #soaking
0A5A 12016D     711            lcall ?Send_Constant_String
0A5D D0E0       711            pop acc
0A5F D082       711            pop dpl
0A61 D083       711            pop dph
0A63 C0E0       712            push acc
0A65 7401       712            mov a, #1
0A67 14         712            dec a
0A68 120178     712            lcall ?Set_Cursor_2 ; Select column and row
0A6B D0E0       712            pop acc
0A6D C083       713            push dph
0A6F C082       713            push dpl
0A71 C0E0       713            push acc
0A73 900096     713            mov dptr, #time
0A76 12016D     713            lcall ?Send_Constant_String
0A79 D0E0       713            pop acc
0A7B D082       713            pop dpl
0A7D D083       713            pop dph
0A7F C0E0       714            push acc
0A81 740E       714            mov a, #14
0A83 14         714            dec a
0A84 12017A     714            lcall ?Set_Cursor_1 ; Select column and row
0A87 D0E0       714            pop acc
0A89 C000       715            push ar0
0A8B A831       715            mov r0, soak_time
0A8D 12017F     715            lcall ?Display_BCD
0A90 D000       715            pop ar0
0A92            716   
0A92            717   state_2_loop: 
0A92 C0E0       718            push acc
0A94 7406       718            mov a, #6
0A96 14         718            dec a
0A97 120178     718            lcall ?Set_Cursor_2 ; Select column and row
0A9A D0E0       718            pop acc
0A9C C000       719            push ar0
0A9E A839       719            mov r0, seconds
0AA0 12017F     719            lcall ?Display_BCD
0AA3 D000       719            pop ar0
0AA5 85393D     720            mov x, seconds 
0AA8 1201D3     721            lcall hex2bcd 
0AAB C000       722            push ar0
0AAD A849       722            mov r0, bcd
0AAF 12017F     722            lcall ?Display_BCD
0AB2 D000       722            pop ar0
0AB4 753B14     723            mov pwm, #20
0AB7 1208BF     724            lcall check_temps
0ABA 1208EA     725       lcall safety_feature
0ABD 7AFA       726       mov R2, #250
0ABF 1204B9     727       lcall waitms
0AC2 7AFA       728       mov R2, #250
0AC4 1204B9     729       lcall waitms
0AC7 E530       730            mov a, STATE
0AC9 B40203     731       cjne a, #2, state_3
0ACC 020A92     732            ljmp state_2_loop
0ACF            733            
0ACF            734   state_3:
0ACF 120708     735       lcall display_blank
0AD2 753900     736       mov seconds, #0x00
0AD5 C0E0       737            push acc
0AD7 7401       737            mov a, #1
0AD9 14         737            dec a
0ADA 12017A     737            lcall ?Set_Cursor_1 ; Select column and row
0ADD D0E0       737            pop acc
0ADF C083       738            push dph
0AE1 C082       738            push dpl
0AE3 C0E0       738            push acc
0AE5 90009F     738            mov dptr, #reflowing
0AE8 12016D     738            lcall ?Send_Constant_String
0AEB D0E0       738            pop acc
0AED D082       738            pop dpl
0AEF D083       738            pop dph
0AF1 C0E0       739            push acc
0AF3 7401       739            mov a, #1
0AF5 14         739            dec a
0AF6 120178     739            lcall ?Set_Cursor_2 ; Select column and row
0AF9 D0E0       739            pop acc
0AFB C083       740            push dph
0AFD C082       740            push dpl
0AFF C0E0       740            push acc
0B01 900096     740            mov dptr, #time
0B04 12016D     740            lcall ?Send_Constant_String
0B07 D0E0       740            pop acc
0B09 D082       740            pop dpl
0B0B D083       740            pop dph
0B0D C0E0       741            push acc
0B0F 740E       741            mov a, #14
0B11 14         741            dec a
0B12 12017A     741            lcall ?Set_Cursor_1 ; Select column and row
0B15 D0E0       741            pop acc
0B17 C000       742            push ar0
0B19 A834       742            mov r0, reflow_time
0B1B 12017F     742            lcall ?Display_BCD
0B1E D000       742            pop ar0
0B20            743   
0B20            744   state_3_loop:
0B20 C0E0       745            push acc
0B22 7406       745            mov a, #6
0B24 14         745            dec a
0B25 120178     745            lcall ?Set_Cursor_2 ; Select column and row
0B28 D0E0       745            pop acc
0B2A 85393D     746       mov x, seconds
0B2D 1201D3     747       lcall hex2bcd
0B30 C000       748            push ar0
0B32 A849       748            mov r0, bcd
0B34 12017F     748            lcall ?Display_BCD
0B37 D000       748            pop ar0
0B39 753B00     749       mov pwm, #0
0B3C 1208BF     750       lcall check_temps
0B3F 1208EA     751       lcall safety_feature
0B42 7AFA       752       mov R2, #250
0B44 1204B9     753       lcall waitms
0B47 7AFA       754       mov R2, #250
0B49 1204B9     755       lcall waitms
0B4C E530       756       mov a, STATE
0B4E B40303     757       cjne a, #3, state_4
0B51 020B20     758       ljmp state_3_loop
0B54            759   
0B54            760   state_4:
0B54 120708     761       lcall display_blank
0B57 753900     762       mov seconds, #0x00
0B5A C0E0       763            push acc
0B5C 7401       763            mov a, #1
0B5E 14         763            dec a
0B5F 12017A     763            lcall ?Set_Cursor_1 ; Select column and row
0B62 D0E0       763            pop acc
0B64 C083       764            push dph
0B66 C082       764            push dpl
0B68 C0E0       764            push acc
0B6A 9000AC     764            mov dptr, #cooling
0B6D 12016D     764            lcall ?Send_Constant_String
0B70 D0E0       764            pop acc
0B72 D082       764            pop dpl
0B74 D083       764            pop dph
0B76 C0E0       765            push acc
0B78 7401       765            mov a, #1
0B7A 14         765            dec a
0B7B 120178     765            lcall ?Set_Cursor_2 ; Select column and row
0B7E D0E0       765            pop acc
0B80 C083       766            push dph
0B82 C082       766            push dpl
0B84 C0E0       766            push acc
0B86 900096     766            mov dptr, #time
0B89 12016D     766            lcall ?Send_Constant_String
0B8C D0E0       766            pop acc
0B8E D082       766            pop dpl
0B90 D083       766            pop dph
0B92 C0E0       767            push acc
0B94 740E       767            mov a, #14
0B96 14         767            dec a
0B97 12017A     767            lcall ?Set_Cursor_1 ; Select column and row
0B9A D0E0       767            pop acc
0B9C C000       768            push ar0
0B9E A8B7       768            mov r0, cooling_time
0BA0 12017F     768            lcall ?Display_BCD
0BA3 D000       768            pop ar0
0BA5            769   
0BA5            770   state_4_loop:
0BA5 C0E0       771            push acc
0BA7 7406       771            mov a, #6
0BA9 14         771            dec a
0BAA 120178     771            lcall ?Set_Cursor_2 ; Select column and row
0BAD D0E0       771            pop acc
0BAF C000       772            push ar0
0BB1 A839       772            mov r0, seconds
0BB3 12017F     772            lcall ?Display_BCD
0BB6 D000       772            pop ar0
0BB8 85393D     773       mov x, seconds
0BBB 1201D3     774       lcall hex2bcd
0BBE C000       775            push ar0
0BC0 A849       775            mov r0, bcd
0BC2 12017F     775            lcall ?Display_BCD
0BC5 D000       775            pop ar0
0BC7 753B14     776       mov pwm, #20
0BCA 1208BF     777       lcall check_temps
0BCD 1208EA     778       lcall safety_feature
0BD0 7AFA       779       mov R2, #250
0BD2 1204B9     780       lcall waitms
0BD5 7AFA       781       mov R2, #250
0BD7 1204B9     782       lcall waitms
0BDA E530       783       mov a, STATE
0BDC B40403     784       cjne a, #4, state_5
0BDF 020BA5     785       ljmp state_4_loop
0BE2            786   
0BE2            787   state_5:
0BE2 120708     788       lcall display_blank
0BE5 753900     789       mov seconds, #0x00
0BE8 C0E0       790            push acc
0BEA 7401       790            mov a, #1
0BEC 14         790            dec a
0BED 12017A     790            lcall ?Set_Cursor_1 ; Select column and row
0BF0 D0E0       790            pop acc
0BF2 C083       791            push dph
0BF4 C082       791            push dpl
0BF6 C0E0       791            push acc
0BF8 9000C5     791            mov dptr, #cooldown_complete
0BFB 12016D     791            lcall ?Send_Constant_String
0BFE D0E0       791            pop acc
0C00 D082       791            pop dpl
0C02 D083       791            pop dph
0C04 C0E0       792            push acc
0C06 7401       792            mov a, #1
0C08 14         792            dec a
0C09 120178     792            lcall ?Set_Cursor_2 ; Select column and row
0C0C D0E0       792            pop acc
0C0E C083       793            push dph
0C10 C082       793            push dpl
0C12 C0E0       793            push acc
0C14 9000D3     793            mov dptr, #ready_to_open
0C17 12016D     793            lcall ?Send_Constant_String
0C1A D0E0       793            pop acc
0C1C D082       793            pop dpl
0C1E D083       793            pop dph
0C20            794       
0C20            795   state_5_loop:
0C20 753B00     796       mov pwm, #0
0C23 120917     797       lcall display_ready
0C26 E530       798       mov a, STATE
0C28 B40502     799       cjne a, #5, state_0_near
0C2B 80F3       800       sjmp state_5_loop
0C2D            801   
0C2D            802   state_0_near:
0C2D 02098A     803       ljmp state_0
0C30            804   
0C30            805   EN
